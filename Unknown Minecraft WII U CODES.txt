using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using MetroFramework;
using MetroFramework.Components;
using MetroFramework.Controls;
using MetroFramework.Forms;
using Minecraft_Wii_U_Mod_Injector.Forms;
using Minecraft_Wii_U_Mod_Injector.Forms.Managers;
using Minecraft_Wii_U_Mod_Injector.Forms.Mods;
using Minecraft_Wii_U_Mod_Injector.Helpers;
using Minecraft_Wii_U_Mod_Injector.Helpers.Win_Forms;
using Minecraft_Wii_U_Mod_Injector.Properties;
using Minecraft_Wii_U_Mod_Injector.Wii_U.Gecko_U;
using Minecraft_Wii_U_Mod_Injector.Wii_U.Minecraft;

namespace Minecraft_Wii_U_Mod_Injector
{
	// Token: 0x02000002 RID: 2
	public class MainForm : MetroForm
	{
		// Token: 0x17000001 RID: 1
		// (get) Token: 0x06000002 RID: 2 RVA: 0x00002057 File Offset: 0x00000257
		// (set) Token: 0x06000003 RID: 3 RVA: 0x0000205F File Offset: 0x0000025F
		public bool IsConnected
		{
			get
			{
				return this.Connected;
			}
			set
			{
				this.Connected = value;
				DiscordRP.SetPresence(this.Connected ? "Connected" : "Disconnected", this.MainTabs.SelectedTab.Text + " tab");
			}
		}

		// Token: 0x06000004 RID: 4 RVA: 0x0000209B File Offset: 0x0000029B
		public bool IsMinecraft()
		{
			return new string[]
			{
				"50000101d7500",
				"50000101d9d00",
				"50000101dbe00"
			}.Contains(MainForm.GeckoU.ReadTitleId());
		}

		// Token: 0x06000005 RID: 5 RVA: 0x000020CC File Offset: 0x000002CC
		public MainForm()
		{
			this.InitializeComponent();
			this.MainTabs.ItemSize = new Size(this.MainTabs.ItemSize.Width, 1);
			base.Opacity = 0.0;
		}

		// Token: 0x06000006 RID: 6 RVA: 0x00002160 File Offset: 0x00000360
		private void Init(object sender, EventArgs e)
		{
			new States(this);
			new Messaging(this);
			new Setup(this);
			new Miscellaneous(this);
			this.BuildNotesBox.Text = Resources.releaseNotes;
			this.BuildVerTitleLbl.Text = "Patch Notes for " + Setup.LocalVer;
			this.BuildTile.Text = Setup.LocalVer;
			Setup.SetupInjector();
		}

		// Token: 0x06000007 RID: 7 RVA: 0x000021C8 File Offset: 0x000003C8
		private void InitShown(object sender, EventArgs e)
		{
			if (!Settings.Default.SeenTutorial)
			{
				this.InitTutorial();
			}
		}

		// Token: 0x06000008 RID: 8 RVA: 0x000021DC File Offset: 0x000003DC
		private void InitTutorial()
		{
			MainForm.<InitTutorial>d__21 <InitTutorial>d__;
			<InitTutorial>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<InitTutorial>d__.<>4__this = this;
			<InitTutorial>d__.<>1__state = -1;
			<InitTutorial>d__.<>t__builder.Start<MainForm.<InitTutorial>d__21>(ref <InitTutorial>d__);
		}

		// Token: 0x06000009 RID: 9 RVA: 0x00002213 File Offset: 0x00000413
		private void Exit(object sender, FormClosingEventArgs e)
		{
			if (this.IsConnected)
			{
				MainForm.GeckoU.Tcp.Close();
			}
			DiscordRP.Deinitialize();
			Settings.Default.TabIndex = this.MainTabs.SelectedIndex;
			Settings.Default.Save();
		}

		// Token: 0x0600000A RID: 10 RVA: 0x00002250 File Offset: 0x00000450
		private void SwapTab(object sender, EventArgs e)
		{
			MetroTile metroTile = (MetroTile)sender;
			if ((string)metroTile.Tag == "MgTile")
			{
				if (this.MinigamesTabs.SelectedIndex != metroTile.TileCount)
				{
					this.MinigamesTabs.SelectedIndex = metroTile.TileCount;
					return;
				}
				return;
			}
			else
			{
				if (metroTile == this.MinigamesTile)
				{
					this.NavMenuMgPnl.Visible = !this.NavMenuMgPnl.Visible;
				}
				if (this.MainTabs.SelectedIndex != metroTile.TileCount)
				{
					this.MainTabs.SelectedIndex = metroTile.TileCount;
					DiscordRP.SetPresence(this.IsConnected ? "Connected" : "Disconnected", this.MainTabs.SelectedTab.Text + " tab");
					return;
				}
				return;
			}
		}

		// Token: 0x0600000B RID: 11 RVA: 0x00002320 File Offset: 0x00000520
		private void SliderClicked(object sender, EventArgs e)
		{
			NumericUpDown numericUpDown = (NumericUpDown)sender;
			if (Control.ModifierKeys.HasFlag(Keys.Control))
			{
				if (numericUpDown.DecimalPlaces != 10)
				{
					NumericUpDown numericUpDown2 = numericUpDown;
					int decimalPlaces = numericUpDown2.DecimalPlaces;
					numericUpDown2.DecimalPlaces = decimalPlaces + 1;
					return;
				}
			}
			else if (Control.ModifierKeys.HasFlag(Keys.Alt))
			{
				NumericUpDown numericUpDown3 = numericUpDown;
				int decimalPlaces = numericUpDown3.DecimalPlaces;
				numericUpDown3.DecimalPlaces = decimalPlaces - 1;
			}
		}

		// Token: 0x0600000C RID: 12 RVA: 0x00002398 File Offset: 0x00000598
		private void ConnectBtnClicked(object sender, EventArgs e)
		{
			try
			{
				if (MainForm.GeckoU == null)
				{
					MainForm.GeckoU = new GeckoUCore(this.WiiUIPv4Box.Text);
				}
				States.StatesIds currentState = States.CurrentState;
				if (currentState != States.StatesIds.Disconnected)
				{
					if (currentState == States.StatesIds.Connected)
					{
						MainForm.GeckoU.Tcp.Close();
						this.IsConnected = false;
						States.SwapState(States.StatesIds.Disconnected);
					}
				}
				else
				{
					States.SwapState(States.StatesIds.Connecting);
					MainForm.GeckoU.Tcp.Connect();
					if (!this.IsMinecraft())
					{
						Messaging.Show("This Mod Injector is intended to be used with Minecraft: Wii U Edition, please launch Minecraft and try again.");
						MainForm.GeckoU.Tcp.Close();
						States.SwapState(States.StatesIds.Disconnected);
					}
					else
					{
						new MinecraftFunctions(MainForm.GeckoU);
						States.SwapState(States.StatesIds.Connected);
						this.IsConnected = true;
					}
				}
			}
			catch (SocketException)
			{
				Messaging.Show(MessageBoxIcon.Hand, "Couldn't detect TCPGecko running or IP Address is wrong.\nMake sure you have TCPGecko running and entered the correct IP Address for you Wii U");
				States.SwapState(States.StatesIds.Disconnected);
			}
			catch (IOException)
			{
				Messaging.Show(MessageBoxIcon.Hand, "Couldn't detect TCPGecko running or IP Address is wrong.\nMake sure you have TCPGecko running and entered the correct IP Address for you Wii U");
				States.SwapState(States.StatesIds.Disconnected);
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Unable to Connect to the Wii U, unknown error", true);
				States.SwapState(States.StatesIds.Disconnected);
			}
		}

		// Token: 0x0600000D RID: 13 RVA: 0x000024AC File Offset: 0x000006AC
		private void CaptureWiiUiPv4Box(object sender, EventArgs e)
		{
			bool flag = StringUtils.ValidateIPv4(this.WiiUIPv4Box.Text);
			this.ConnectBtn.Enabled = flag;
			this.WiiUIPv4Box.Style = (flag ? MetroColorStyle.Green : (this.WiiUIPv4Box.Style = MetroColorStyle.Red));
		}

		// Token: 0x0600000E RID: 14 RVA: 0x000024F7 File Offset: 0x000006F7
		private void CaptureWiiUiPv4BoxInput(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Return)
			{
				this.ConnectBtnClicked(null, null);
			}
		}

		// Token: 0x0600000F RID: 15 RVA: 0x0000250C File Offset: 0x0000070C
		private void FormColorSelected(object sender, EventArgs e)
		{
			try
			{
				base.Style = (MetroColorStyle)Enum.Parse(typeof(MetroColorStyle), this.ColorsBox.Text);
				this.StyleMngr.Style = (MetroColorStyle)Enum.Parse(typeof(MetroColorStyle), this.ColorsBox.Text);
				this.Refresh();
				Settings.Default.Style = base.Style;
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Change Injector Form Color", true);
			}
		}

		// Token: 0x06000010 RID: 16 RVA: 0x000025A0 File Offset: 0x000007A0
		private void FormTxtAlgnSelected(object sender, EventArgs e)
		{
			try
			{
				base.TextAlign = (MetroFormTextAlign)Enum.Parse(typeof(MetroFormTextAlign), this.TextAllignBox.Text);
				this.Refresh();
				Settings.Default.FormTxtAlign = base.TextAlign;
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Change Injector Text Align", true);
			}
		}

		// Token: 0x06000011 RID: 17 RVA: 0x00002608 File Offset: 0x00000808
		private void DiscordRpcToggleChecked(object sender, EventArgs e)
		{
			try
			{
				if (this.discordRpcCheckBox.Checked)
				{
					DiscordRP.Initialize();
					DiscordRP.SetPresence(this.IsConnected ? "Connected" : "Disconnected", this.MainTabs.SelectedTab.Text + " tab");
				}
				else
				{
					DiscordRP.Deinitialize();
				}
				Settings.Default.DiscordRPC = this.discordRpcCheckBox.Checked;
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Toggle Discord RPC", true);
			}
		}

		// Token: 0x06000012 RID: 18 RVA: 0x00002698 File Offset: 0x00000898
		private void CheckUpdatesClicked(object sender, EventArgs e)
		{
			MainForm.<CheckUpdatesClicked>d__31 <CheckUpdatesClicked>d__;
			<CheckUpdatesClicked>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<CheckUpdatesClicked>d__.<>1__state = -1;
			<CheckUpdatesClicked>d__.<>t__builder.Start<MainForm.<CheckUpdatesClicked>d__31>(ref <CheckUpdatesClicked>d__);
		}

		// Token: 0x06000013 RID: 19 RVA: 0x000026C8 File Offset: 0x000008C8
		private void CheckForPreReleaseToggled(object sender, EventArgs e)
		{
			try
			{
				Settings.Default.PrereleaseOptIn = this.CheckForPreRelease.Checked;
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Toggle Release Notes", true);
			}
		}

		// Token: 0x06000014 RID: 20 RVA: 0x0000270C File Offset: 0x0000090C
		private void HostIndicatorsToggled(object sender, EventArgs e)
		{
			try
			{
				if (!Settings.Default.HostIndicators)
				{
					Messaging.Show("All mods will now be highlighted with a blue and orange color\n\nOrange: Host Only Mod\nBlue: Non-Host Mod");
				}
				Settings.Default.HostIndicators = this.HostIndicators.Checked;
				Miscellaneous.DoHostIndicators(this.HostIndicators.Checked);
				this.Refresh();
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Toggle Host Indicators", true);
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x0000277C File Offset: 0x0000097C
		private void SeasonalThemesToggled(object sender, EventArgs e)
		{
			try
			{
				Settings.Default.SeasonalThemes = this.SeasonalThemes.Checked;
				this.Refresh();
			}
			catch (Exception errorLog)
			{
				Exceptions.LogError(errorLog, "Failed to Toggle Seasonal Themes", true);
			}
		}

		// Token: 0x06000016 RID: 22 RVA: 0x000027C4 File Offset: 0x000009C4
		private void OpenLangMngrBtnClicked(object sender, EventArgs e)
		{
			new LanguageMngr(this).ShowDialog();
		}

		// Token: 0x06000017 RID: 23 RVA: 0x000027D2 File Offset: 0x000009D2
		private void QuickModsManagerBtnClicked(object sender, EventArgs e)
		{
			new QuickModsMngr(this).ShowDialog();
		}

		// Token: 0x06000018 RID: 24 RVA: 0x000027E0 File Offset: 0x000009E0
		private void CemuPckMngrBtnClicked(object sender, EventArgs e)
		{
			new CemuPckMngr(this).ShowDialog();
		}

		// Token: 0x06000019 RID: 25 RVA: 0x000027EE File Offset: 0x000009EE
		private void TutorialBtnClicked(object sender, EventArgs e)
		{
			this.InitTutorial();
		}

		// Token: 0x0600001A RID: 26 RVA: 0x000027F8 File Offset: 0x000009F8
		private void TipsBtnClicked(object sender, EventArgs e)
		{
			int num = new Random().Next(this._tipsList.Length);
			Messaging.Show(this._tipsList[num]);
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00002825 File Offset: 0x00000A25
		private void OpenFaqInfoClicked(object sender, EventArgs e)
		{
			new Faq(this).ShowDialog();
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00002833 File Offset: 0x00000A33
		private void SetupTutorialBtnClicked(object sender, EventArgs e)
		{
			MessageBox.Show("We currently do not have a dedicated setup tutorial for the Minecraft Wii U Mod Injector. Please refer to the setup tutorial of e.g. JGecko U and skip installing Java, also replace mentions of JGecko U with Minecraft Wii U Mod Injector.", "Setup Tutorial", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
			Process.Start("https://github.com/BullyWiiPlaza/JGeckoU/blob/master/README.md");
		}

		// Token: 0x0600001D RID: 29 RVA: 0x00002853 File Offset: 0x00000A53
		private void DiscordSrvBtnClicked(object sender, EventArgs e)
		{
			Process.Start("https://discord.gg/EcK8x5Mdr6");
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00002860 File Offset: 0x00000A60
		private void CreditsBtnClicked(object sender, EventArgs e)
		{
			new Credits(this).ShowDialog();
		}

		// Token: 0x0600001F RID: 31 RVA: 0x0000286E File Offset: 0x00000A6E
		private void MapTextEditorClicked(object sender, EventArgs e)
		{
			new MapTextEditor(this).ShowDialog();
		}

		// Token: 0x06000020 RID: 32 RVA: 0x0000287C File Offset: 0x00000A7C
		private void NnidEditorBtnClicked(object sender, EventArgs e)
		{
			new NnidEditor(this).ShowDialog();
		}

		// Token: 0x06000021 RID: 33 RVA: 0x0000288A File Offset: 0x00000A8A
		private void PlayerOptionsBtnClicked(object sender, EventArgs e)
		{
			if (MainForm.IsPointerLoaded())
			{
				new PlayerOptions(this).Show();
				return;
			}
			Messaging.Show("Player not found, please load into a world before using Player Options.");
		}

		// Token: 0x06000022 RID: 34 RVA: 0x000028A9 File Offset: 0x00000AA9
		private void LootTableEditorBtnClicked(object sender, EventArgs e)
		{
			new LootTableEditor(this).ShowDialog();
		}

		// Token: 0x06000023 RID: 35 RVA: 0x000028B7 File Offset: 0x00000AB7
		private void WorldGenerationOptsBtnClicked(object sender, EventArgs e)
		{
			new WorldGenerationEditor(this).ShowDialog();
		}

		// Token: 0x06000024 RID: 36 RVA: 0x000028C5 File Offset: 0x00000AC5
		private void EntityEditorBtnClicked(object sender, EventArgs e)
		{
			new EntityEditor(this).ShowDialog();
		}

		// Token: 0x06000025 RID: 37 RVA: 0x000028D3 File Offset: 0x00000AD3
		private void EnchantmentEditorBtnClicked(object sender, EventArgs e)
		{
			new EnchantmentEditor(this).ShowDialog();
		}

		// Token: 0x06000026 RID: 38 RVA: 0x000028E1 File Offset: 0x00000AE1
		private void AchievementEditorClicked(object sender, EventArgs e)
		{
			new AchievementEditor(this).ShowDialog();
		}

		// Token: 0x06000027 RID: 39 RVA: 0x000028EF File Offset: 0x00000AEF
		private void DLCManagerBtn_Click(object sender, EventArgs e)
		{
			new DLCManager(this).ShowDialog();
		}

		// Token: 0x06000028 RID: 40 RVA: 0x000028FD File Offset: 0x00000AFD
		private void DebugConsoleCustomizerBtn_Click(object sender, EventArgs e)
		{
			if (!this.DebugConsole.Checked || MainForm.GeckoU.PeekUInt(278894052U) == 0U)
			{
				MessageBox.Show("This mod requires the Debug UI Console to be active!");
				return;
			}
			new DebugUIConsoleCustomizer(this).ShowDialog();
		}

		// Token: 0x06000029 RID: 41 RVA: 0x00002935 File Offset: 0x00000B35
		private void KeyboardCustomizerBtn_Click(object sender, EventArgs e)
		{
			new KeyboardCustomizer(this).ShowDialog();
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00002943 File Offset: 0x00000B43
		private void ItemIdHelpBtnClicked(object sender, EventArgs e)
		{
			Messaging.Show(MessageBoxIcon.Asterisk, "Item IDs can be found at https://minecraft-ids.grahamedgecombe.com\nData Values are the numbers behind the : in the ID.\nFor example, if you want Birch Wood, the ID would be 17 and the data value would be 2.");
		}

		// Token: 0x0600002B RID: 43 RVA: 0x00002951 File Offset: 0x00000B51
		public static bool IsPointerLoaded()
		{
			return MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278963748U) + 156U) > 0U;
		}

		// Token: 0x0600002C RID: 44 RVA: 0x00002975 File Offset: 0x00000B75
		private void SwimFastToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(275154844U, 1033895936U, 1017370378U, this.SwimFast.Checked);
		}

		// Token: 0x0600002D RID: 45 RVA: 0x0000299C File Offset: 0x00000B9C
		private void BreakBedrockToggled(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Please load a world before toggling this mod");
				this.BreakBedrock.Checked = false;
				return;
			}
			uint num = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278673184U) + 1016U);
			MainForm.GeckoU.WriteULongToggle(num + 64U, 4506001549176078336UL, 9187343236808135744UL, this.BreakBedrock.Checked);
		}

		// Token: 0x0600002E RID: 46 RVA: 0x00002A12 File Offset: 0x00000C12
		private void InsaneCriticalHitsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(275582284U, 1139802112U, 1069547520U, this.InsaneCriticalHits.Checked);
		}

		// Token: 0x0600002F RID: 47 RVA: 0x00002A38 File Offset: 0x00000C38
		private void AlwaysSwimmingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(36963820U, 4062246869500166176UL, 4431544452364659128UL, this.AlwaysSwimming.Checked);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00002A66 File Offset: 0x00000C66
		private void InfiniteRiptideToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36880912U, MainForm.On, MainForm.Off, this.InfiniteRiptide.Checked);
		}

		// Token: 0x06000031 RID: 49 RVA: 0x00002A8C File Offset: 0x00000C8C
		private void FullRotationToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(274586360U, 14101896334339735552UL, 14029838740285030400UL, this.FullRotation.Checked);
		}

		// Token: 0x06000032 RID: 50 RVA: 0x00002ABA File Offset: 0x00000CBA
		private void AlwaysDamagedPlayersToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41027276U, MainForm.On, 1474496062U, this.AlwaysDamagedPlayers.Checked);
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00002AE0 File Offset: 0x00000CE0
		private void InfiniteItemsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteLongToggle(38302380U, 6917529028958093344L, 4431544542558974612L, this.InfiniteItems.Checked);
		}

		// Token: 0x06000034 RID: 52 RVA: 0x00002B0E File Offset: 0x00000D0E
		private void RapidBowToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(35008260U, 1004535809U, 1004535828U, this.RapidBow.Checked);
		}

		// Token: 0x06000035 RID: 53 RVA: 0x00002B34 File Offset: 0x00000D34
		private void BloodVisionToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39313408U, MainForm.Off, 1474496062U, this.BloodVision.Checked);
		}

		// Token: 0x06000036 RID: 54 RVA: 0x00002B5A File Offset: 0x00000D5A
		private void IgnorePotionsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39380156U, MainForm.Off, MainForm.On, this.IgnorePotions.Checked);
		}

		// Token: 0x06000037 RID: 55 RVA: 0x00002B80 File Offset: 0x00000D80
		private void ForeverLastingPotionsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39283092U, MainForm.Blr, 2485256000U, this.ForeverLastingPotions.Checked);
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00002BA6 File Offset: 0x00000DA6
		private void BypassInvulnerabilityToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(35997068U, MainForm.On, 2288189449U, this.BypassInvulnerability.Checked);
		}

		// Token: 0x06000039 RID: 57 RVA: 0x00002BCC File Offset: 0x00000DCC
		private void WearAnythingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34076164U, MainForm.On, 2143548280U, this.WearAnything.Checked);
		}

		// Token: 0x0600003A RID: 58 RVA: 0x00002BF2 File Offset: 0x00000DF2
		private void WalkonWaterToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(39491132U, 4350495517279726096UL, 4350495203747149340UL, this.WalkonWater.Checked);
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00002C20 File Offset: 0x00000E20
		private void AlwaysElytraToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(39377612U, 4062246869500166176UL, 4431544452364659128UL, this.AlwaysElytra.Checked);
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00002C4E File Offset: 0x00000E4E
		private void CaveFinderToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(51267876U, 947912704U, 947912705U, this.CaveFinder.Checked);
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00002C74 File Offset: 0x00000E74
		private void WallhackToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(52112204U, MainForm.On, 1409484350U, this.Wallhack.Checked);
		}

		// Token: 0x0600003E RID: 62 RVA: 0x00002C9C File Offset: 0x00000E9C
		private void LargeXpDropsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(37331564U, this.Nop, 1098907660U, this.LargeXPDrops.Checked);
			MainForm.GeckoU.WriteUIntToggle(37331568U, 945848319U, 945818029U, this.LargeXPDrops.Checked);
		}

		// Token: 0x0600003F RID: 63 RVA: 0x00002CF2 File Offset: 0x00000EF2
		private void WallClimbingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39313296U, MainForm.On, 1474496062U, this.WallClimbing.Checked);
		}

		// Token: 0x06000040 RID: 64 RVA: 0x00002D18 File Offset: 0x00000F18
		private void NoCollisionToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34503668U, MainForm.Blr, 2485256160U, this.NoCollision.Checked);
		}

		// Token: 0x06000041 RID: 65 RVA: 0x00002D3E File Offset: 0x00000F3E
		private void InfiniteAirToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39266980U, MainForm.Blr, this.Mflr, this.InfiniteAir.Checked);
		}

		// Token: 0x06000042 RID: 66 RVA: 0x00002D68 File Offset: 0x00000F68
		private void InfiniteDurabilityToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(38310044U, this.Nop, 1098973212U, this.InfiniteDurability.Checked);
			MainForm.GeckoU.WriteUIntToggle(38308300U, MainForm.Off, MainForm.On, this.InfiniteDurability.Checked);
		}

		// Token: 0x06000043 RID: 67 RVA: 0x00002DC0 File Offset: 0x00000FC0
		private void SuperKnockbackToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39311744U, 4227917880U, 4227883896U, this.SuperKnockback.Checked);
			MainForm.GeckoU.WriteUIntToggle(39311760U, 4246780048U, 4247323506U, this.SuperKnockback.Checked);
		}

		// Token: 0x06000044 RID: 68 RVA: 0x00002E15 File Offset: 0x00001015
		private void DisabledKnockbackToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39311452U, MainForm.Blr, 2485256104U, this.DisabledKnockback.Checked);
		}

		// Token: 0x06000045 RID: 69 RVA: 0x00002E3B File Offset: 0x0000103B
		private void SilkTouchAnythingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34514812U, MainForm.On, 1472398910U, this.SilkTouchAnything.Checked);
		}

		// Token: 0x06000046 RID: 70 RVA: 0x00002E61 File Offset: 0x00001061
		private void DeveloperModeToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49662068U, MainForm.On, MainForm.Off, this.DeveloperMode.Checked);
		}

		// Token: 0x06000047 RID: 71 RVA: 0x00002E87 File Offset: 0x00001087
		private void PickLiquidBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(631866628U, MainForm.On, 1472398910U, this.PickLiquidBlocks.Checked);
		}

		// Token: 0x06000048 RID: 72 RVA: 0x00002EAD File Offset: 0x000010AD
		private void DuelWieldAnyItemToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(38787060U, MainForm.On, MainForm.Off, this.DuelWieldanyItem.Checked);
		}

		// Token: 0x06000049 RID: 73 RVA: 0x00002ED3 File Offset: 0x000010D3
		private void DisableStarvingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41007724U, MainForm.On, 2145647480U, this.DisableStarving.Checked);
		}

		// Token: 0x0600004A RID: 74 RVA: 0x00002EF9 File Offset: 0x000010F9
		private void InstantMiningToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34502088U, 3223519232U, 3223519296U, this.InstantMining.Checked);
		}

		// Token: 0x0600004B RID: 75 RVA: 0x00002F1F File Offset: 0x0000111F
		private void FlightToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41003636U, MainForm.On, 2145647480U, this.Flight.Checked);
		}

		// Token: 0x0600004C RID: 76 RVA: 0x00002F45 File Offset: 0x00001145
		private void DisableSuffocatingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41027276U, MainForm.Off, 1474496062U, this.DisableSuffocating.Checked);
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00002F6B File Offset: 0x0000116B
		private void NoFallDamageToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41039168U, MainForm.Blr, 2485256112U, this.NoFallDamage.Checked);
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00002F94 File Offset: 0x00001194
		private void CraftAnythingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49744240U, MainForm.On, MainForm.Off, this.CraftAnything.Checked);
			MainForm.GeckoU.WriteUIntToggle(52593612U, 947912704U, 947912705U, this.CraftAnything.Checked);
		}

		// Token: 0x0600004F RID: 79 RVA: 0x00002FE9 File Offset: 0x000011E9
		private void CreativeModeToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(38104908U, MainForm.On, 1409484350U, this.CreativeMode.Checked);
		}

		// Token: 0x06000050 RID: 80 RVA: 0x0000300F File Offset: 0x0000120F
		private void NoFogToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(51267924U, 947912704U, 947912705U, this.NoFog.Checked);
		}

		// Token: 0x06000051 RID: 81 RVA: 0x00003035 File Offset: 0x00001235
		private void StaticLiquidBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36412300U, MainForm.Blr, 2485255936U, this.StaticLiquidBlocks.Checked);
		}

		// Token: 0x06000052 RID: 82 RVA: 0x0000305B File Offset: 0x0000125B
		private void FoggyWeatherToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(52168356U, MainForm.On, MainForm.Off, this.FoggyWeather.Checked);
		}

		// Token: 0x06000053 RID: 83 RVA: 0x00003081 File Offset: 0x00001281
		private void AcidLiquidBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36409028U, MainForm.On, 1474496062U, this.AcidLiquidBlocks.Checked);
		}

		// Token: 0x06000054 RID: 84 RVA: 0x000030A7 File Offset: 0x000012A7
		private void DisableCreativeFlagToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39594892U, MainForm.On, 2288189609U, this.DisableCreativeFlag.Checked);
		}

		// Token: 0x06000055 RID: 85 RVA: 0x000030CD File Offset: 0x000012CD
		private void UncapEntitySpawnLimitToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39243260U, MainForm.On, 1409484350U, this.UncapEntitySpawnLimit.Checked);
		}

		// Token: 0x06000056 RID: 86 RVA: 0x000030F4 File Offset: 0x000012F4
		private void AllDlcUnlockedToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(44993328U, MainForm.On, 2145647480U, this.AllDLCUnlocked.Checked);
			MainForm.GeckoU.WriteUIntToggle(45021224U, MainForm.On, 2145647480U, this.AllDLCUnlocked.Checked);
		}

		// Token: 0x06000057 RID: 87 RVA: 0x00003149 File Offset: 0x00001349
		private void HostOptionsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49380144U, 947944704U, 948110324U, this.HostOptions.Checked);
		}

		// Token: 0x06000058 RID: 88 RVA: 0x0000316F File Offset: 0x0000136F
		private void DisablePermanentKicksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(54580264U, MainForm.Blr, this.Mflr, this.DisablePermanentKicks.Checked);
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00003196 File Offset: 0x00001396
		private void EnchantmentLevelSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUInt(36653312U, MainForm.GeckoU.Mix(945815552U, this.EnchantmentLevelSlider.Value));
		}

		// Token: 0x0600005A RID: 90 RVA: 0x000031C1 File Offset: 0x000013C1
		private void JumpHeightSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(275163860U, (float)this.JumpHeightSlider.Value);
		}

		// Token: 0x0600005B RID: 91 RVA: 0x000031E3 File Offset: 0x000013E3
		private void ReachSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(277829152U, Convert.ToSingle(this.ReachSlider.Value));
			MainForm.GeckoU.WriteFloat(277744604U, Convert.ToSingle(this.ReachSlider.Value));
		}

		// Token: 0x0600005C RID: 92 RVA: 0x00003223 File Offset: 0x00001423
		private void HitboxSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(274585928U, Convert.ToSingle(this.HitBoxScaleSlider.Value));
		}

		// Token: 0x0600005D RID: 93 RVA: 0x00003244 File Offset: 0x00001444
		private void RiptideFlyingSpeedSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(276415456U, (float)this.RiptideFlyingSpeedSlider.Value);
		}

		// Token: 0x0600005E RID: 94 RVA: 0x00003266 File Offset: 0x00001466
		private void SprintingSpeedScaleSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(275326248U, (float)this.SprintingSpeedScaleSlider.Value);
		}

		// Token: 0x0600005F RID: 95 RVA: 0x00003288 File Offset: 0x00001488
		private void VisibleHitboxesToggled(object sender, EventArgs e)
		{
			uint num = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(279390868U) + 192U);
			MainForm.GeckoU.WriteUIntToggle(num + 144U, 126976U, 1048576U, this.VisibleHitboxes.Checked);
		}

		// Token: 0x06000060 RID: 96 RVA: 0x000032DC File Offset: 0x000014DC
		private void ExitGameClicked(object sender, EventArgs e)
		{
			if (Messaging.Show("You're about to close the game, continue?", MessageBoxButtons.YesNo) == DialogResult.Yes)
			{
				MainForm.GeckoU.CallFunction64(49610792U, new uint[1]);
				MainForm.GeckoU.Tcp.Close();
				States.SwapState(States.StatesIds.Disconnected);
				this.IsConnected = false;
			}
		}

		// Token: 0x06000061 RID: 97 RVA: 0x00003329 File Offset: 0x00001529
		private void BypassFriendsOnlyToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(47543068U, 4062246869500166176UL, 8937396374989832176UL, this.BypassFriendsOnly.Checked);
		}

		// Token: 0x06000062 RID: 98 RVA: 0x00003357 File Offset: 0x00001557
		private void WalkingSpeedScaleChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(275164360U, (float)this.WalkingSpeedScaleSlider.Value);
		}

		// Token: 0x06000063 RID: 99 RVA: 0x00003379 File Offset: 0x00001579
		private void CraftingTableAnywhereToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49648948U, 1207960296U, this.Mflr, this.CraftingTableAnywhere.Checked);
		}

		// Token: 0x06000064 RID: 100 RVA: 0x000033A0 File Offset: 0x000015A0
		private void HiddenGameModesUnlockedToggled(object sender, EventArgs e)
		{
			uint address = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278678764U) + 76U);
			MainForm.GeckoU.WriteUIntToggle(address, 5U, 2U, this.HiddenGameModesUnlocked.Checked);
		}

		// Token: 0x06000065 RID: 101 RVA: 0x000033E2 File Offset: 0x000015E2
		private void FieldOfViewSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(277418424U, (float)this.FieldOfViewSlider.Value);
		}

		// Token: 0x06000066 RID: 102 RVA: 0x00003404 File Offset: 0x00001604
		private void TakeEverythingAnywhereToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(48152756U, MainForm.On, 1474496062U, this.TakeEverythingAnywhere.Checked);
		}

		// Token: 0x06000067 RID: 103 RVA: 0x0000342A File Offset: 0x0000162A
		private void ArmorHudToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(48869808U, 2145713016U, 2143613816U, this.ArmorHUD.Checked);
		}

		// Token: 0x06000068 RID: 104 RVA: 0x00003450 File Offset: 0x00001650
		private void SlowMotionToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(278164424U, 1064304640U, 1072693248U, this.SlowMotion.Checked);
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00003476 File Offset: 0x00001676
		private void DeadMauFiveModeToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49665340U, MainForm.On, MainForm.Off, this.DeadMauFiveMode.Checked);
		}

		// Token: 0x0600006A RID: 106 RVA: 0x0000349C File Offset: 0x0000169C
		private void PlayerModelScaleSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(277985548U, Convert.ToSingle(this.playerModelScaleSlider.Value));
		}

		// Token: 0x0600006B RID: 107 RVA: 0x000034BD File Offset: 0x000016BD
		private void GamepadSplitscreenToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49737724U, MainForm.Off, 2288191274U, this.GamepadSplitscreen.Checked);
		}

		// Token: 0x0600006C RID: 108 RVA: 0x000034E3 File Offset: 0x000016E3
		private void DisableTeleportingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(53884540U, MainForm.Blr, 2485255888U, this.DisableTeleporting.Checked);
		}

		// Token: 0x0600006D RID: 109 RVA: 0x00003509 File Offset: 0x00001709
		private void GodModeToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41056292U, this.Nop, 4230019216U, this.GodMode.Checked);
		}

		// Token: 0x0600006E RID: 110 RVA: 0x00003530 File Offset: 0x00001730
		private void GodModeAllToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39294400U, this.Nop, 4230019216U, this.GodMode.Checked);
		}

		// Token: 0x0600006F RID: 111 RVA: 0x00003557 File Offset: 0x00001757
		private void FieldOfViewSplitSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(277641328U, (float)this.FieldOfViewSplitSlider.Value);
		}

		// Token: 0x06000070 RID: 112 RVA: 0x0000357C File Offset: 0x0000177C
		private void FrictionSliderChanged(object sender, EventArgs e)
		{
			if ((!this._tooHighWarn && this.FrictionSlider.Value > 2m) || (!this._tooHighWarn && this.FrictionSlider.Value < -2m))
			{
				Messaging.Show(MessageBoxIcon.Exclamation, "Setting the friction too high (aswell as too negative) can crash your game, be warned.");
				this._tooHighWarn = true;
			}
			MainForm.GeckoU.WriteFloat(275163880U, (float)this.FrictionSlider.Value);
		}

		// Token: 0x06000071 RID: 113 RVA: 0x00003600 File Offset: 0x00001800
		private void UnderwaterEffectsToggled(object sender, EventArgs e)
		{
			switch (this.UnderwaterEffects.CheckState)
			{
			case CheckState.Unchecked:
				MainForm.GeckoU.WriteUInt(39044044U, 2288189457U);
				this.UnderwaterEffects.Text = "Underwater Effects (Default)";
				return;
			case CheckState.Checked:
				MainForm.GeckoU.WriteUInt(39044044U, MainForm.On);
				this.UnderwaterEffects.Text = "Underwater Effects (On)";
				return;
			case CheckState.Indeterminate:
				MainForm.GeckoU.WriteUInt(39044044U, MainForm.Off);
				this.UnderwaterEffects.Text = "Underwater Effects (Off)";
				return;
			default:
				return;
			}
		}

		// Token: 0x06000072 RID: 114 RVA: 0x0000369A File Offset: 0x0000189A
		private void HideBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(33849696U, MainForm.On, MainForm.Off, this.HideBlocks.Checked);
		}

		// Token: 0x06000073 RID: 115 RVA: 0x000036C0 File Offset: 0x000018C0
		private void AlwaysInLavaToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39188504U, 939524097U, 939524096U, this.AlwaysInLava.Checked);
		}

		// Token: 0x06000074 RID: 116 RVA: 0x000036E6 File Offset: 0x000018E6
		private void SeeThroughBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34501916U, 1004535808U, 1004535809U, this.SeeThroughBlocks.Checked);
		}

		// Token: 0x06000075 RID: 117 RVA: 0x0000370C File Offset: 0x0000190C
		private void LevelXToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(45381940U, 740098049U, 740098048U, this.LevelX.Checked);
		}

		// Token: 0x06000076 RID: 118 RVA: 0x00003732 File Offset: 0x00001932
		private void AlwaysInWaterToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39184412U, 939524097U, 939524096U, this.AlwaysInWater.Checked);
		}

		// Token: 0x06000077 RID: 119 RVA: 0x00003758 File Offset: 0x00001958
		private void EspToggled(object sender, EventArgs e)
		{
			if (!this.Wallhack.Checked)
			{
				MainForm.GeckoU.WriteUIntToggle(52112204U, 939524097U, 1824555008U, this.ESP.Checked);
			}
			MainForm.GeckoU.WriteUIntToggle(51290488U, 4236306576U, 4234209424U, this.ESP.Checked);
			MainForm.GeckoU.WriteUIntToggle(51290344U, 4236310672U, 4234213520U, this.ESP.Checked);
			MainForm.GeckoU.WriteUIntToggle(51290340U, 4236310672U, 4232116368U, this.ESP.Checked);
			MainForm.GeckoU.WriteUIntToggle(51290568U, 1824522240U, 1824555008U, this.ESP.Checked);
		}

		// Token: 0x06000078 RID: 120 RVA: 0x00003828 File Offset: 0x00001A28
		private void NoSlowDownsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(277745248U, 1065353216U, 1045220557U, this.NoSlowDowns.Checked);
			MainForm.GeckoU.WriteUIntToggle(43106772U, MainForm.Blr, this.Mflr, this.NoSlowDowns.Checked);
		}

		// Token: 0x06000079 RID: 121 RVA: 0x00003880 File Offset: 0x00001A80
		private void UiColorPickerBtnClicked(object sender, EventArgs e)
		{
			ColorDialog colorDialog = new ColorDialog
			{
				AllowFullOpen = true,
				AnyColor = true
			};
			if (colorDialog.ShowDialog() == DialogResult.OK)
			{
				MainForm.GeckoU.WriteFloat(278695528U, (float)colorDialog.Color.R / 255f);
				MainForm.GeckoU.WriteFloat(278695532U, (float)colorDialog.Color.G / 255f);
				MainForm.GeckoU.WriteFloat(278695536U, (float)colorDialog.Color.B / 255f);
				MainForm.GeckoU.WriteFloat(278695540U, (float)colorDialog.Color.A / 255f);
			}
		}

		// Token: 0x0600007A RID: 122 RVA: 0x0000393D File Offset: 0x00001B3D
		private void SuperchargedCreepersToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36133172U, MainForm.On, 2288582668U, this.SuperchargedCreepers.Checked);
		}

		// Token: 0x0600007B RID: 123 RVA: 0x00003963 File Offset: 0x00001B63
		private void IgnitedCreepersToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36122672U, MainForm.On, 2288582668U, this.IgnitedCreepers.Checked);
		}

		// Token: 0x0600007C RID: 124 RVA: 0x00003989 File Offset: 0x00001B89
		private void ZombieTowerToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(44283772U, MainForm.On, 2288191296U, this.ZombieTower.Checked);
		}

		// Token: 0x0600007D RID: 125 RVA: 0x000039AF File Offset: 0x00001BAF
		private void SunProofMobsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(44292104U, MainForm.Off, MainForm.On, this.SunProofMobs.Checked);
		}

		// Token: 0x0600007E RID: 126 RVA: 0x000039D8 File Offset: 0x00001BD8
		private void PotionAmplifierSliderChanged(object sender, EventArgs e)
		{
			if (this.PotionAmplifierSlider.Value == 0m)
			{
				MainForm.GeckoU.WriteUInt(40447472U, 2153971720U);
				return;
			}
			MainForm.GeckoU.WriteUInt(40447472U, MainForm.GeckoU.Mix(945815552U, this.PotionAmplifierSlider.Value));
		}

		// Token: 0x0600007F RID: 127 RVA: 0x00003A3C File Offset: 0x00001C3C
		private void XpLevelSliderChanged(object sender, EventArgs e)
		{
			uint num = (uint)this.XPLevelSlider.Value;
			this._localPlayer = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278963784U) + 44U);
			MainForm.GeckoU.CallFunction(52338988U, new uint[]
			{
				this._localPlayer,
				num,
				num,
				num
			});
		}

		// Token: 0x06000080 RID: 128 RVA: 0x00003AA7 File Offset: 0x00001CA7
		private void DisableVPadInputToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(17994704U, MainForm.Blr, 954204161U, this.disableVPadInput.Checked);
		}

		// Token: 0x06000081 RID: 129 RVA: 0x00003ACD File Offset: 0x00001CCD
		private void VpadDisplaySwitchToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.RpcToggle(18000356U, 18000364U, 0U, 0U, this.vpadDisplaySwitch.Checked);
		}

		// Token: 0x06000082 RID: 130 RVA: 0x00003AF0 File Offset: 0x00001CF0
		private void DebugConsoleToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.CallFunction(47888908U, new uint[]
			{
				278894048U,
				Convert.ToUInt32(this.DebugConsole.Checked)
			});
		}

		// Token: 0x06000083 RID: 131 RVA: 0x00003B24 File Offset: 0x00001D24
		private void UnlockSignKeyboardToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49840400U, 960495618U, 960495619U, this.UnlockSignKeyboard.Checked);
			MainForm.GeckoU.WriteUIntToggle(50001136U, 960495618U, 960495619U, this.UnlockSignKeyboard.Checked);
			MainForm.GeckoU.WriteUIntToggle(50001248U, 960495618U, 960495619U, this.UnlockSignKeyboard.Checked);
			MainForm.GeckoU.WriteUIntToggle(50001372U, 960495618U, 960495619U, this.UnlockSignKeyboard.Checked);
			MainForm.GeckoU.WriteUIntToggle(50001484U, 960495618U, 960495619U, this.UnlockSignKeyboard.Checked);
		}

		// Token: 0x06000084 RID: 132 RVA: 0x00003BE5 File Offset: 0x00001DE5
		private void InvisibleToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(52309824U, MainForm.On, 1472398910U, this.Invisible.Checked);
		}

		// Token: 0x06000085 RID: 133 RVA: 0x00003C0C File Offset: 0x00001E0C
		private void LeashAnyMobsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34048356U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(34048356U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(36515836U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(37005240U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(37544120U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(40178836U, MainForm.On, 2143548280U, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(43850676U, MainForm.On, 2143548280U, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(44408308U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(44547044U, MainForm.On, MainForm.Off, this.LeashAnyMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(44598496U, MainForm.On, 1474496062U, this.LeashAnyMobs.Checked);
		}

		// Token: 0x06000086 RID: 134 RVA: 0x00003D81 File Offset: 0x00001F81
		private void WaterLogAnythingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(34502180U, MainForm.On, 1415775806U, this.WaterLogAnything.Checked);
		}

		// Token: 0x06000087 RID: 135 RVA: 0x00003DA7 File Offset: 0x00001FA7
		private void UnlimitedEnchantsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(38363180U, MainForm.On, MainForm.Off, this.UnlimitedEnchants.Checked);
		}

		// Token: 0x06000088 RID: 136 RVA: 0x00003DCD File Offset: 0x00001FCD
		private void SuperFurnaceToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(37709476U, MainForm.On, 945815752U, this.SuperFurnace.Checked);
		}

		// Token: 0x06000089 RID: 137 RVA: 0x00003DF4 File Offset: 0x00001FF4
		private void MaxStackSliderChanged(object sender, EventArgs e)
		{
			uint[] addresses = new uint[]
			{
				34075920U,
				33591344U,
				34085780U,
				34338576U,
				35191480U,
				35191216U,
				35189100U,
				35332164U,
				35338776U,
				35860756U,
				36262784U,
				36232068U,
				37636216U,
				37710608U,
				38101084U,
				38248888U,
				38990464U,
				38408204U,
				38600644U,
				40021924U,
				39947508U,
				42247828U,
				42436688U,
				42849828U
			};
			MainForm.GeckoU.WriteUInt(addresses, MainForm.GeckoU.Mix(945815552U, this.MaxStackSlider.Value));
		}

		// Token: 0x0600008A RID: 138 RVA: 0x00003E39 File Offset: 0x00002039
		private void LeftHandedToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41059836U, this.Nop, 1082261536U, this.LeftHanded.Checked);
		}

		// Token: 0x0600008B RID: 139 RVA: 0x00003E60 File Offset: 0x00002060
		private void AirJumpToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36893600U, 947912705U, 947912704U, this.AirJump.Checked);
		}

		// Token: 0x0600008C RID: 140 RVA: 0x00003E86 File Offset: 0x00002086
		private void EntitySpeedSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278714596U) + 32U), (float)this.EntitySpeedSlider.Value);
		}

		// Token: 0x0600008D RID: 141 RVA: 0x00003EBF File Offset: 0x000020BF
		private void SleepingDoesntClearWeatherToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(53143460U, 6917529029251694592UL, 4431545517516580360UL, this.SleepingDoesntClearWeather.Checked);
		}

		// Token: 0x0600008E RID: 142 RVA: 0x00003EF0 File Offset: 0x000020F0
		private void InvulnerableEntitiesToggled(object sender, EventArgs e)
		{
			if (!this._invulEnWarn)
			{
				int num = (int)Messaging.Show("Enabling this option can cause significant frame drops and potentially crash your game.\nAre you sure you want to enable?", MessageBoxButtons.YesNo);
				this._invulEnWarn = true;
				if (num == 7)
				{
					this.InvulnerableEntities.Checked = false;
					return;
				}
			}
			MainForm.GeckoU.WriteUIntToggle(36877632U, 962592768U, 962592769U, this.InvulnerableEntities.Checked);
		}

		// Token: 0x0600008F RID: 143 RVA: 0x00003F4B File Offset: 0x0000214B
		private void BreakAnythingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(51999552U, MainForm.On, 1409484350U, this.BreakAnything.Checked);
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00003F74 File Offset: 0x00002174
		private void LiquidSpreadTimeSliderChanged(object sender, EventArgs e)
		{
			uint[] addresses = new uint[]
			{
				39496532U,
				39496604U,
				39496616U
			};
			MainForm.GeckoU.WriteUInt(addresses, MainForm.GeckoU.Mix(945815552U, this.LiquidSpreadTimeSlider.Value));
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00003FB8 File Offset: 0x000021B8
		private void DisableFallingBlocksToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteULongToggle(37078564U, 6917529028958093344UL, 4431544465249582552UL, this.DisableFallingBlocks.Checked);
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00003FE8 File Offset: 0x000021E8
		private void BreatheBoxChanged(object sender, EventArgs e)
		{
			switch (this.breatheBox.SelectedIndex)
			{
			case 0:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.Off);
				return;
			case 1:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.Off);
				return;
			case 2:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.Off);
				return;
			case 3:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.On);
				return;
			case 4:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.On);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.On);
				return;
			case 5:
				MainForm.GeckoU.WriteUInt(39255460U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255468U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255476U, MainForm.Off);
				MainForm.GeckoU.WriteUInt(39255452U, MainForm.Off);
				return;
			default:
				return;
			}
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00004205 File Offset: 0x00002405
		private void MuteMicrophoneToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(278494888U, 805306368U, 1056964608U, this.MuteMicrophone.Checked);
		}

		// Token: 0x06000094 RID: 148 RVA: 0x0000422B File Offset: 0x0000242B
		private void CollisionToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39369292U, 1002438656U, 1002438657U, this.Collision.Checked);
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00004251 File Offset: 0x00002451
		private void WaterDownStrengthSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(275163872U, (float)this.WaterDownStrengthSlider.Value);
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00004274 File Offset: 0x00002474
		private void RainModeToggled(object sender, EventArgs e)
		{
			switch (this.RainMode.CheckState)
			{
			case CheckState.Unchecked:
				MainForm.GeckoU.WriteUInt(39594692U, 2288189548U);
				this.RainMode.Text = "Rain Mode (Default)";
				return;
			case CheckState.Checked:
				MainForm.GeckoU.WriteUInt(39594692U, MainForm.On);
				this.RainMode.Text = "Rain Mode (Always)";
				return;
			case CheckState.Indeterminate:
				MainForm.GeckoU.WriteUInt(39594692U, MainForm.Off);
				this.RainMode.Text = "Rain Mode (Never)";
				return;
			default:
				return;
			}
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00004310 File Offset: 0x00002510
		private void ThunderModeToggled(object sender, EventArgs e)
		{
			switch (this.ThunderMode.CheckState)
			{
			case CheckState.Unchecked:
				MainForm.GeckoU.WriteUInt(39594660U, 2288189556U);
				this.RainMode.CheckState = CheckState.Unchecked;
				this.ThunderMode.Text = "Thunder Mode (Default)";
				return;
			case CheckState.Checked:
				MainForm.GeckoU.WriteUInt(39594660U, MainForm.On);
				this.RainMode.CheckState = CheckState.Checked;
				this.ThunderMode.Text = "Thunder Mode (Always)";
				return;
			case CheckState.Indeterminate:
				MainForm.GeckoU.WriteUInt(39594660U, MainForm.Off);
				this.RainMode.CheckState = CheckState.Indeterminate;
				this.ThunderMode.Text = "Thunder Mode (Never)";
				return;
			default:
				return;
			}
		}

		// Token: 0x06000098 RID: 152 RVA: 0x000043CE File Offset: 0x000025CE
		private void AchievementsEverywhereToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(49701492U, 998244353U, 998244352U, this.AchievementsEverywhere.Checked);
		}

		// Token: 0x06000099 RID: 153 RVA: 0x000043F4 File Offset: 0x000025F4
		private void NoDamageToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41003664U, MainForm.Blr, 2485256080U, this.NoDamage.Checked);
		}

		// Token: 0x0600009A RID: 154 RVA: 0x0000441C File Offset: 0x0000261C
		private void FreezeGameWhenPausedToggled(object sender, EventArgs e)
		{
			switch (this.FreezeGameWhenPaused.CheckState)
			{
			case CheckState.Unchecked:
				MainForm.GeckoU.WriteUInt(49511832U, 1451492926U);
				this.FreezeGameWhenPaused.Text = "Freeze game when paused (Default)";
				return;
			case CheckState.Checked:
				MainForm.GeckoU.WriteUInt(49511832U, 947912705U);
				this.FreezeGameWhenPaused.Text = "Freeze game when paused (Always Frozen)";
				return;
			case CheckState.Indeterminate:
				MainForm.GeckoU.WriteUInt(49511832U, 947912704U);
				this.FreezeGameWhenPaused.Text = "Freeze game when paused (Never)";
				return;
			default:
				return;
			}
		}

		// Token: 0x0600009B RID: 155 RVA: 0x000044B6 File Offset: 0x000026B6
		private void SplashLingeringPotionsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(43587236U, MainForm.On, MainForm.Off, this.SplashLingeringPotions.Checked);
		}

		// Token: 0x0600009C RID: 156 RVA: 0x000044DC File Offset: 0x000026DC
		private void ItemOfUndyingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39303556U, MainForm.On, 2080593984U, this.ItemOfUndying.Checked);
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00004502 File Offset: 0x00002702
		private void UnlimitedTotemsOfUndyingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39304032U, 947912704U, 947912705U, this.UnlimitedTotemsOfUndying.Checked);
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00004528 File Offset: 0x00002728
		private void PunchToRideToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41013636U, 1219254072U, 2485255568U, this.PunchToRide.Checked);
		}

		// Token: 0x0600009F RID: 159 RVA: 0x0000454E File Offset: 0x0000274E
		private void CursedToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(277742108U, 1073741824U, 1065353216U, this.Cursed.Checked);
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00004574 File Offset: 0x00002774
		private void PreventBeingKickedToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(50669344U, MainForm.Blr, 2485256152U, this.PreventBeingKicked.Checked);
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x0000459C File Offset: 0x0000279C
		private void AirborneSpeedSliderChanged(object sender, EventArgs e)
		{
			int value = Miscellaneous.FloatToInt32Bits((float)this.AirborneSpeedSlider.Value);
			uint value2 = MainForm.GeckoU.PeekUInt(275144436U);
			MainForm.GeckoU.WriteUInt(285278208U, value2);
			MainForm.GeckoU.WriteUInt(39330460U, 1023414529U);
			MainForm.GeckoU.WriteUInt(39330468U, 3286761472U);
			MainForm.GeckoU.WriteUInt(285278208U, (uint)value);
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00004618 File Offset: 0x00002818
		private void AlwaysDaylightToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(39146264U, 4230023204U, 1317012513U, this.AlwaysDaylight.Checked);
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x0000463E File Offset: 0x0000283E
		private void DefPotionBoxChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUInt(35819364U, MainForm.GeckoU.Mix(945815552U, this.defPotionBox.SelectedIndex));
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00004670 File Offset: 0x00002870
		private void NoCooldownsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(38424428U, 1029705985U, 1029705828U, this.NoCooldowns.Checked);
			MainForm.GeckoU.WriteUIntToggle(38424440U, 3228237828U, 3228271048U, this.NoCooldowns.Checked);
			MainForm.GeckoU.WriteUInt(285278212U, 0U);
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x000046D5 File Offset: 0x000028D5
		private void InstantSleepToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41033016U, 945815553U, 1409484350U, this.InstantSleep.Checked);
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x000046FB File Offset: 0x000028FB
		private void FogDistanceSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.CallFunction(39236440U, new uint[]
			{
				MinecraftFunctions.GetLevel(),
				(uint)this.FogDistanceSlider.Value
			});
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x0000472E File Offset: 0x0000292E
		private void CursedSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteFloat(277485924U, (float)this.CursedSlider.Value);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00004750 File Offset: 0x00002950
		private bool IsTool()
		{
			int num;
			int.TryParse(this.giveIDBox.Text, out num);
			bool result;
			if (num == 261 || num == 346 || num == 359 || num == 398 || num == 443 || num == 454 || num == 456)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num > 255 && num < 260)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num > 266 && num < 280)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num > 282 && num < 287)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num > 289 && num < 295)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num > 297 && num < 318)
			{
				this.giveDataBox.WaterMark = "Damage Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num == 358)
			{
				this.giveDataBox.WaterMark = "Data Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else if (num == 373 || num == 438 || num == 441)
			{
				this.giveDataBox.WaterMark = "Data Value...";
				this.giveDataBox.MaxLength = 5;
				result = true;
			}
			else
			{
				this.giveDataBox.WaterMark = "Data Value...";
				this.giveDataBox.MaxLength = 2;
				result = false;
			}
			return result;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x00004946 File Offset: 0x00002B46
		private void CheckItemID(object sender, EventArgs e)
		{
			(sender as MetroTextBox).Tag = this.IsTool();
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00004960 File Offset: 0x00002B60
		private void GiveCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			if (string.IsNullOrWhiteSpace(this.giveIDBox.Text) || string.IsNullOrWhiteSpace(this.giveAmountBox.Text) || string.IsNullOrWhiteSpace(this.giveDataBox.Text))
			{
				Messaging.Show("Make sure all fields are filled out before executing a command");
				return;
			}
			if (Convert.ToBoolean(this.giveIDBox.Tag))
			{
				if (Convert.ToInt32(this.giveDataBox.Text) < -32768 || Convert.ToInt32(this.giveDataBox.Text) > 32767)
				{
					Messaging.Show("Damage value must be in between -32768 and 32767.");
					return;
				}
			}
			else if (Convert.ToInt32(this.giveDataBox.Text) < 0 || Convert.ToInt32(this.giveDataBox.Text) > 15)
			{
				Messaging.Show("Data value must be in between 0 and 15.");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(38145620U, new uint[]
			{
				301989888U,
				this.GetSelfPlayerPointer(),
				uint.Parse(this.giveIDBox.Text),
				uint.Parse(this.giveAmountBox.Text),
				(uint)int.Parse(this.giveDataBox.Text),
				this.GetSelfPlayerPointer() + 1856U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00004AFC File Offset: 0x00002CFC
		private void EnchantCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			if (this.enchantIDBox.SelectedIndex == -1 || string.IsNullOrWhiteSpace(this.enchantLevelBox.Text))
			{
				Messaging.Show("Make sure all fields are filled out before executing a command");
				return;
			}
			if (Convert.ToInt32(this.enchantLevelBox.Text) < -32768 || Convert.ToInt32(this.enchantLevelBox.Text) > 32767)
			{
				Messaging.Show("Enchantment level must be in between -32768 and 32767.");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(36640024U, new uint[]
			{
				301989888U,
				this.GetSelfPlayerPointer(),
				MainForm.Enchantments[this.enchantIDBox.SelectedIndex],
				(uint)int.Parse(this.enchantLevelBox.Text)
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00004C20 File Offset: 0x00002E20
		private void TimeCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			if (string.IsNullOrWhiteSpace(this.timeAmountBox.Text))
			{
				Messaging.Show("Make sure all fields are filled out before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(36640024U, new uint[]
			{
				301989888U,
				(uint)int.Parse(this.timeAmountBox.Text)
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00004CE0 File Offset: 0x00002EE0
		private void KillCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(38931288U, new uint[]
			{
				301989888U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00004D70 File Offset: 0x00002F70
		private void DownfallCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(44040356U, new uint[]
			{
				301989888U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00004E00 File Offset: 0x00003000
		private void SetWorldSpawnBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(42684760U, new uint[]
			{
				301989888U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00004E90 File Offset: 0x00003090
		private void SurvivalCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			GeckoUCore geckoU = MainForm.GeckoU;
			uint address = 36504260U;
			uint[] array = new uint[2];
			array[0] = 301989888U;
			geckoU.CallFunction64(address, array);
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00004F20 File Offset: 0x00003120
		private void CreativeCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(36504260U, new uint[]
			{
				301989888U,
				1U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x00004FB4 File Offset: 0x000031B4
		private void AdventureCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(36504260U, new uint[]
			{
				301989888U,
				2U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00005048 File Offset: 0x00003248
		private void SpectatorCommandBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			MainForm.GeckoU.WriteBytes(301989888U, new byte[4096]);
			MainForm.GeckoU.CallFunction64(36504260U, new uint[]
			{
				301989888U,
				3U
			});
			MainForm.GeckoU.CallFunction64(50636248U, new uint[]
			{
				MainForm.GeckoU.PeekUInt(this.GetSelfPlayerPointer() + 2168U),
				301989888U
			});
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x000050DC File Offset: 0x000032DC
		private void GiveXpOrbsBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			if (string.IsNullOrWhiteSpace(this.xpAmountBox.Text))
			{
				Messaging.Show("Make sure all fields are filled out before executing a command");
				return;
			}
			try
			{
				uint num = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278714596U) + 52U);
				int num2 = Convert.ToInt32(this.xpAmountBox.Text);
				MainForm.GeckoU.CallFunction(41046236U, new uint[]
				{
					num,
					(uint)num2
				});
			}
			catch (OverflowException)
			{
				Messaging.Show(MessageBoxIcon.Hand, "Please input a value that is between -2147483648 and 2147483647.");
			}
			catch (Exception)
			{
				Messaging.Show(MessageBoxIcon.Hand, "An unknown error has occurred.");
			}
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x000051A4 File Offset: 0x000033A4
		private void GiveXpLevelsBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			if (string.IsNullOrWhiteSpace(this.xpAmountBox.Text))
			{
				Messaging.Show("Make sure all fields are filled out before executing a command");
				return;
			}
			try
			{
				uint num = MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278714596U) + 52U);
				int num2 = Convert.ToInt32(this.xpAmountBox.Text);
				MainForm.GeckoU.CallFunction(41046832U, new uint[]
				{
					num,
					(uint)num2
				});
			}
			catch (OverflowException)
			{
				Messaging.Show(MessageBoxIcon.Hand, "Please input a value that is between -2147483648 and 2147483647.");
			}
			catch (Exception)
			{
				Messaging.Show(MessageBoxIcon.Hand, "An unknown error has occurred.");
			}
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x0000526C File Offset: 0x0000346C
		private void TellrawCmdBtnClicked(object sender, EventArgs e)
		{
			if (!MainForm.IsPointerLoaded())
			{
				Messaging.Show("Commands only work in-game, please load a world before executing a command");
				return;
			}
			uint address = 276433276U;
			string value = string.Empty;
			if (string.IsNullOrWhiteSpace(this.tellNameBox.Text))
			{
				value = (this.tellMsgBox.Text ?? "");
			}
			else if (this.bedrockTellBox.Checked)
			{
				value = "<" + this.tellNameBox.Text + "> " + this.tellMsgBox.Text;
			}
			else if (this.javaTellBox.Checked)
			{
				value = "[" + this.tellNameBox.Text + "] " + this.tellMsgBox.Text;
			}
			else if (this.customTellBox.Checked)
			{
				value = this.tellNameBox.Text + " " + this.tellMsgBox.Text;
			}
			MainForm.GeckoU.WriteBytes(address, new byte[256]);
			MainForm.GeckoU.WriteString(276433276U, value, Encoding.BigEndianUnicode, true);
			this.tellMsgBox.Clear();
			this.DownfallCommandBtnClicked(null, null);
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00005399 File Offset: 0x00003599
		private void DetectEnterPress(object sender, KeyEventArgs e)
		{
			if (e.KeyCode == Keys.Return)
			{
				this.TellrawCmdBtnClicked(null, null);
			}
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x000053B0 File Offset: 0x000035B0
		private void CommandsInMinigamesToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(36636532U, 945815552U, 945815554U, this.CommandsInMinigames.Checked);
			MainForm.GeckoU.WriteUIntToggle(38141084U, 945815552U, 945815554U, this.CommandsInMinigames.Checked);
			MainForm.GeckoU.WriteUIntToggle(38930788U, 945815552U, 945815554U, this.CommandsInMinigames.Checked);
			MainForm.GeckoU.WriteUIntToggle(44011488U, 945815552U, 945815554U, this.CommandsInMinigames.Checked);
			MainForm.GeckoU.WriteUIntToggle(44039776U, 945815552U, 945815554U, this.CommandsInMinigames.Checked);
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00005474 File Offset: 0x00003674
		private void AllPermissionsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46497428U, MainForm.On, 1474496062U, this.AllPermissions.Checked);
			MainForm.GeckoU.WriteUIntToggle(46497332U, MainForm.On, 1474496062U, this.AllPermissions.Checked);
			MainForm.GeckoU.WriteUIntToggle(46472224U, MainForm.On, 1474496062U, this.AllPermissions.Checked);
			MainForm.GeckoU.WriteUIntToggle(46517380U, MainForm.On, 2288189732U, this.AllPermissions.Checked);
			MainForm.GeckoU.WriteUIntToggle(46497140U, MainForm.On, 1474496062U, this.AllPermissions.Checked);
			MainForm.GeckoU.WriteUIntToggle(46497236U, MainForm.On, 1474496062U, this.AllPermissions.Checked);
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00005559 File Offset: 0x00003759
		private void AlwaysDamagedToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46652880U, MainForm.On, MainForm.Off, this.AlwaysDamaged.Checked);
		}

		// Token: 0x060000BB RID: 187 RVA: 0x0000557F File Offset: 0x0000377F
		private void TntGriefingToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46505476U, MainForm.On, MainForm.Off, this.TNTGriefing.Checked);
		}

		// Token: 0x060000BC RID: 188 RVA: 0x000055A5 File Offset: 0x000037A5
		private void DisabledKillBarriersToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46652728U, MainForm.Off, MainForm.On, this.DisabledKillBarriers.Checked);
		}

		// Token: 0x060000BD RID: 189 RVA: 0x000055CB File Offset: 0x000037CB
		private void AntiEndGameToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46749004U, MainForm.Off, MainForm.On, this.AntiEndGame.Checked);
		}

		// Token: 0x060000BE RID: 190 RVA: 0x000055F4 File Offset: 0x000037F4
		private void EndGameClicked(object sender, EventArgs e)
		{
			MainForm.<EndGameClicked>d__203 <EndGameClicked>d__;
			<EndGameClicked>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
			<EndGameClicked>d__.<>4__this = this;
			<EndGameClicked>d__.<>1__state = -1;
			<EndGameClicked>d__.<>t__builder.Start<MainForm.<EndGameClicked>d__203>(ref <EndGameClicked>d__);
		}

		// Token: 0x060000BF RID: 191 RVA: 0x0000562C File Offset: 0x0000382C
		private void AllowMobsToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(52581116U, 947912705U, 2086935416U, this.AllowMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(52580872U, 947912705U, 2086935416U, this.AllowMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(52581168U, 947912705U, 2086935416U, this.AllowMobs.Checked);
			MainForm.GeckoU.WriteUIntToggle(52580924U, 947912705U, 2086935416U, this.AllowMobs.Checked);
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x000056C9 File Offset: 0x000038C9
		private void LiquidsCanConvertToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46505400U, MainForm.On, 1409484350U, this.LiquidsCanConvert.Checked);
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x000056F0 File Offset: 0x000038F0
		private void MapSizeBoxChanged(object sender, EventArgs e)
		{
			switch (this.MapSizeBox.SelectedIndex)
			{
			case 0:
				MainForm.GeckoU.WriteUInt(47276052U, 2153971892U);
				return;
			case 1:
				MainForm.GeckoU.WriteUInt(47276052U, 945815553U);
				return;
			case 2:
				MainForm.GeckoU.WriteUInt(47276052U, 945815552U);
				return;
			default:
				return;
			}
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x0000575C File Offset: 0x0000395C
		private void TumbleHudToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(48474448U, MainForm.Off, 1474496062U, this.TumbleHUD.Checked);
			MainForm.GeckoU.WriteUIntToggle(46497468U, MainForm.Off, 2288189738U, this.TumbleHUD.Checked);
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x000057B1 File Offset: 0x000039B1
		private void RequiredPlayersSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUInt(46645252U, MainForm.GeckoU.Mix(945815552U, this.RequiredPlayersSlider.Value));
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x000057DC File Offset: 0x000039DC
		private void RefillIntervalSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUInt(46517364U, MainForm.GeckoU.Mix(945815552U, this.RefillIntervalSlider.Value));
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x00005808 File Offset: 0x00003A08
		private void GlideRingScoreSliderChanged(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUInt(47640084U, MainForm.GeckoU.Mix(945815552U, this.ringScoreGreen.Value));
			MainForm.GeckoU.WriteUInt(47640092U, MainForm.GeckoU.Mix(945815552U, this.ringScoreBlue.Value));
			MainForm.GeckoU.WriteUInt(47640100U, MainForm.GeckoU.Mix(945815552U, this.ringScoreOrange.Value));
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x00005890 File Offset: 0x00003A90
		private void SqueakInfinitelyToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(52045616U, MainForm.Blr, this.Mflr, this.SqueakInfinitely.Checked);
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x000058B8 File Offset: 0x00003AB8
		private void NoPositionLockToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(41735344U, MainForm.Off, 2288191508U, this.NoPosLock.Checked);
			MainForm.GeckoU.WriteUIntToggle(47053232U, MainForm.Off, 2288191508U, this.NoPosLock.Checked);
			MainForm.GeckoU.WriteUIntToggle(50102348U, MainForm.Off, 2288191508U, this.NoPosLock.Checked);
			MainForm.GeckoU.WriteUIntToggle(52688888U, MainForm.Off, 2288191508U, this.NoPosLock.Checked);
			MainForm.GeckoU.WriteUIntToggle(53662320U, MainForm.Off, 2288191508U, this.NoPosLock.Checked);
		}

		// Token: 0x060000C8 RID: 200 RVA: 0x00005979 File Offset: 0x00003B79
		private void UnlockInventoryToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46497468U, MainForm.Off, 2288189738U, this.UnlockInventoty.Checked);
		}

		// Token: 0x060000C9 RID: 201 RVA: 0x0000599F File Offset: 0x00003B9F
		private void DisableCameraAnimationToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46528520U, MainForm.Off, 1409538430U, this.DisableCameraAnimation.Checked);
		}

		// Token: 0x060000CA RID: 202 RVA: 0x000059C8 File Offset: 0x00003BC8
		private void SoloToggled(object sender, EventArgs e)
		{
			MainForm.GeckoU.WriteUIntToggle(46465144U, this.Nop, 1099038736U, this.Solo.Checked);
			MainForm.GeckoU.WriteUIntToggle(46465144U, 945815554U, 2145647480U, this.Solo.Checked);
		}

		// Token: 0x060000CB RID: 203 RVA: 0x00005A20 File Offset: 0x00003C20
		private void SetUUID(bool useOrigin = false, byte[] uuid = null)
		{
			uint num = MainForm.GeckoU.PeekUInt(279780440U);
			uint num2 = MainForm.GeckoU.PeekUInt(301989884U);
			if (num2 != 0U)
			{
				MainForm.GeckoU.WriteBytes(num + 24U, useOrigin ? uuid : MainForm.GeckoU.ReadBytes(301989856U, 16U, true));
				MainForm.GeckoU.WriteBytes(num2, useOrigin ? uuid : MainForm.GeckoU.ReadBytes(301989856U, 16U, true));
				return;
			}
			int num3 = BitConverter.ToString(MainForm.GeckoU.ReadBytes(409915392U, 8192U, true)).Replace("-", "").IndexOf("7795518FE05E875F");
			if (num3 == -1)
			{
				MessageBox.Show("Could not replace UUID, try restarting Minecraft.");
				return;
			}
			uint num4 = (uint)(409915392 + num3 / 2 + 10);
			MainForm.GeckoU.WriteUInt(301989884U, num4);
			byte[] bytes = MainForm.GeckoU.ReadBytes(num4, 16U, true);
			MainForm.GeckoU.WriteBytes(301989856U, bytes);
			MainForm.GeckoU.WriteBytes(num + 24U, useOrigin ? uuid : MainForm.GeckoU.ReadBytes(301989856U, 16U, true));
			MainForm.GeckoU.WriteBytes(num4, useOrigin ? uuid : MainForm.GeckoU.ReadBytes(301989856U, 16U, true));
		}

		// Token: 0x060000CC RID: 204 RVA: 0x00005B68 File Offset: 0x00003D68
		private uint GetSelfPlayerPointer()
		{
			return MainForm.GeckoU.PeekUInt(MainForm.GeckoU.PeekUInt(278714596U) + 52U);
		}

		// Token: 0x060000CD RID: 205 RVA: 0x00005B86 File Offset: 0x00003D86
		protected override void Dispose(bool disposing)
		{
			if (disposing && this.components != null)
			{
				this.components.Dispose();
			}
			base.Dispose(disposing);
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00005BA8 File Offset: 0x00003DA8
		private void InitializeComponent()
		{
			this.components = new Container();
			ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof(MainForm));
			this.WorldTile = new MetroTile();
			this.GeneralTile = new MetroTile();
			this.MinigamesTile = new MetroTile();
			this.SettingsTile = new MetroTile();
			this.BuildTile = new MetroTile();
			this.MainTabs = new MetroTabControl();
			this.MainTab = new MetroTabPage();
			this.SetupTutorialBtn = new MetroButton();
			this.FaqBtn = new MetroButton();
			this.BuildNotesBox = new MetroTextBox();
			this.BuildVerTitleLbl = new MetroLabel();
			this.CreditsBtn = new MetroButton();
			this.ConnectBtn = new MetroButton();
			this.DiscordSrvBtn = new MetroButton();
			this.WiiUIPv4Box = new MetroTextBox();
			this.WiiUIpv4Lbl = new MetroLabel();
			this.playersTab = new MetroTabPage();
			this.InstantSleep = new MetroCheckBox();
			this.NoCooldowns = new MetroCheckBox();
			this.defPotionBox = new MetroComboBox();
			this.DefaultPotionEffect = new MetroLabel();
			this.AlwaysDaylight = new MetroCheckBox();
			this.AirborneSpeedSlider = new NumericUpDown();
			this.AirborneSpeed = new MetroLabel();
			this.PunchToRide = new MetroCheckBox();
			this.UnlimitedTotemsOfUndying = new MetroCheckBox();
			this.SplashLingeringPotions = new MetroCheckBox();
			this.ForeverLastingPotions = new MetroCheckBox();
			this.ItemOfUndying = new MetroCheckBox();
			this.NoDamage = new MetroCheckBox();
			this.WaterDownStrengthSlider = new NumericUpDown();
			this.WaterDownStrength = new MetroLabel();
			this.breatheBox = new MetroComboBox();
			this.BreathingModeLbl = new MetroLabel();
			this.BreakBedrock = new MetroCheckBox();
			this.SwimFast = new MetroCheckBox();
			this.BreakAnything = new MetroCheckBox();
			this.AirJump = new MetroCheckBox();
			this.LeftHanded = new MetroCheckBox();
			this.MaxStackSlider = new NumericUpDown();
			this.MaxStack = new MetroLabel();
			this.UnlimitedEnchants = new MetroCheckBox();
			this.EnchantmentEditorBtn = new MetroButton();
			this.Invisible = new MetroCheckBox();
			this.XPLevelSlider = new NumericUpDown();
			this.PotionAmplifierSlider = new NumericUpDown();
			this.FrictionSlider = new NumericUpDown();
			this.playerModelScaleSlider = new NumericUpDown();
			this.FieldOfViewSplitSlider = new NumericUpDown();
			this.RiptideFlyingSpeedSlider = new NumericUpDown();
			this.SprintingSpeedScaleSlider = new NumericUpDown();
			this.EnchantmentLevelSlider = new NumericUpDown();
			this.WalkingSpeedScaleSlider = new NumericUpDown();
			this.ReachSlider = new NumericUpDown();
			this.JumpHeightSlider = new NumericUpDown();
			this.FieldOfViewSlider = new NumericUpDown();
			this.HitBoxScaleSlider = new NumericUpDown();
			this.XPLevel = new MetroLabel();
			this.PlayerOptionsBtn = new MetroButton();
			this.PotionAmplifier = new MetroLabel();
			this.NoSlowDowns = new MetroCheckBox();
			this.ESP = new MetroCheckBox();
			this.AlwaysInWater = new MetroCheckBox();
			this.LevelX = new MetroCheckBox();
			this.SeeThroughBlocks = new MetroCheckBox();
			this.AlwaysInLava = new MetroCheckBox();
			this.HideBlocks = new MetroCheckBox();
			this.UnderwaterEffects = new MetroCheckBox();
			this.EnchantmentLevel = new MetroLabel();
			this.Friction = new MetroLabel();
			this.GodModeAll = new MetroCheckBox();
			this.FieldofViewSplitscreen = new MetroLabel();
			this.RiptideFlyingSpeed = new MetroLabel();
			this.PlayerModelScale = new MetroLabel();
			this.JumpHeight = new MetroLabel();
			this.WalkingSpeedScale = new MetroLabel();
			this.GodMode = new MetroCheckBox();
			this.Reach = new MetroLabel();
			this.SprintingSpeedScale = new MetroLabel();
			this.DeadMauFiveMode = new MetroCheckBox();
			this.ArmorHUD = new MetroCheckBox();
			this.TakeEverythingAnywhere = new MetroCheckBox();
			this.FieldOfView = new MetroLabel();
			this.HiddenGameModesUnlocked = new MetroCheckBox();
			this.HitBoxScale = new MetroLabel();
			this.CraftingTableAnywhere = new MetroCheckBox();
			this.VisibleHitboxes = new MetroCheckBox();
			this.NnidEditorBtn = new MetroButton();
			this.InsaneCriticalHits = new MetroCheckBox();
			this.AlwaysSwimming = new MetroCheckBox();
			this.InfiniteRiptide = new MetroCheckBox();
			this.FullRotation = new MetroCheckBox();
			this.AlwaysDamagedPlayers = new MetroCheckBox();
			this.InfiniteItems = new MetroCheckBox();
			this.RapidBow = new MetroCheckBox();
			this.BloodVision = new MetroCheckBox();
			this.IgnorePotions = new MetroCheckBox();
			this.BypassInvulnerability = new MetroCheckBox();
			this.WearAnything = new MetroCheckBox();
			this.WalkonWater = new MetroCheckBox();
			this.AlwaysElytra = new MetroCheckBox();
			this.CaveFinder = new MetroCheckBox();
			this.Wallhack = new MetroCheckBox();
			this.LargeXPDrops = new MetroCheckBox();
			this.WallClimbing = new MetroCheckBox();
			this.NoCollision = new MetroCheckBox();
			this.InfiniteAir = new MetroCheckBox();
			this.InfiniteDurability = new MetroCheckBox();
			this.SuperKnockback = new MetroCheckBox();
			this.DisabledKnockback = new MetroCheckBox();
			this.SilkTouchAnything = new MetroCheckBox();
			this.DeveloperMode = new MetroCheckBox();
			this.PickLiquidBlocks = new MetroCheckBox();
			this.DuelWieldanyItem = new MetroCheckBox();
			this.DisableStarving = new MetroCheckBox();
			this.InstantMining = new MetroCheckBox();
			this.Flight = new MetroCheckBox();
			this.DisableSuffocating = new MetroCheckBox();
			this.NoFallDamage = new MetroCheckBox();
			this.CraftAnything = new MetroCheckBox();
			this.CreativeMode = new MetroCheckBox();
			this.worldTab = new MetroTabPage();
			this.FogDistanceSlider = new NumericUpDown();
			this.FogDistance = new MetroLabel();
			this.EntityEditorBtn = new MetroButton();
			this.ThunderMode = new MetroCheckBox();
			this.RainMode = new MetroCheckBox();
			this.WorldGenerationOptsBtn = new MetroButton();
			this.Collision = new MetroCheckBox();
			this.DisableFallingBlocks = new MetroCheckBox();
			this.LiquidSpreadTimeSlider = new NumericUpDown();
			this.LiquidSpreadTime = new MetroLabel();
			this.InvulnerableEntities = new MetroCheckBox();
			this.SleepingDoesntClearWeather = new MetroCheckBox();
			this.EntitySpeedSlider = new NumericUpDown();
			this.EntitySpeed = new MetroLabel();
			this.SuperFurnace = new MetroCheckBox();
			this.WaterLogAnything = new MetroCheckBox();
			this.LootTableEditorBtn = new MetroButton();
			this.LeashAnyMobs = new MetroCheckBox();
			this.SunProofMobs = new MetroCheckBox();
			this.DisableCreativeFlag = new MetroCheckBox();
			this.ZombieTower = new MetroCheckBox();
			this.Entities = new MetroLabel();
			this.IgnitedCreepers = new MetroCheckBox();
			this.SuperchargedCreepers = new MetroCheckBox();
			this.UncapEntitySpawnLimit = new MetroCheckBox();
			this.AcidLiquidBlocks = new MetroCheckBox();
			this.World = new MetroLabel();
			this.FoggyWeather = new MetroCheckBox();
			this.worldPnl = new MetroPanel();
			this.StaticLiquidBlocks = new MetroCheckBox();
			this.NoFog = new MetroCheckBox();
			this.generalTab = new MetroTabPage();
			this.KeyboardCustomizerBtn = new MetroButton();
			this.DebugConsoleCustomizerBtn = new MetroButton();
			this.CursedSlider = new NumericUpDown();
			this.CursedLbl = new MetroLabel();
			this.DLCManagerBtn = new MetroButton();
			this.PreventBeingKicked = new MetroCheckBox();
			this.Cursed = new MetroCheckBox();
			this.FreezeGameWhenPaused = new MetroCheckBox();
			this.AchievementsEverywhere = new MetroCheckBox();
			this.MuteMicrophone = new MetroCheckBox();
			this.AchievementEditor = new MetroButton();
			this.UnlockSignKeyboard = new MetroCheckBox();
			this.DebugConsole = new MetroCheckBox();
			this.Game = new MetroLabel();
			this.UIUserInterface = new MetroLabel();
			this.generalPanel = new MetroPanel();
			this.vpadDisplaySwitch = new MetroCheckBox();
			this.UIColorPickerBtn = new MetroButton();
			this.DisableTeleporting = new MetroCheckBox();
			this.GamepadSplitscreen = new MetroCheckBox();
			this.disableVPadInput = new MetroCheckBox();
			this.BypassFriendsOnly = new MetroCheckBox();
			this.DisablePermanentKicks = new MetroCheckBox();
			this.MapTextEditor = new MetroButton();
			this.HostOptions = new MetroCheckBox();
			this.SlowMotion = new MetroCheckBox();
			this.AllDLCUnlocked = new MetroCheckBox();
			this.ExitGame = new MetroButton();
			this.MinigamesTab = new MetroTabPage();
			this.MinigamesTabs = new MetroTabControl();
			this.GeneralMinigames = new MetroTabPage();
			this.Solo = new MetroCheckBox();
			this.LiquidsCanConvert = new MetroCheckBox();
			this.AllowMobs = new MetroCheckBox();
			this.NoPosLock = new MetroCheckBox();
			this.SqueakInfinitely = new MetroCheckBox();
			this.RequiredPlayersSlider = new NumericUpDown();
			this.RequiredPlayers = new MetroLabel();
			this.AllPermissions = new MetroCheckBox();
			this.AlwaysDamaged = new MetroCheckBox();
			this.TNTGriefing = new MetroCheckBox();
			this.DisabledKillBarriers = new MetroCheckBox();
			this.Battle = new MetroTabPage();
			this.MapSizeBox = new MetroComboBox();
			this.MapSizeLbl = new MetroLabel();
			this.EndGame = new MetroButton();
			this.RefillInterval = new MetroLabel();
			this.RefillIntervalSlider = new NumericUpDown();
			this.AntiEndGame = new MetroCheckBox();
			this.Tumble = new MetroTabPage();
			this.DisableCameraAnimation = new MetroCheckBox();
			this.UnlockInventoty = new MetroCheckBox();
			this.TumbleHUD = new MetroCheckBox();
			this.Glide = new MetroTabPage();
			this.ringScoreB = new MetroLabel();
			this.ringScoreBlue = new NumericUpDown();
			this.ringScoreO = new MetroLabel();
			this.ringScoreOrange = new NumericUpDown();
			this.ringScoreG = new MetroLabel();
			this.ringScoreGreen = new NumericUpDown();
			this.commandsTab = new MetroTabPage();
			this.CommandsWarnLbl = new MetroLabel();
			this.CommandsInMinigames = new MetroCheckBox();
			this.tellrawLbl = new MetroLabel();
			this.tellrawPanel = new MetroPanel();
			this.tellStyleLbl = new MetroLabel();
			this.customTellBox = new MetroRadioButton();
			this.javaTellBox = new MetroRadioButton();
			this.bedrockTellBox = new MetroRadioButton();
			this.tellMsgBox = new MetroTextBox();
			this.tellrawCmdBtn = new MetroButton();
			this.tellNameBox = new MetroTextBox();
			this.xpCmdLbl = new MetroLabel();
			this.xpPanel = new MetroPanel();
			this.giveXPLevelsBtn = new MetroButton();
			this.giveXPOrbsBtn = new MetroButton();
			this.xpAmountBox = new MetroTextBox();
			this.gamemodeCmdLbl = new MetroLabel();
			this.gamemodePanel = new MetroPanel();
			this.SpectatorCommandBtn = new MetroButton();
			this.AdventureCommandBtn = new MetroButton();
			this.CreativeCommandBtn = new MetroButton();
			this.SurvivalCommandBtn = new MetroButton();
			this.worldCmdLbl = new MetroLabel();
			this.worldPanel = new MetroPanel();
			this.setWorldSpawnBtn = new MetroButton();
			this.downfallCommandBtn = new MetroButton();
			this.playerCmdLbl = new MetroLabel();
			this.playerPanel = new MetroPanel();
			this.killCommandBtn = new MetroButton();
			this.timeCmdLbl = new MetroLabel();
			this.timePanel = new MetroPanel();
			this.timeCommandBtn = new MetroButton();
			this.timeAmountBox = new MetroTextBox();
			this.enchantCmdLbl = new MetroLabel();
			this.enchantPanel = new MetroPanel();
			this.enchantIDBox = new MetroComboBox();
			this.enchantCommandBtn = new MetroButton();
			this.enchantLevelBox = new MetroTextBox();
			this.giveCmdLabel = new MetroLabel();
			this.giveCommandPanel = new MetroPanel();
			this.itemIdHelpBtn = new MetroButton();
			this.giveCommandBtn = new MetroButton();
			this.giveDataBox = new MetroTextBox();
			this.giveAmountBox = new MetroTextBox();
			this.giveIDBox = new MetroTextBox();
			this.settingsTab = new MetroTabPage();
			this.TipsBtn = new MetroButton();
			this.TutorialBtn = new MetroButton();
			this.SeasonalThemes = new MetroCheckBox();
			this.TextAllignBox = new MetroComboBox();
			this.TextAllignLbl = new MetroLabel();
			this.HostIndicators = new MetroCheckBox();
			this.CemuPckMngrBtn = new MetroButton();
			this.QuickModsManagerBtn = new MetroButton();
			this.OpenLangMngrBtn = new MetroButton();
			this.CheckForPreRelease = new MetroCheckBox();
			this.settingsLogo = new MetroPanel();
			this.updateBtn = new MetroButton();
			this.discordRpcCheckBox = new MetroCheckBox();
			this.ColorsBox = new MetroComboBox();
			this.ColorLabel = new MetroLabel();
			this.GlideTile = new MetroTile();
			this.TumbleTile = new MetroTile();
			this.BattleTile = new MetroTile();
			this.GeneralMgTile = new MetroTile();
			this.HomeTile = new MetroTile();
			this.StyleMngr = new MetroStyleManager(this.components);
			this.StyleExtender = new MetroStyleExtender(this.components);
			this.ToolTipManager = new MetroToolTip();
			this.PlayersTile = new MetroTile();
			this.CommandsTile = new MetroTile();
			this.RightClickMenu = new MetroContextMenu(this.components);
			this.IncreaseDecimalPlace = new ToolStripMenuItem();
			this.DecreaseDecimalPlace = new ToolStripMenuItem();
			this.NavMenuPnl = new MetroPanel();
			this.NavMenuMgPnl = new MetroPanel();
			this.MainTabs.SuspendLayout();
			this.MainTab.SuspendLayout();
			this.playersTab.SuspendLayout();
			((ISupportInitialize)this.AirborneSpeedSlider).BeginInit();
			((ISupportInitialize)this.WaterDownStrengthSlider).BeginInit();
			((ISupportInitialize)this.MaxStackSlider).BeginInit();
			((ISupportInitialize)this.XPLevelSlider).BeginInit();
			((ISupportInitialize)this.PotionAmplifierSlider).BeginInit();
			((ISupportInitialize)this.FrictionSlider).BeginInit();
			((ISupportInitialize)this.playerModelScaleSlider).BeginInit();
			((ISupportInitialize)this.FieldOfViewSplitSlider).BeginInit();
			((ISupportInitialize)this.RiptideFlyingSpeedSlider).BeginInit();
			((ISupportInitialize)this.SprintingSpeedScaleSlider).BeginInit();
			((ISupportInitialize)this.EnchantmentLevelSlider).BeginInit();
			((ISupportInitialize)this.WalkingSpeedScaleSlider).BeginInit();
			((ISupportInitialize)this.ReachSlider).BeginInit();
			((ISupportInitialize)this.JumpHeightSlider).BeginInit();
			((ISupportInitialize)this.FieldOfViewSlider).BeginInit();
			((ISupportInitialize)this.HitBoxScaleSlider).BeginInit();
			this.worldTab.SuspendLayout();
			((ISupportInitialize)this.FogDistanceSlider).BeginInit();
			((ISupportInitialize)this.LiquidSpreadTimeSlider).BeginInit();
			((ISupportInitialize)this.EntitySpeedSlider).BeginInit();
			this.generalTab.SuspendLayout();
			((ISupportInitialize)this.CursedSlider).BeginInit();
			this.MinigamesTab.SuspendLayout();
			this.MinigamesTabs.SuspendLayout();
			this.GeneralMinigames.SuspendLayout();
			((ISupportInitialize)this.RequiredPlayersSlider).BeginInit();
			this.Battle.SuspendLayout();
			((ISupportInitialize)this.RefillIntervalSlider).BeginInit();
			this.Tumble.SuspendLayout();
			this.Glide.SuspendLayout();
			((ISupportInitialize)this.ringScoreBlue).BeginInit();
			((ISupportInitialize)this.ringScoreOrange).BeginInit();
			((ISupportInitialize)this.ringScoreGreen).BeginInit();
			this.commandsTab.SuspendLayout();
			this.tellrawPanel.SuspendLayout();
			this.xpPanel.SuspendLayout();
			this.gamemodePanel.SuspendLayout();
			this.worldPanel.SuspendLayout();
			this.playerPanel.SuspendLayout();
			this.timePanel.SuspendLayout();
			this.enchantPanel.SuspendLayout();
			this.giveCommandPanel.SuspendLayout();
			this.settingsTab.SuspendLayout();
			((ISupportInitialize)this.StyleMngr).BeginInit();
			this.RightClickMenu.SuspendLayout();
			this.NavMenuPnl.SuspendLayout();
			this.NavMenuMgPnl.SuspendLayout();
			base.SuspendLayout();
			this.WorldTile.ActiveControl = null;
			this.WorldTile.Dock = DockStyle.Top;
			this.WorldTile.Location = new Point(0, 110);
			this.WorldTile.Name = "WorldTile";
			this.WorldTile.PaintTileCount = false;
			this.WorldTile.Size = new Size(159, 55);
			this.WorldTile.TabIndex = 3;
			this.WorldTile.Tag = "";
			this.WorldTile.Text = "World and Entities";
			this.WorldTile.TextAlign = ContentAlignment.MiddleCenter;
			this.WorldTile.TileCount = 2;
			this.WorldTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.WorldTile.UseSelectable = true;
			this.WorldTile.Click += this.SwapTab;
			this.GeneralTile.ActiveControl = null;
			this.GeneralTile.Dock = DockStyle.Top;
			this.GeneralTile.Location = new Point(0, 165);
			this.GeneralTile.Name = "GeneralTile";
			this.GeneralTile.PaintTileCount = false;
			this.GeneralTile.Size = new Size(159, 55);
			this.GeneralTile.TabIndex = 4;
			this.GeneralTile.Tag = "";
			this.GeneralTile.Text = "General Game";
			this.GeneralTile.TextAlign = ContentAlignment.MiddleCenter;
			this.GeneralTile.TileCount = 3;
			this.GeneralTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.GeneralTile.UseSelectable = true;
			this.GeneralTile.Click += this.SwapTab;
			this.MinigamesTile.ActiveControl = null;
			this.MinigamesTile.Dock = DockStyle.Top;
			this.MinigamesTile.Location = new Point(0, 220);
			this.MinigamesTile.Name = "MinigamesTile";
			this.MinigamesTile.PaintTileCount = false;
			this.MinigamesTile.Size = new Size(159, 55);
			this.MinigamesTile.TabIndex = 5;
			this.MinigamesTile.Tag = "";
			this.MinigamesTile.Text = "Minigames";
			this.MinigamesTile.TextAlign = ContentAlignment.MiddleCenter;
			this.MinigamesTile.TileCount = 4;
			this.MinigamesTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.MinigamesTile.UseSelectable = true;
			this.MinigamesTile.Click += this.SwapTab;
			this.SettingsTile.ActiveControl = null;
			this.SettingsTile.Dock = DockStyle.Top;
			this.SettingsTile.Location = new Point(0, 489);
			this.SettingsTile.Name = "SettingsTile";
			this.SettingsTile.PaintTileCount = false;
			this.SettingsTile.Size = new Size(159, 55);
			this.SettingsTile.TabIndex = 7;
			this.SettingsTile.Tag = "";
			this.SettingsTile.Text = "Settings";
			this.SettingsTile.TextAlign = ContentAlignment.MiddleCenter;
			this.SettingsTile.TileCount = 6;
			this.SettingsTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.SettingsTile.UseSelectable = true;
			this.SettingsTile.Click += this.SwapTab;
			this.BuildTile.ActiveControl = null;
			this.BuildTile.AutoSize = true;
			this.BuildTile.Dock = DockStyle.Fill;
			this.BuildTile.Enabled = false;
			this.BuildTile.Location = new Point(0, 544);
			this.BuildTile.Name = "BuildTile";
			this.BuildTile.PaintTileCount = false;
			this.BuildTile.Size = new Size(159, 97);
			this.BuildTile.TabIndex = 6;
			this.BuildTile.Text = "v0.0.0.chprq";
			this.BuildTile.TextAlign = ContentAlignment.BottomCenter;
			this.BuildTile.TileCount = 8;
			this.BuildTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.BuildTile.UseSelectable = true;
			this.MainTabs.Controls.Add(this.MainTab);
			this.MainTabs.Controls.Add(this.playersTab);
			this.MainTabs.Controls.Add(this.worldTab);
			this.MainTabs.Controls.Add(this.generalTab);
			this.MainTabs.Controls.Add(this.MinigamesTab);
			this.MainTabs.Controls.Add(this.commandsTab);
			this.MainTabs.Controls.Add(this.settingsTab);
			this.MainTabs.ItemSize = new Size(160, 5);
			this.MainTabs.Location = new Point(155, 58);
			this.MainTabs.Multiline = true;
			this.MainTabs.Name = "MainTabs";
			this.MainTabs.SelectedIndex = 6;
			this.MainTabs.Size = new Size(1130, 643);
			this.MainTabs.SizeMode = TabSizeMode.Fixed;
			this.MainTabs.TabIndex = 0;
			this.MainTabs.TextAlign = ContentAlignment.MiddleCenter;
			this.MainTabs.Theme = MetroThemeStyle.Dark;
			this.MainTabs.UseSelectable = true;
			this.MainTab.Controls.Add(this.SetupTutorialBtn);
			this.MainTab.Controls.Add(this.FaqBtn);
			this.MainTab.Controls.Add(this.BuildNotesBox);
			this.MainTab.Controls.Add(this.BuildVerTitleLbl);
			this.MainTab.Controls.Add(this.CreditsBtn);
			this.MainTab.Controls.Add(this.ConnectBtn);
			this.MainTab.Controls.Add(this.DiscordSrvBtn);
			this.MainTab.Controls.Add(this.WiiUIPv4Box);
			this.MainTab.Controls.Add(this.WiiUIpv4Lbl);
			this.MainTab.HorizontalScrollbarBarColor = true;
			this.MainTab.HorizontalScrollbarHighlightOnWheel = false;
			this.MainTab.HorizontalScrollbarSize = 10;
			this.MainTab.Location = new Point(4, 9);
			this.MainTab.Name = "MainTab";
			this.MainTab.Padding = new Padding(3);
			this.MainTab.Size = new Size(1122, 630);
			this.MainTab.TabIndex = 6;
			this.MainTab.Text = "Home";
			this.MainTab.Theme = MetroThemeStyle.Dark;
			this.MainTab.VerticalScrollbarBarColor = true;
			this.MainTab.VerticalScrollbarHighlightOnWheel = false;
			this.MainTab.VerticalScrollbarSize = 10;
			this.SetupTutorialBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.SetupTutorialBtn.Location = new Point(541, 594);
			this.SetupTutorialBtn.Margin = new Padding(4, 6, 4, 6);
			this.SetupTutorialBtn.Name = "SetupTutorialBtn";
			this.SetupTutorialBtn.Size = new Size(210, 23);
			this.SetupTutorialBtn.TabIndex = 47;
			this.SetupTutorialBtn.Text = "Setup Tutorial";
			this.SetupTutorialBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SetupTutorialBtn, "View the setup tutorial");
			this.SetupTutorialBtn.UseSelectable = true;
			this.SetupTutorialBtn.Click += this.SetupTutorialBtnClicked;
			this.FaqBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.FaqBtn.Location = new Point(84, 594);
			this.FaqBtn.Margin = new Padding(4, 6, 4, 6);
			this.FaqBtn.Name = "FaqBtn";
			this.FaqBtn.Size = new Size(210, 23);
			this.FaqBtn.TabIndex = 46;
			this.FaqBtn.Text = "FAQ - Information";
			this.FaqBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.FaqBtn, "View the frequently asked questions");
			this.FaqBtn.UseSelectable = true;
			this.FaqBtn.Click += this.OpenFaqInfoClicked;
			this.BuildNotesBox.CustomButton.Image = null;
			this.BuildNotesBox.CustomButton.Location = new Point(585, 1);
			this.BuildNotesBox.CustomButton.Name = "";
			this.BuildNotesBox.CustomButton.Size = new Size(523, 523);
			this.BuildNotesBox.CustomButton.Style = MetroColorStyle.Blue;
			this.BuildNotesBox.CustomButton.TabIndex = 1;
			this.BuildNotesBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.BuildNotesBox.CustomButton.UseSelectable = true;
			this.BuildNotesBox.CustomButton.Visible = false;
			this.BuildNotesBox.Lines = new string[]
			{
				"Fetching patch notes for version v0.0.0.chprq"
			};
			this.BuildNotesBox.Location = new Point(6, 31);
			this.BuildNotesBox.MaxLength = 32767;
			this.BuildNotesBox.Multiline = true;
			this.BuildNotesBox.Name = "BuildNotesBox";
			this.BuildNotesBox.PasswordChar = '\0';
			this.BuildNotesBox.ReadOnly = true;
			this.BuildNotesBox.ScrollBars = ScrollBars.Vertical;
			this.BuildNotesBox.SelectedText = "";
			this.BuildNotesBox.SelectionLength = 0;
			this.BuildNotesBox.SelectionStart = 0;
			this.BuildNotesBox.ShortcutsEnabled = true;
			this.BuildNotesBox.Size = new Size(1109, 525);
			this.BuildNotesBox.TabIndex = 8;
			this.BuildNotesBox.Text = "Fetching patch notes for version v0.0.0.chprq";
			this.BuildNotesBox.Theme = MetroThemeStyle.Dark;
			this.BuildNotesBox.UseSelectable = true;
			this.BuildNotesBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.BuildNotesBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.BuildVerTitleLbl.AutoSize = true;
			this.BuildVerTitleLbl.FontSize = MetroLabelSize.Tall;
			this.BuildVerTitleLbl.FontWeight = MetroLabelWeight.Regular;
			this.BuildVerTitleLbl.Location = new Point(3, 3);
			this.BuildVerTitleLbl.Name = "BuildVerTitleLbl";
			this.BuildVerTitleLbl.Size = new Size(237, 25);
			this.BuildVerTitleLbl.TabIndex = 6;
			this.BuildVerTitleLbl.Text = "Patch Notes for v0.0.0.chprq";
			this.BuildVerTitleLbl.TextAlign = ContentAlignment.MiddleLeft;
			this.BuildVerTitleLbl.Theme = MetroThemeStyle.Dark;
			this.CreditsBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.CreditsBtn.Location = new Point(302, 594);
			this.CreditsBtn.Margin = new Padding(4, 6, 4, 6);
			this.CreditsBtn.Name = "CreditsBtn";
			this.CreditsBtn.Size = new Size(210, 23);
			this.CreditsBtn.TabIndex = 42;
			this.CreditsBtn.Text = "Credits";
			this.CreditsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CreditsBtn, "View the credits for the Mod Injector");
			this.CreditsBtn.UseSelectable = true;
			this.CreditsBtn.Click += this.CreditsBtnClicked;
			this.ConnectBtn.Location = new Point(975, 562);
			this.ConnectBtn.Name = "ConnectBtn";
			this.ConnectBtn.Size = new Size(140, 23);
			this.ConnectBtn.TabIndex = 4;
			this.ConnectBtn.Text = "Connect";
			this.ConnectBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ConnectBtn, "Connects to your Wii U using the IPv4 provided");
			this.ConnectBtn.UseSelectable = true;
			this.ConnectBtn.Click += this.ConnectBtnClicked;
			this.DiscordSrvBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.DiscordSrvBtn.Location = new Point(759, 594);
			this.DiscordSrvBtn.Margin = new Padding(4, 6, 4, 6);
			this.DiscordSrvBtn.Name = "DiscordSrvBtn";
			this.DiscordSrvBtn.Size = new Size(210, 23);
			this.DiscordSrvBtn.TabIndex = 32;
			this.DiscordSrvBtn.Text = "Discord Server";
			this.DiscordSrvBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DiscordSrvBtn, "Will take you to the official Discord server for the Mod Injector");
			this.DiscordSrvBtn.UseSelectable = true;
			this.DiscordSrvBtn.Click += this.DiscordSrvBtnClicked;
			this.WiiUIPv4Box.CustomButton.Image = null;
			this.WiiUIPv4Box.CustomButton.Location = new Point(863, 1);
			this.WiiUIPv4Box.CustomButton.Name = "";
			this.WiiUIPv4Box.CustomButton.Size = new Size(21, 21);
			this.WiiUIPv4Box.CustomButton.Style = MetroColorStyle.Blue;
			this.WiiUIPv4Box.CustomButton.TabIndex = 1;
			this.WiiUIPv4Box.CustomButton.Theme = MetroThemeStyle.Light;
			this.WiiUIPv4Box.CustomButton.UseSelectable = true;
			this.WiiUIPv4Box.CustomButton.Visible = false;
			this.WiiUIPv4Box.Lines = new string[0];
			this.WiiUIPv4Box.Location = new Point(84, 562);
			this.WiiUIPv4Box.MaxLength = 32767;
			this.WiiUIPv4Box.Name = "WiiUIPv4Box";
			this.WiiUIPv4Box.PasswordChar = '\0';
			this.WiiUIPv4Box.PromptText = "Your Wii U's IPv4 address (Seen in the TCP Gecko Installer)";
			this.WiiUIPv4Box.ScrollBars = ScrollBars.None;
			this.WiiUIPv4Box.SelectedText = "";
			this.WiiUIPv4Box.SelectionLength = 0;
			this.WiiUIPv4Box.SelectionStart = 0;
			this.WiiUIPv4Box.ShortcutsEnabled = true;
			this.WiiUIPv4Box.Size = new Size(885, 23);
			this.WiiUIPv4Box.TabIndex = 3;
			this.WiiUIPv4Box.TextAlign = HorizontalAlignment.Center;
			this.WiiUIPv4Box.Theme = MetroThemeStyle.Dark;
			this.WiiUIPv4Box.UseSelectable = true;
			this.WiiUIPv4Box.WaterMark = "Your Wii U's IPv4 address (Seen in the TCP Gecko Installer)";
			this.WiiUIPv4Box.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.WiiUIPv4Box.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.WiiUIPv4Box.TextChanged += this.CaptureWiiUiPv4Box;
			this.WiiUIPv4Box.KeyDown += this.CaptureWiiUiPv4BoxInput;
			this.WiiUIpv4Lbl.AutoSize = true;
			this.WiiUIpv4Lbl.FontWeight = MetroLabelWeight.Regular;
			this.WiiUIpv4Lbl.Location = new Point(6, 562);
			this.WiiUIpv4Lbl.Name = "WiiUIpv4Lbl";
			this.WiiUIpv4Lbl.Size = new Size(76, 19);
			this.WiiUIpv4Lbl.TabIndex = 2;
			this.WiiUIpv4Lbl.Text = "Wii U IPv4:";
			this.WiiUIpv4Lbl.Theme = MetroThemeStyle.Dark;
			this.playersTab.Controls.Add(this.InstantSleep);
			this.playersTab.Controls.Add(this.NoCooldowns);
			this.playersTab.Controls.Add(this.defPotionBox);
			this.playersTab.Controls.Add(this.DefaultPotionEffect);
			this.playersTab.Controls.Add(this.AlwaysDaylight);
			this.playersTab.Controls.Add(this.AirborneSpeedSlider);
			this.playersTab.Controls.Add(this.AirborneSpeed);
			this.playersTab.Controls.Add(this.PunchToRide);
			this.playersTab.Controls.Add(this.UnlimitedTotemsOfUndying);
			this.playersTab.Controls.Add(this.SplashLingeringPotions);
			this.playersTab.Controls.Add(this.ForeverLastingPotions);
			this.playersTab.Controls.Add(this.ItemOfUndying);
			this.playersTab.Controls.Add(this.NoDamage);
			this.playersTab.Controls.Add(this.WaterDownStrengthSlider);
			this.playersTab.Controls.Add(this.WaterDownStrength);
			this.playersTab.Controls.Add(this.breatheBox);
			this.playersTab.Controls.Add(this.BreathingModeLbl);
			this.playersTab.Controls.Add(this.BreakBedrock);
			this.playersTab.Controls.Add(this.SwimFast);
			this.playersTab.Controls.Add(this.BreakAnything);
			this.playersTab.Controls.Add(this.AirJump);
			this.playersTab.Controls.Add(this.LeftHanded);
			this.playersTab.Controls.Add(this.MaxStackSlider);
			this.playersTab.Controls.Add(this.MaxStack);
			this.playersTab.Controls.Add(this.UnlimitedEnchants);
			this.playersTab.Controls.Add(this.EnchantmentEditorBtn);
			this.playersTab.Controls.Add(this.Invisible);
			this.playersTab.Controls.Add(this.XPLevelSlider);
			this.playersTab.Controls.Add(this.PotionAmplifierSlider);
			this.playersTab.Controls.Add(this.FrictionSlider);
			this.playersTab.Controls.Add(this.playerModelScaleSlider);
			this.playersTab.Controls.Add(this.FieldOfViewSplitSlider);
			this.playersTab.Controls.Add(this.RiptideFlyingSpeedSlider);
			this.playersTab.Controls.Add(this.SprintingSpeedScaleSlider);
			this.playersTab.Controls.Add(this.EnchantmentLevelSlider);
			this.playersTab.Controls.Add(this.WalkingSpeedScaleSlider);
			this.playersTab.Controls.Add(this.ReachSlider);
			this.playersTab.Controls.Add(this.JumpHeightSlider);
			this.playersTab.Controls.Add(this.FieldOfViewSlider);
			this.playersTab.Controls.Add(this.HitBoxScaleSlider);
			this.playersTab.Controls.Add(this.XPLevel);
			this.playersTab.Controls.Add(this.PlayerOptionsBtn);
			this.playersTab.Controls.Add(this.PotionAmplifier);
			this.playersTab.Controls.Add(this.NoSlowDowns);
			this.playersTab.Controls.Add(this.ESP);
			this.playersTab.Controls.Add(this.AlwaysInWater);
			this.playersTab.Controls.Add(this.LevelX);
			this.playersTab.Controls.Add(this.SeeThroughBlocks);
			this.playersTab.Controls.Add(this.AlwaysInLava);
			this.playersTab.Controls.Add(this.HideBlocks);
			this.playersTab.Controls.Add(this.UnderwaterEffects);
			this.playersTab.Controls.Add(this.EnchantmentLevel);
			this.playersTab.Controls.Add(this.Friction);
			this.playersTab.Controls.Add(this.GodModeAll);
			this.playersTab.Controls.Add(this.FieldofViewSplitscreen);
			this.playersTab.Controls.Add(this.RiptideFlyingSpeed);
			this.playersTab.Controls.Add(this.PlayerModelScale);
			this.playersTab.Controls.Add(this.JumpHeight);
			this.playersTab.Controls.Add(this.WalkingSpeedScale);
			this.playersTab.Controls.Add(this.GodMode);
			this.playersTab.Controls.Add(this.Reach);
			this.playersTab.Controls.Add(this.SprintingSpeedScale);
			this.playersTab.Controls.Add(this.DeadMauFiveMode);
			this.playersTab.Controls.Add(this.ArmorHUD);
			this.playersTab.Controls.Add(this.TakeEverythingAnywhere);
			this.playersTab.Controls.Add(this.FieldOfView);
			this.playersTab.Controls.Add(this.HiddenGameModesUnlocked);
			this.playersTab.Controls.Add(this.HitBoxScale);
			this.playersTab.Controls.Add(this.CraftingTableAnywhere);
			this.playersTab.Controls.Add(this.VisibleHitboxes);
			this.playersTab.Controls.Add(this.NnidEditorBtn);
			this.playersTab.Controls.Add(this.InsaneCriticalHits);
			this.playersTab.Controls.Add(this.AlwaysSwimming);
			this.playersTab.Controls.Add(this.InfiniteRiptide);
			this.playersTab.Controls.Add(this.FullRotation);
			this.playersTab.Controls.Add(this.AlwaysDamagedPlayers);
			this.playersTab.Controls.Add(this.InfiniteItems);
			this.playersTab.Controls.Add(this.RapidBow);
			this.playersTab.Controls.Add(this.BloodVision);
			this.playersTab.Controls.Add(this.IgnorePotions);
			this.playersTab.Controls.Add(this.BypassInvulnerability);
			this.playersTab.Controls.Add(this.WearAnything);
			this.playersTab.Controls.Add(this.WalkonWater);
			this.playersTab.Controls.Add(this.AlwaysElytra);
			this.playersTab.Controls.Add(this.CaveFinder);
			this.playersTab.Controls.Add(this.Wallhack);
			this.playersTab.Controls.Add(this.LargeXPDrops);
			this.playersTab.Controls.Add(this.WallClimbing);
			this.playersTab.Controls.Add(this.NoCollision);
			this.playersTab.Controls.Add(this.InfiniteAir);
			this.playersTab.Controls.Add(this.InfiniteDurability);
			this.playersTab.Controls.Add(this.SuperKnockback);
			this.playersTab.Controls.Add(this.DisabledKnockback);
			this.playersTab.Controls.Add(this.SilkTouchAnything);
			this.playersTab.Controls.Add(this.DeveloperMode);
			this.playersTab.Controls.Add(this.PickLiquidBlocks);
			this.playersTab.Controls.Add(this.DuelWieldanyItem);
			this.playersTab.Controls.Add(this.DisableStarving);
			this.playersTab.Controls.Add(this.InstantMining);
			this.playersTab.Controls.Add(this.Flight);
			this.playersTab.Controls.Add(this.DisableSuffocating);
			this.playersTab.Controls.Add(this.NoFallDamage);
			this.playersTab.Controls.Add(this.CraftAnything);
			this.playersTab.Controls.Add(this.CreativeMode);
			this.playersTab.HorizontalScrollbarBarColor = true;
			this.playersTab.HorizontalScrollbarHighlightOnWheel = false;
			this.playersTab.HorizontalScrollbarSize = 10;
			this.playersTab.Location = new Point(4, 9);
			this.playersTab.Name = "playersTab";
			this.playersTab.Padding = new Padding(3);
			this.playersTab.Size = new Size(1122, 630);
			this.playersTab.TabIndex = 0;
			this.playersTab.Tag = "GeckoURequired";
			this.playersTab.Text = "Player(s) and Item(s)";
			this.playersTab.Theme = MetroThemeStyle.Dark;
			this.playersTab.VerticalScrollbarBarColor = true;
			this.playersTab.VerticalScrollbarHighlightOnWheel = false;
			this.playersTab.VerticalScrollbarSize = 10;
			this.InstantSleep.AutoSize = true;
			this.InstantSleep.Location = new Point(565, 89);
			this.InstantSleep.Name = "InstantSleep";
			this.InstantSleep.Size = new Size(90, 15);
			this.InstantSleep.Style = MetroColorStyle.Orange;
			this.InstantSleep.TabIndex = 189;
			this.InstantSleep.Tag = "Host";
			this.InstantSleep.Text = "Instant Sleep";
			this.InstantSleep.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InstantSleep, "Makes you instantly fall asleep.");
			this.InstantSleep.UseSelectable = true;
			this.InstantSleep.UseStyleColors = true;
			this.InstantSleep.CheckedChanged += this.InstantSleepToggled;
			this.NoCooldowns.AutoSize = true;
			this.NoCooldowns.Location = new Point(565, 68);
			this.NoCooldowns.Name = "NoCooldowns";
			this.NoCooldowns.Size = new Size(102, 15);
			this.NoCooldowns.Style = MetroColorStyle.Blue;
			this.NoCooldowns.TabIndex = 189;
			this.NoCooldowns.Tag = "NonHost";
			this.NoCooldowns.Text = "No Cooldowns";
			this.NoCooldowns.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoCooldowns, "Disables the cooldown for items such as Ender Pearls or Chorus Fruit.");
			this.NoCooldowns.UseSelectable = true;
			this.NoCooldowns.UseStyleColors = true;
			this.NoCooldowns.CheckedChanged += this.NoCooldownsToggled;
			this.defPotionBox.FontSize = MetroComboBoxSize.Small;
			this.defPotionBox.FontWeight = MetroComboBoxWeight.Light;
			this.defPotionBox.FormattingEnabled = true;
			this.defPotionBox.ItemHeight = 19;
			this.defPotionBox.Items.AddRange(new object[]
			{
				"None",
				"Speed",
				"Slowness",
				"Haste",
				"Mining Fatigue",
				"Strenght",
				"None",
				"None",
				"Jump Boost",
				"Nausea",
				"Regeneration",
				"Resistance",
				"Fire Resistance",
				"Water Breathing",
				"Invisibility",
				"Blindness",
				"Night Vision",
				"Hunger",
				"Weakness",
				"Posion",
				"Wither",
				"Health Boost",
				"Absorption",
				"None",
				"Glowing",
				"Levitation",
				"Luck",
				"Bad Luck",
				"Slow Falling"
			});
			this.defPotionBox.Location = new Point(931, 499);
			this.defPotionBox.Name = "defPotionBox";
			this.defPotionBox.Size = new Size(185, 25);
			this.defPotionBox.TabIndex = 188;
			this.defPotionBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.defPotionBox, "What effect will ALL potions default to?");
			this.defPotionBox.UseSelectable = true;
			this.defPotionBox.SelectedIndexChanged += this.DefPotionBoxChanged;
			this.DefaultPotionEffect.AutoSize = true;
			this.DefaultPotionEffect.FontWeight = MetroLabelWeight.Regular;
			this.DefaultPotionEffect.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.DefaultPotionEffect.Location = new Point(789, 499);
			this.DefaultPotionEffect.Name = "DefaultPotionEffect";
			this.DefaultPotionEffect.Size = new Size(137, 19);
			this.DefaultPotionEffect.Style = MetroColorStyle.Blue;
			this.DefaultPotionEffect.TabIndex = 187;
			this.DefaultPotionEffect.Tag = "NonHost";
			this.DefaultPotionEffect.Text = "Default Potion Effect:";
			this.DefaultPotionEffect.Theme = MetroThemeStyle.Dark;
			this.DefaultPotionEffect.UseStyleColors = true;
			this.AlwaysDaylight.AutoSize = true;
			this.AlwaysDaylight.BackColor = Color.Transparent;
			this.AlwaysDaylight.Location = new Point(565, 47);
			this.AlwaysDaylight.Name = "AlwaysDaylight";
			this.AlwaysDaylight.Size = new Size(107, 15);
			this.AlwaysDaylight.Style = MetroColorStyle.Blue;
			this.AlwaysDaylight.TabIndex = 186;
			this.AlwaysDaylight.Tag = "NonHost";
			this.AlwaysDaylight.Text = "Always Daylight";
			this.AlwaysDaylight.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysDaylight, "Makes lighting bright at night.");
			this.AlwaysDaylight.UseSelectable = true;
			this.AlwaysDaylight.UseStyleColors = true;
			this.AlwaysDaylight.CheckedChanged += this.AlwaysDaylightToggled;
			this.StyleExtender.SetApplyMetroTheme(this.AirborneSpeedSlider, true);
			this.AirborneSpeedSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.AirborneSpeedSlider.DecimalPlaces = 1;
			this.AirborneSpeedSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.AirborneSpeedSlider.Location = new Point(666, 545);
			this.AirborneSpeedSlider.Name = "AirborneSpeedSlider";
			this.AirborneSpeedSlider.Size = new Size(115, 20);
			this.AirborneSpeedSlider.TabIndex = 185;
			this.AirborneSpeedSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.AirborneSpeedSlider, "How much faster do we go down in water while\r\npressing crouch?");
			this.AirborneSpeedSlider.Value = new decimal(new int[]
			{
				2,
				0,
				0,
				65536
			});
			this.AirborneSpeedSlider.ValueChanged += this.AirborneSpeedSliderChanged;
			this.AirborneSpeed.AutoSize = true;
			this.AirborneSpeed.FontWeight = MetroLabelWeight.Regular;
			this.AirborneSpeed.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.AirborneSpeed.Location = new Point(554, 546);
			this.AirborneSpeed.Name = "AirborneSpeed";
			this.AirborneSpeed.Size = new Size(106, 19);
			this.AirborneSpeed.Style = MetroColorStyle.Blue;
			this.AirborneSpeed.TabIndex = 184;
			this.AirborneSpeed.Tag = "NonHost";
			this.AirborneSpeed.Text = "Airborne Speed:";
			this.AirborneSpeed.Theme = MetroThemeStyle.Dark;
			this.AirborneSpeed.UseStyleColors = true;
			this.PunchToRide.AutoSize = true;
			this.PunchToRide.BackColor = Color.Transparent;
			this.PunchToRide.Location = new Point(565, 27);
			this.PunchToRide.Name = "PunchToRide";
			this.PunchToRide.Size = new Size(97, 15);
			this.PunchToRide.Style = MetroColorStyle.Blue;
			this.PunchToRide.TabIndex = 183;
			this.PunchToRide.Tag = "NonHost";
			this.PunchToRide.Text = "Punch to Ride";
			this.PunchToRide.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.PunchToRide, "Allows you to ride any entity by punching them.\r\nWARNING: Can be very buggy.");
			this.PunchToRide.UseSelectable = true;
			this.PunchToRide.UseStyleColors = true;
			this.PunchToRide.CheckedChanged += this.PunchToRideToggled;
			this.UnlimitedTotemsOfUndying.AutoSize = true;
			this.UnlimitedTotemsOfUndying.Location = new Point(379, 405);
			this.UnlimitedTotemsOfUndying.Name = "UnlimitedTotemsOfUndying";
			this.UnlimitedTotemsOfUndying.Size = new Size(180, 15);
			this.UnlimitedTotemsOfUndying.Style = MetroColorStyle.Orange;
			this.UnlimitedTotemsOfUndying.TabIndex = 182;
			this.UnlimitedTotemsOfUndying.Tag = "Host";
			this.UnlimitedTotemsOfUndying.Text = "Unlimited Totems of Undying";
			this.UnlimitedTotemsOfUndying.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UnlimitedTotemsOfUndying, "Totems of Undying will not be depleted upon death.");
			this.UnlimitedTotemsOfUndying.UseSelectable = true;
			this.UnlimitedTotemsOfUndying.UseStyleColors = true;
			this.UnlimitedTotemsOfUndying.CheckedChanged += this.UnlimitedTotemsOfUndyingToggled;
			this.SplashLingeringPotions.AutoSize = true;
			this.SplashLingeringPotions.BackColor = Color.Transparent;
			this.SplashLingeringPotions.Location = new Point(565, 6);
			this.SplashLingeringPotions.Name = "SplashLingeringPotions";
			this.SplashLingeringPotions.Size = new Size(153, 15);
			this.SplashLingeringPotions.Style = MetroColorStyle.Orange;
			this.SplashLingeringPotions.TabIndex = 181;
			this.SplashLingeringPotions.Tag = "Host";
			this.SplashLingeringPotions.Text = "Splash Lingering Potions";
			this.SplashLingeringPotions.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SplashLingeringPotions, "Splash potions will act as lingering potions.");
			this.SplashLingeringPotions.UseSelectable = true;
			this.SplashLingeringPotions.UseStyleColors = true;
			this.SplashLingeringPotions.CheckedChanged += this.SplashLingeringPotionsToggled;
			this.ForeverLastingPotions.AutoSize = true;
			this.ForeverLastingPotions.BackColor = Color.Transparent;
			this.ForeverLastingPotions.Location = new Point(192, 111);
			this.ForeverLastingPotions.Name = "ForeverLastingPotions";
			this.ForeverLastingPotions.Size = new Size(124, 15);
			this.ForeverLastingPotions.Style = MetroColorStyle.Orange;
			this.ForeverLastingPotions.TabIndex = 180;
			this.ForeverLastingPotions.Tag = "Host";
			this.ForeverLastingPotions.Text = "Effects Last Forever";
			this.ForeverLastingPotions.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ForeverLastingPotions, "Potion effects will never run out.");
			this.ForeverLastingPotions.UseSelectable = true;
			this.ForeverLastingPotions.UseStyleColors = true;
			this.ForeverLastingPotions.CheckedChanged += this.ForeverLastingPotionsToggled;
			this.ItemOfUndying.AutoSize = true;
			this.ItemOfUndying.Location = new Point(379, 384);
			this.ItemOfUndying.Name = "ItemOfUndying";
			this.ItemOfUndying.Size = new Size(109, 15);
			this.ItemOfUndying.Style = MetroColorStyle.Orange;
			this.ItemOfUndying.TabIndex = 179;
			this.ItemOfUndying.Tag = "Host";
			this.ItemOfUndying.Text = "Item of Undying";
			this.ItemOfUndying.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ItemOfUndying, "Any item you hold will act as a Totem of Undying.");
			this.ItemOfUndying.UseSelectable = true;
			this.ItemOfUndying.UseStyleColors = true;
			this.ItemOfUndying.CheckedChanged += this.ItemOfUndyingToggled;
			this.NoDamage.AutoSize = true;
			this.NoDamage.Location = new Point(379, 363);
			this.NoDamage.Name = "NoDamage";
			this.NoDamage.Size = new Size(86, 15);
			this.NoDamage.Style = MetroColorStyle.Orange;
			this.NoDamage.TabIndex = 178;
			this.NoDamage.Tag = "Host";
			this.NoDamage.Text = "No Damage";
			this.NoDamage.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoDamage, "Disables all damage.");
			this.NoDamage.UseSelectable = true;
			this.NoDamage.UseStyleColors = true;
			this.NoDamage.CheckedChanged += this.NoDamageToggled;
			this.StyleExtender.SetApplyMetroTheme(this.WaterDownStrengthSlider, true);
			this.WaterDownStrengthSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.WaterDownStrengthSlider.DecimalPlaces = 3;
			this.WaterDownStrengthSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.WaterDownStrengthSlider.Location = new Point(694, 518);
			NumericUpDown waterDownStrengthSlider = this.WaterDownStrengthSlider;
			int[] array = new int[4];
			array[0] = 9999;
			waterDownStrengthSlider.Maximum = new decimal(array);
			this.WaterDownStrengthSlider.Name = "WaterDownStrengthSlider";
			this.WaterDownStrengthSlider.Size = new Size(87, 20);
			this.WaterDownStrengthSlider.TabIndex = 177;
			this.WaterDownStrengthSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.WaterDownStrengthSlider, "How much faster do we go down in water while\r\npressing crouch?");
			this.WaterDownStrengthSlider.Value = new decimal(new int[]
			{
				1285,
				0,
				0,
				196608
			});
			this.WaterDownStrengthSlider.ValueChanged += this.WaterDownStrengthSliderChanged;
			this.WaterDownStrengthSlider.Click += this.SliderClicked;
			this.WaterDownStrength.AutoSize = true;
			this.WaterDownStrength.FontWeight = MetroLabelWeight.Regular;
			this.WaterDownStrength.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.WaterDownStrength.Location = new Point(554, 519);
			this.WaterDownStrength.Name = "WaterDownStrength";
			this.WaterDownStrength.Size = new Size(135, 19);
			this.WaterDownStrength.Style = MetroColorStyle.Blue;
			this.WaterDownStrength.TabIndex = 176;
			this.WaterDownStrength.Tag = "NonHost";
			this.WaterDownStrength.Text = "Water Sink Strength:";
			this.WaterDownStrength.Theme = MetroThemeStyle.Dark;
			this.WaterDownStrength.UseStyleColors = true;
			this.breatheBox.FontSize = MetroComboBoxSize.Small;
			this.breatheBox.FontWeight = MetroComboBoxWeight.Light;
			this.breatheBox.FormattingEnabled = true;
			this.breatheBox.ItemHeight = 19;
			this.breatheBox.Items.AddRange(new object[]
			{
				"Air",
				"Lava",
				"Blocks",
				"Water",
				"All",
				"None"
			});
			this.breatheBox.Location = new Point(904, 468);
			this.breatheBox.Name = "breatheBox";
			this.breatheBox.Size = new Size(210, 25);
			this.breatheBox.TabIndex = 175;
			this.breatheBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.breatheBox, "What type of blocks do we breathe in?");
			this.breatheBox.UseSelectable = true;
			this.breatheBox.SelectedIndexChanged += this.BreatheBoxChanged;
			this.BreathingModeLbl.AutoSize = true;
			this.BreathingModeLbl.FontWeight = MetroLabelWeight.Regular;
			this.BreathingModeLbl.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.BreathingModeLbl.Location = new Point(787, 468);
			this.BreathingModeLbl.Name = "BreathingModeLbl";
			this.BreathingModeLbl.Size = new Size(111, 19);
			this.BreathingModeLbl.Style = MetroColorStyle.Orange;
			this.BreathingModeLbl.TabIndex = 174;
			this.BreathingModeLbl.Tag = "Host";
			this.BreathingModeLbl.Text = "Breathing Mode:";
			this.BreathingModeLbl.Theme = MetroThemeStyle.Dark;
			this.BreathingModeLbl.UseStyleColors = true;
			this.BreakBedrock.AutoSize = true;
			this.BreakBedrock.Location = new Point(379, 342);
			this.BreakBedrock.Name = "BreakBedrock";
			this.BreakBedrock.Size = new Size(98, 15);
			this.BreakBedrock.Style = MetroColorStyle.Blue;
			this.BreakBedrock.TabIndex = 172;
			this.BreakBedrock.Tag = "NonHost";
			this.BreakBedrock.Text = "Break Bedrock";
			this.BreakBedrock.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.BreakBedrock, "Allows you to destroy Bedrock in Survival mode.");
			this.BreakBedrock.UseSelectable = true;
			this.BreakBedrock.UseStyleColors = true;
			this.BreakBedrock.CheckedChanged += this.BreakBedrockToggled;
			this.SwimFast.AutoSize = true;
			this.SwimFast.Location = new Point(379, 321);
			this.SwimFast.Name = "SwimFast";
			this.SwimFast.Size = new Size(76, 15);
			this.SwimFast.Style = MetroColorStyle.Blue;
			this.SwimFast.TabIndex = 172;
			this.SwimFast.Tag = "NonHost";
			this.SwimFast.Text = "Swim Fast";
			this.SwimFast.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SwimFast, "Makes you swim a lot faster.");
			this.SwimFast.UseSelectable = true;
			this.SwimFast.UseStyleColors = true;
			this.SwimFast.CheckedChanged += this.SwimFastToggled;
			this.BreakAnything.AutoSize = true;
			this.BreakAnything.Location = new Point(379, 300);
			this.BreakAnything.Name = "BreakAnything";
			this.BreakAnything.Size = new Size(104, 15);
			this.BreakAnything.Style = MetroColorStyle.Blue;
			this.BreakAnything.TabIndex = 172;
			this.BreakAnything.Tag = "NonHost";
			this.BreakAnything.Text = "Break Anything";
			this.BreakAnything.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.BreakAnything, "Allows you to break any block (including Bedrock).");
			this.BreakAnything.UseSelectable = true;
			this.BreakAnything.UseStyleColors = true;
			this.BreakAnything.CheckedChanged += this.BreakAnythingToggled;
			this.AirJump.AutoSize = true;
			this.AirJump.Location = new Point(379, 279);
			this.AirJump.Name = "AirJump";
			this.AirJump.Size = new Size(70, 15);
			this.AirJump.Style = MetroColorStyle.Blue;
			this.AirJump.TabIndex = 171;
			this.AirJump.Tag = "NonHost";
			this.AirJump.Text = "Air Jump";
			this.AirJump.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AirJump, "Allows you to jump at any time, even while in the air.");
			this.AirJump.UseSelectable = true;
			this.AirJump.UseStyleColors = true;
			this.AirJump.CheckedChanged += this.AirJumpToggled;
			this.LeftHanded.AutoSize = true;
			this.LeftHanded.Location = new Point(379, 258);
			this.LeftHanded.Name = "LeftHanded";
			this.LeftHanded.Size = new Size(88, 15);
			this.LeftHanded.Style = MetroColorStyle.Blue;
			this.LeftHanded.TabIndex = 170;
			this.LeftHanded.Tag = "NonHost";
			this.LeftHanded.Text = "Left Handed";
			this.LeftHanded.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LeftHanded, "Makes you left-handed.");
			this.LeftHanded.UseSelectable = true;
			this.LeftHanded.UseStyleColors = true;
			this.LeftHanded.CheckedChanged += this.LeftHandedToggled;
			this.StyleExtender.SetApplyMetroTheme(this.MaxStackSlider, true);
			this.MaxStackSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.MaxStackSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.MaxStackSlider.Location = new Point(634, 492);
			NumericUpDown maxStackSlider = this.MaxStackSlider;
			int[] array2 = new int[4];
			array2[0] = 9999;
			maxStackSlider.Maximum = new decimal(array2);
			this.MaxStackSlider.Name = "MaxStackSlider";
			this.MaxStackSlider.Size = new Size(147, 20);
			this.MaxStackSlider.TabIndex = 169;
			this.MaxStackSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.MaxStackSlider, "How many items can we carry at once in a stack?");
			NumericUpDown maxStackSlider2 = this.MaxStackSlider;
			int[] array3 = new int[4];
			array3[0] = 64;
			maxStackSlider2.Value = new decimal(array3);
			this.MaxStackSlider.ValueChanged += this.MaxStackSliderChanged;
			this.MaxStack.AutoSize = true;
			this.MaxStack.FontWeight = MetroLabelWeight.Regular;
			this.MaxStack.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.MaxStack.Location = new Point(554, 493);
			this.MaxStack.Name = "MaxStack";
			this.MaxStack.Size = new Size(74, 19);
			this.MaxStack.Style = MetroColorStyle.Orange;
			this.MaxStack.TabIndex = 168;
			this.MaxStack.Tag = "Host";
			this.MaxStack.Text = "Max Stack:";
			this.MaxStack.Theme = MetroThemeStyle.Dark;
			this.MaxStack.UseStyleColors = true;
			this.UnlimitedEnchants.AutoSize = true;
			this.UnlimitedEnchants.Location = new Point(379, 237);
			this.UnlimitedEnchants.Name = "UnlimitedEnchants";
			this.UnlimitedEnchants.Size = new Size(126, 15);
			this.UnlimitedEnchants.Style = MetroColorStyle.Orange;
			this.UnlimitedEnchants.TabIndex = 167;
			this.UnlimitedEnchants.Tag = "Host";
			this.UnlimitedEnchants.Text = "Unlimited Enchants";
			this.UnlimitedEnchants.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UnlimitedEnchants, "Allows you to enchant items that already have been enchanted.");
			this.UnlimitedEnchants.UseSelectable = true;
			this.UnlimitedEnchants.UseStyleColors = true;
			this.UnlimitedEnchants.CheckedChanged += this.UnlimitedEnchantsToggled;
			this.EnchantmentEditorBtn.Location = new Point(749, 438);
			this.EnchantmentEditorBtn.Name = "EnchantmentEditorBtn";
			this.EnchantmentEditorBtn.Size = new Size(365, 25);
			this.EnchantmentEditorBtn.Style = MetroColorStyle.Blue;
			this.EnchantmentEditorBtn.TabIndex = 166;
			this.EnchantmentEditorBtn.Tag = "NonHost";
			this.EnchantmentEditorBtn.Text = "Enchantment Editor";
			this.EnchantmentEditorBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.EnchantmentEditorBtn, "Opens the Enchantment Editor");
			this.EnchantmentEditorBtn.UseSelectable = true;
			this.EnchantmentEditorBtn.UseStyleColors = true;
			this.EnchantmentEditorBtn.Click += this.EnchantmentEditorBtnClicked;
			this.Invisible.AutoSize = true;
			this.Invisible.Location = new Point(379, 216);
			this.Invisible.Name = "Invisible";
			this.Invisible.Size = new Size(66, 15);
			this.Invisible.Style = MetroColorStyle.Orange;
			this.Invisible.TabIndex = 161;
			this.Invisible.Tag = "Host";
			this.Invisible.Text = "Invisible";
			this.Invisible.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Invisible, "Makes you invisible.");
			this.Invisible.UseSelectable = true;
			this.Invisible.UseStyleColors = true;
			this.Invisible.CheckedChanged += this.InvisibleToggled;
			this.StyleExtender.SetApplyMetroTheme(this.XPLevelSlider, true);
			this.XPLevelSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.XPLevelSlider.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.XPLevelSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.XPLevelSlider.Location = new Point(623, 466);
			NumericUpDown xplevelSlider = this.XPLevelSlider;
			int[] array4 = new int[4];
			array4[0] = 99999999;
			xplevelSlider.Maximum = new decimal(array4);
			this.XPLevelSlider.Name = "XPLevelSlider";
			this.XPLevelSlider.Size = new Size(158, 20);
			this.XPLevelSlider.TabIndex = 160;
			this.XPLevelSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.XPLevelSlider, "What Level should we be?\r\n\r\n(Affects newest player in splitscreen)");
			this.XPLevelSlider.ValueChanged += this.XpLevelSliderChanged;
			this.StyleExtender.SetApplyMetroTheme(this.PotionAmplifierSlider, true);
			this.PotionAmplifierSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.PotionAmplifierSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.PotionAmplifierSlider.Increment = new decimal(new int[4]);
			this.PotionAmplifierSlider.Location = new Point(407, 597);
			NumericUpDown potionAmplifierSlider = this.PotionAmplifierSlider;
			int[] array5 = new int[4];
			array5[0] = 9999;
			potionAmplifierSlider.Maximum = new decimal(array5);
			this.PotionAmplifierSlider.Name = "PotionAmplifierSlider";
			this.PotionAmplifierSlider.Size = new Size(141, 20);
			this.PotionAmplifierSlider.TabIndex = 157;
			this.PotionAmplifierSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.PotionAmplifierSlider, "How much should potion effects be amplified by?");
			this.PotionAmplifierSlider.ValueChanged += this.PotionAmplifierSliderChanged;
			this.StyleExtender.SetApplyMetroTheme(this.FrictionSlider, true);
			this.FrictionSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.FrictionSlider.DecimalPlaces = 8;
			this.FrictionSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.FrictionSlider.Increment = new decimal(new int[]
			{
				10000000,
				0,
				0,
				524288
			});
			this.FrictionSlider.Location = new Point(355, 571);
			this.FrictionSlider.Minimum = new decimal(new int[]
			{
				100,
				0,
				0,
				int.MinValue
			});
			this.FrictionSlider.Name = "FrictionSlider";
			this.FrictionSlider.Size = new Size(193, 20);
			this.FrictionSlider.TabIndex = 147;
			this.FrictionSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.FrictionSlider, "How much friction do we have?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.FrictionSlider.Value = new decimal(new int[]
			{
				91000003,
				0,
				0,
				524288
			});
			this.FrictionSlider.ValueChanged += this.FrictionSliderChanged;
			this.FrictionSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.playerModelScaleSlider, true);
			this.playerModelScaleSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.playerModelScaleSlider.DecimalPlaces = 4;
			this.playerModelScaleSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.playerModelScaleSlider.Increment = new decimal(new int[]
			{
				1000,
				0,
				0,
				262144
			});
			this.playerModelScaleSlider.Location = new Point(424, 545);
			this.playerModelScaleSlider.Name = "playerModelScaleSlider";
			this.playerModelScaleSlider.Size = new Size(124, 20);
			this.playerModelScaleSlider.TabIndex = 142;
			this.playerModelScaleSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.playerModelScaleSlider, "How big (or small) should our player be?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.playerModelScaleSlider.Value = new decimal(new int[]
			{
				9375,
				0,
				0,
				262144
			});
			this.playerModelScaleSlider.ValueChanged += this.PlayerModelScaleSliderChanged;
			this.playerModelScaleSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.FieldOfViewSplitSlider, true);
			this.FieldOfViewSplitSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.FieldOfViewSplitSlider.DecimalPlaces = 3;
			this.FieldOfViewSplitSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.FieldOfViewSplitSlider.Increment = new decimal(new int[]
			{
				1,
				0,
				0,
				65536
			});
			this.FieldOfViewSplitSlider.Location = new Point(176, 597);
			NumericUpDown fieldOfViewSplitSlider = this.FieldOfViewSplitSlider;
			int[] array6 = new int[4];
			array6[0] = 4;
			fieldOfViewSplitSlider.Maximum = new decimal(array6);
			this.FieldOfViewSplitSlider.Name = "FieldOfViewSplitSlider";
			this.FieldOfViewSplitSlider.Size = new Size(110, 20);
			this.FieldOfViewSplitSlider.TabIndex = 145;
			this.FieldOfViewSplitSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.FieldOfViewSplitSlider, "How high should our FOV in splitscreen be?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.FieldOfViewSplitSlider.Value = new decimal(new int[]
			{
				7,
				0,
				0,
				65536
			});
			this.FieldOfViewSplitSlider.ValueChanged += this.FieldOfViewSplitSliderChanged;
			this.FieldOfViewSplitSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.RiptideFlyingSpeedSlider, true);
			this.RiptideFlyingSpeedSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.RiptideFlyingSpeedSlider.DecimalPlaces = 4;
			this.RiptideFlyingSpeedSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.RiptideFlyingSpeedSlider.Increment = new decimal(new int[]
			{
				1000,
				0,
				0,
				262144
			});
			this.RiptideFlyingSpeedSlider.Location = new Point(438, 467);
			NumericUpDown riptideFlyingSpeedSlider = this.RiptideFlyingSpeedSlider;
			int[] array7 = new int[4];
			array7[0] = 5;
			riptideFlyingSpeedSlider.Maximum = new decimal(array7);
			this.RiptideFlyingSpeedSlider.Minimum = new decimal(new int[]
			{
				5,
				0,
				0,
				int.MinValue
			});
			this.RiptideFlyingSpeedSlider.Name = "RiptideFlyingSpeedSlider";
			this.RiptideFlyingSpeedSlider.Size = new Size(110, 20);
			this.RiptideFlyingSpeedSlider.TabIndex = 125;
			this.RiptideFlyingSpeedSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.RiptideFlyingSpeedSlider, "How fast should the Riptide Enchentment go?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.RiptideFlyingSpeedSlider.Value = new decimal(new int[]
			{
				25,
				0,
				0,
				131072
			});
			this.RiptideFlyingSpeedSlider.ValueChanged += this.RiptideFlyingSpeedSliderChanged;
			this.RiptideFlyingSpeedSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.SprintingSpeedScaleSlider, true);
			this.SprintingSpeedScaleSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.SprintingSpeedScaleSlider.DecimalPlaces = 3;
			this.SprintingSpeedScaleSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.SprintingSpeedScaleSlider.Increment = new decimal(new int[]
			{
				1000,
				0,
				0,
				262144
			});
			this.SprintingSpeedScaleSlider.Location = new Point(433, 519);
			NumericUpDown sprintingSpeedScaleSlider = this.SprintingSpeedScaleSlider;
			int[] array8 = new int[4];
			array8[0] = 4;
			sprintingSpeedScaleSlider.Maximum = new decimal(array8);
			this.SprintingSpeedScaleSlider.Name = "SprintingSpeedScaleSlider";
			this.SprintingSpeedScaleSlider.Size = new Size(115, 20);
			this.SprintingSpeedScaleSlider.TabIndex = 128;
			this.SprintingSpeedScaleSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.SprintingSpeedScaleSlider, "How fast can the player sprint?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.SprintingSpeedScaleSlider.Value = new decimal(new int[]
			{
				1875,
				0,
				0,
				196608
			});
			this.SprintingSpeedScaleSlider.ValueChanged += this.SprintingSpeedScaleSliderChanged;
			this.SprintingSpeedScaleSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.EnchantmentLevelSlider, true);
			this.EnchantmentLevelSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.EnchantmentLevelSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.EnchantmentLevelSlider.Location = new Point(139, 467);
			NumericUpDown enchantmentLevelSlider = this.EnchantmentLevelSlider;
			int[] array9 = new int[4];
			array9[0] = 512;
			enchantmentLevelSlider.Maximum = new decimal(array9);
			this.EnchantmentLevelSlider.Name = "EnchantmentLevelSlider";
			this.EnchantmentLevelSlider.Size = new Size(147, 20);
			this.EnchantmentLevelSlider.TabIndex = 117;
			this.EnchantmentLevelSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.EnchantmentLevelSlider, "What enchantment level should the currently held item have?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.EnchantmentLevelSlider.ValueChanged += this.EnchantmentLevelSliderChanged;
			this.StyleExtender.SetApplyMetroTheme(this.WalkingSpeedScaleSlider, true);
			this.WalkingSpeedScaleSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.WalkingSpeedScaleSlider.DecimalPlaces = 3;
			this.WalkingSpeedScaleSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.WalkingSpeedScaleSlider.Increment = new decimal(new int[]
			{
				1000,
				0,
				0,
				262144
			});
			this.WalkingSpeedScaleSlider.Location = new Point(440, 493);
			NumericUpDown walkingSpeedScaleSlider = this.WalkingSpeedScaleSlider;
			int[] array10 = new int[4];
			array10[0] = 4;
			walkingSpeedScaleSlider.Maximum = new decimal(array10);
			this.WalkingSpeedScaleSlider.Name = "WalkingSpeedScaleSlider";
			this.WalkingSpeedScaleSlider.Size = new Size(108, 20);
			this.WalkingSpeedScaleSlider.TabIndex = 131;
			this.WalkingSpeedScaleSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.WalkingSpeedScaleSlider, "How fast can the player walk?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.WalkingSpeedScaleSlider.Value = new decimal(new int[]
			{
				163,
				0,
				0,
				196608
			});
			this.WalkingSpeedScaleSlider.ValueChanged += this.WalkingSpeedScaleChanged;
			this.WalkingSpeedScaleSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.ReachSlider, true);
			this.ReachSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.ReachSlider.DecimalPlaces = 1;
			this.ReachSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.ReachSlider.Increment = new decimal(new int[]
			{
				1,
				0,
				0,
				65536
			});
			this.ReachSlider.Location = new Point(58, 519);
			NumericUpDown reachSlider = this.ReachSlider;
			int[] array11 = new int[4];
			array11[0] = 512;
			reachSlider.Maximum = new decimal(array11);
			this.ReachSlider.Minimum = new decimal(new int[]
			{
				512,
				0,
				0,
				int.MinValue
			});
			this.ReachSlider.Name = "ReachSlider";
			this.ReachSlider.Size = new Size(228, 20);
			this.ReachSlider.TabIndex = 121;
			this.ReachSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.ReachSlider, "How far can the player reach?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.ReachSlider.Value = new decimal(new int[]
			{
				45,
				0,
				0,
				65536
			});
			this.ReachSlider.ValueChanged += this.ReachSliderChanged;
			this.ReachSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.JumpHeightSlider, true);
			this.JumpHeightSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.JumpHeightSlider.DecimalPlaces = 3;
			this.JumpHeightSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.JumpHeightSlider.Increment = new decimal(new int[]
			{
				5,
				0,
				0,
				196608
			});
			this.JumpHeightSlider.Location = new Point(100, 493);
			NumericUpDown jumpHeightSlider = this.JumpHeightSlider;
			int[] array12 = new int[4];
			array12[0] = 10;
			jumpHeightSlider.Maximum = new decimal(array12);
			this.JumpHeightSlider.Minimum = new decimal(new int[]
			{
				10,
				0,
				0,
				int.MinValue
			});
			this.JumpHeightSlider.Name = "JumpHeightSlider";
			this.JumpHeightSlider.Size = new Size(186, 20);
			this.JumpHeightSlider.TabIndex = 119;
			this.JumpHeightSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.JumpHeightSlider, "How high should the player jump?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.JumpHeightSlider.Value = new decimal(new int[]
			{
				420,
				0,
				0,
				196608
			});
			this.JumpHeightSlider.ValueChanged += this.JumpHeightSliderChanged;
			this.JumpHeightSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.FieldOfViewSlider, true);
			this.FieldOfViewSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.FieldOfViewSlider.DecimalPlaces = 3;
			this.FieldOfViewSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.FieldOfViewSlider.Increment = new decimal(new int[]
			{
				1,
				0,
				0,
				65536
			});
			this.FieldOfViewSlider.Location = new Point(99, 571);
			NumericUpDown fieldOfViewSlider = this.FieldOfViewSlider;
			int[] array13 = new int[4];
			array13[0] = 4;
			fieldOfViewSlider.Maximum = new decimal(array13);
			this.FieldOfViewSlider.Name = "FieldOfViewSlider";
			this.FieldOfViewSlider.Size = new Size(187, 20);
			this.FieldOfViewSlider.TabIndex = 137;
			this.FieldOfViewSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.FieldOfViewSlider, "How high should our FOV be?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places\r\n");
			this.FieldOfViewSlider.Value = new decimal(new int[]
			{
				1875,
				0,
				0,
				196608
			});
			this.FieldOfViewSlider.ValueChanged += this.FieldOfViewSliderChanged;
			this.FieldOfViewSlider.Click += this.SliderClicked;
			this.StyleExtender.SetApplyMetroTheme(this.HitBoxScaleSlider, true);
			this.HitBoxScaleSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.HitBoxScaleSlider.DecimalPlaces = 1;
			this.HitBoxScaleSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.HitBoxScaleSlider.Increment = new decimal(new int[]
			{
				1,
				0,
				0,
				65536
			});
			this.HitBoxScaleSlider.Location = new Point(96, 545);
			this.HitBoxScaleSlider.Name = "HitBoxScaleSlider";
			this.HitBoxScaleSlider.Size = new Size(190, 20);
			this.HitBoxScaleSlider.TabIndex = 134;
			this.HitBoxScaleSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.HitBoxScaleSlider, "How big should entity hitboxes be?\r\n\r\nCTRL + Click = Increase Decimal Places\r\nALT + Click = Decrease Decimal Places");
			this.HitBoxScaleSlider.Value = new decimal(new int[]
			{
				5,
				0,
				0,
				65536
			});
			this.HitBoxScaleSlider.ValueChanged += this.HitboxSliderChanged;
			this.HitBoxScaleSlider.Click += this.SliderClicked;
			this.XPLevel.AutoSize = true;
			this.XPLevel.FontWeight = MetroLabelWeight.Regular;
			this.XPLevel.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.XPLevel.Location = new Point(554, 467);
			this.XPLevel.Name = "XPLevel";
			this.XPLevel.Size = new Size(63, 19);
			this.XPLevel.Style = MetroColorStyle.Orange;
			this.XPLevel.TabIndex = 159;
			this.XPLevel.Tag = "Host";
			this.XPLevel.Text = "XP Level:";
			this.XPLevel.Theme = MetroThemeStyle.Dark;
			this.XPLevel.UseStyleColors = true;
			this.PlayerOptionsBtn.Location = new Point(378, 438);
			this.PlayerOptionsBtn.Name = "PlayerOptionsBtn";
			this.PlayerOptionsBtn.Size = new Size(365, 25);
			this.PlayerOptionsBtn.Style = MetroColorStyle.Blue;
			this.PlayerOptionsBtn.TabIndex = 158;
			this.PlayerOptionsBtn.Tag = "NonHost";
			this.PlayerOptionsBtn.Text = "Player Options";
			this.PlayerOptionsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.PlayerOptionsBtn, "Opens the Player Options window where you can modify Player Options");
			this.PlayerOptionsBtn.UseSelectable = true;
			this.PlayerOptionsBtn.UseStyleColors = true;
			this.PlayerOptionsBtn.Click += this.PlayerOptionsBtnClicked;
			this.PotionAmplifier.AutoSize = true;
			this.PotionAmplifier.FontWeight = MetroLabelWeight.Regular;
			this.PotionAmplifier.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.PotionAmplifier.Location = new Point(292, 597);
			this.PotionAmplifier.Name = "PotionAmplifier";
			this.PotionAmplifier.Size = new Size(110, 19);
			this.PotionAmplifier.Style = MetroColorStyle.Orange;
			this.PotionAmplifier.TabIndex = 156;
			this.PotionAmplifier.Tag = "Host";
			this.PotionAmplifier.Text = "Potion Amplifier:";
			this.PotionAmplifier.Theme = MetroThemeStyle.Dark;
			this.PotionAmplifier.UseStyleColors = true;
			this.NoSlowDowns.AutoSize = true;
			this.NoSlowDowns.Location = new Point(379, 195);
			this.NoSlowDowns.Name = "NoSlowDowns";
			this.NoSlowDowns.Size = new Size(97, 15);
			this.NoSlowDowns.Style = MetroColorStyle.Blue;
			this.NoSlowDowns.TabIndex = 155;
			this.NoSlowDowns.Tag = "NonHost";
			this.NoSlowDowns.Text = "No Slowdown";
			this.NoSlowDowns.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoSlowDowns, "Disables movement penalties, such as:\r\n\r\nEating\r\nDrinking\r\nDrawing Bow\r\nDrawing Trident\r\nSoul Sand");
			this.NoSlowDowns.UseSelectable = true;
			this.NoSlowDowns.UseStyleColors = true;
			this.NoSlowDowns.CheckedChanged += this.NoSlowDownsToggled;
			this.ESP.AutoSize = true;
			this.ESP.Location = new Point(379, 174);
			this.ESP.Name = "ESP";
			this.ESP.Size = new Size(42, 15);
			this.ESP.Style = MetroColorStyle.Blue;
			this.ESP.TabIndex = 154;
			this.ESP.Tag = "NonHost";
			this.ESP.Text = "ESP";
			this.ESP.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ESP, "Makes player name tags cover player models.");
			this.ESP.UseSelectable = true;
			this.ESP.UseStyleColors = true;
			this.ESP.CheckedChanged += this.EspToggled;
			this.AlwaysInWater.AutoSize = true;
			this.AlwaysInWater.Location = new Point(379, 153);
			this.AlwaysInWater.Name = "AlwaysInWater";
			this.AlwaysInWater.Size = new Size(107, 15);
			this.AlwaysInWater.Style = MetroColorStyle.Blue;
			this.AlwaysInWater.TabIndex = 153;
			this.AlwaysInWater.Tag = "NonHost";
			this.AlwaysInWater.Text = "Always in Water";
			this.AlwaysInWater.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysInWater, "Whether you'll always be considered being inside water.");
			this.AlwaysInWater.UseSelectable = true;
			this.AlwaysInWater.UseStyleColors = true;
			this.AlwaysInWater.CheckedChanged += this.AlwaysInWaterToggled;
			this.LevelX.AutoSize = true;
			this.LevelX.Location = new Point(379, 132);
			this.LevelX.Name = "LevelX";
			this.LevelX.Size = new Size(60, 15);
			this.LevelX.Style = MetroColorStyle.Orange;
			this.LevelX.TabIndex = 152;
			this.LevelX.Tag = "Host";
			this.LevelX.Text = "Level X";
			this.LevelX.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LevelX, "Displays your XP Level as 'X'.");
			this.LevelX.UseSelectable = true;
			this.LevelX.UseStyleColors = true;
			this.LevelX.CheckedChanged += this.LevelXToggled;
			this.SeeThroughBlocks.AutoSize = true;
			this.SeeThroughBlocks.Location = new Point(379, 111);
			this.SeeThroughBlocks.Name = "SeeThroughBlocks";
			this.SeeThroughBlocks.Size = new Size(127, 15);
			this.SeeThroughBlocks.Style = MetroColorStyle.Blue;
			this.SeeThroughBlocks.TabIndex = 151;
			this.SeeThroughBlocks.Tag = "NonHost";
			this.SeeThroughBlocks.Text = "See Through Blocks";
			this.SeeThroughBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SeeThroughBlocks, "Allows you to see through the inside of blocks (instead of a fullscreen texture).");
			this.SeeThroughBlocks.UseSelectable = true;
			this.SeeThroughBlocks.UseStyleColors = true;
			this.SeeThroughBlocks.CheckedChanged += this.SeeThroughBlocksToggled;
			this.AlwaysInLava.AutoSize = true;
			this.AlwaysInLava.Location = new Point(379, 90);
			this.AlwaysInLava.Name = "AlwaysInLava";
			this.AlwaysInLava.Size = new Size(100, 15);
			this.AlwaysInLava.Style = MetroColorStyle.Blue;
			this.AlwaysInLava.TabIndex = 27;
			this.AlwaysInLava.Tag = "NonHost";
			this.AlwaysInLava.Text = "Always in Lava";
			this.AlwaysInLava.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysInLava, "Whether you'll always be considered\r\nin lava");
			this.AlwaysInLava.UseSelectable = true;
			this.AlwaysInLava.UseStyleColors = true;
			this.AlwaysInLava.CheckedChanged += this.AlwaysInLavaToggled;
			this.HideBlocks.AutoSize = true;
			this.HideBlocks.Location = new Point(379, 69);
			this.HideBlocks.Name = "HideBlocks";
			this.HideBlocks.Size = new Size(85, 15);
			this.HideBlocks.Style = MetroColorStyle.Blue;
			this.HideBlocks.TabIndex = 150;
			this.HideBlocks.Tag = "NonHost";
			this.HideBlocks.Text = "Hide Blocks";
			this.HideBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.HideBlocks, "Hides the majority of blocks, excluding chests, liquid and others.");
			this.HideBlocks.UseSelectable = true;
			this.HideBlocks.UseStyleColors = true;
			this.HideBlocks.CheckedChanged += this.HideBlocksToggled;
			this.UnderwaterEffects.AutoSize = true;
			this.UnderwaterEffects.Location = new Point(380, 48);
			this.UnderwaterEffects.Name = "UnderwaterEffects";
			this.UnderwaterEffects.Size = new Size(171, 15);
			this.UnderwaterEffects.Style = MetroColorStyle.Blue;
			this.UnderwaterEffects.TabIndex = 149;
			this.UnderwaterEffects.Tag = "NonHost";
			this.UnderwaterEffects.Text = "Underwater Effects (Default)";
			this.UnderwaterEffects.Theme = MetroThemeStyle.Dark;
			this.UnderwaterEffects.ThreeState = true;
			this.ToolTipManager.SetToolTip(this.UnderwaterEffects, "Toggles Underwater Effects.");
			this.UnderwaterEffects.UseSelectable = true;
			this.UnderwaterEffects.UseStyleColors = true;
			this.UnderwaterEffects.CheckStateChanged += this.UnderwaterEffectsToggled;
			this.EnchantmentLevel.AutoSize = true;
			this.EnchantmentLevel.FontWeight = MetroLabelWeight.Regular;
			this.EnchantmentLevel.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.EnchantmentLevel.Location = new Point(5, 467);
			this.EnchantmentLevel.Name = "EnchantmentLevel";
			this.EnchantmentLevel.Size = new Size(128, 19);
			this.EnchantmentLevel.Style = MetroColorStyle.Orange;
			this.EnchantmentLevel.TabIndex = 116;
			this.EnchantmentLevel.Tag = "Host";
			this.EnchantmentLevel.Text = "Enchantment Level:";
			this.EnchantmentLevel.Theme = MetroThemeStyle.Dark;
			this.EnchantmentLevel.UseStyleColors = true;
			this.Friction.AutoSize = true;
			this.Friction.FontWeight = MetroLabelWeight.Regular;
			this.Friction.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.Friction.Location = new Point(292, 571);
			this.Friction.Name = "Friction";
			this.Friction.Size = new Size(57, 19);
			this.Friction.Style = MetroColorStyle.Blue;
			this.Friction.TabIndex = 146;
			this.Friction.Tag = "NonHost";
			this.Friction.Text = "Friction:";
			this.Friction.Theme = MetroThemeStyle.Dark;
			this.Friction.UseStyleColors = true;
			this.GodModeAll.AutoSize = true;
			this.GodModeAll.Location = new Point(379, 27);
			this.GodModeAll.Name = "GodModeAll";
			this.GodModeAll.Size = new Size(104, 15);
			this.GodModeAll.Style = MetroColorStyle.Orange;
			this.GodModeAll.TabIndex = 148;
			this.GodModeAll.Tag = "Host";
			this.GodModeAll.Text = "God Mode (All)";
			this.GodModeAll.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.GodModeAll, "Enables God Mode for all entities.");
			this.GodModeAll.UseSelectable = true;
			this.GodModeAll.UseStyleColors = true;
			this.GodModeAll.CheckedChanged += this.GodModeAllToggled;
			this.FieldofViewSplitscreen.AutoSize = true;
			this.FieldofViewSplitscreen.FontWeight = MetroLabelWeight.Regular;
			this.FieldofViewSplitscreen.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.FieldofViewSplitscreen.Location = new Point(4, 597);
			this.FieldofViewSplitscreen.Name = "FieldofViewSplitscreen";
			this.FieldofViewSplitscreen.Size = new Size(166, 19);
			this.FieldofViewSplitscreen.Style = MetroColorStyle.Blue;
			this.FieldofViewSplitscreen.TabIndex = 144;
			this.FieldofViewSplitscreen.Tag = "NonHost";
			this.FieldofViewSplitscreen.Text = "Field of View (Splitscreen):";
			this.FieldofViewSplitscreen.Theme = MetroThemeStyle.Dark;
			this.FieldofViewSplitscreen.UseStyleColors = true;
			this.RiptideFlyingSpeed.AutoSize = true;
			this.RiptideFlyingSpeed.FontWeight = MetroLabelWeight.Regular;
			this.RiptideFlyingSpeed.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.RiptideFlyingSpeed.Location = new Point(292, 467);
			this.RiptideFlyingSpeed.Name = "RiptideFlyingSpeed";
			this.RiptideFlyingSpeed.Size = new Size(140, 19);
			this.RiptideFlyingSpeed.Style = MetroColorStyle.Blue;
			this.RiptideFlyingSpeed.TabIndex = 124;
			this.RiptideFlyingSpeed.Tag = "NonHost";
			this.RiptideFlyingSpeed.Text = "Riptide (flying) Speed:";
			this.RiptideFlyingSpeed.Theme = MetroThemeStyle.Dark;
			this.RiptideFlyingSpeed.UseStyleColors = true;
			this.PlayerModelScale.AutoSize = true;
			this.PlayerModelScale.FontWeight = MetroLabelWeight.Regular;
			this.PlayerModelScale.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.PlayerModelScale.Location = new Point(292, 545);
			this.PlayerModelScale.Name = "PlayerModelScale";
			this.PlayerModelScale.Size = new Size(126, 19);
			this.PlayerModelScale.Style = MetroColorStyle.Blue;
			this.PlayerModelScale.TabIndex = 141;
			this.PlayerModelScale.Tag = "NonHost";
			this.PlayerModelScale.Text = "Player Model Scale:";
			this.PlayerModelScale.Theme = MetroThemeStyle.Dark;
			this.PlayerModelScale.UseStyleColors = true;
			this.JumpHeight.AutoSize = true;
			this.JumpHeight.FontWeight = MetroLabelWeight.Regular;
			this.JumpHeight.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.JumpHeight.Location = new Point(4, 493);
			this.JumpHeight.Name = "JumpHeight";
			this.JumpHeight.Size = new Size(90, 19);
			this.JumpHeight.Style = MetroColorStyle.Blue;
			this.JumpHeight.TabIndex = 118;
			this.JumpHeight.Tag = "NonHost";
			this.JumpHeight.Text = "Jump Height:";
			this.JumpHeight.Theme = MetroThemeStyle.Dark;
			this.JumpHeight.UseStyleColors = true;
			this.WalkingSpeedScale.AutoSize = true;
			this.WalkingSpeedScale.FontWeight = MetroLabelWeight.Regular;
			this.WalkingSpeedScale.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.WalkingSpeedScale.Location = new Point(292, 493);
			this.WalkingSpeedScale.Name = "WalkingSpeedScale";
			this.WalkingSpeedScale.Size = new Size(136, 19);
			this.WalkingSpeedScale.Style = MetroColorStyle.Blue;
			this.WalkingSpeedScale.TabIndex = 127;
			this.WalkingSpeedScale.Tag = "NonHost";
			this.WalkingSpeedScale.Text = "Walking Speed Scale:";
			this.WalkingSpeedScale.Theme = MetroThemeStyle.Dark;
			this.WalkingSpeedScale.UseStyleColors = true;
			this.GodMode.AutoSize = true;
			this.GodMode.Location = new Point(379, 6);
			this.GodMode.Name = "GodMode";
			this.GodMode.Size = new Size(109, 15);
			this.GodMode.Style = MetroColorStyle.Orange;
			this.GodMode.TabIndex = 143;
			this.GodMode.Tag = "Host";
			this.GodMode.Text = "God Mode (Self)";
			this.GodMode.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.GodMode, "Enables God Mode for local players only.");
			this.GodMode.UseSelectable = true;
			this.GodMode.UseStyleColors = true;
			this.GodMode.CheckedChanged += this.GodModeToggled;
			this.Reach.AutoSize = true;
			this.Reach.FontWeight = MetroLabelWeight.Regular;
			this.Reach.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.Reach.Location = new Point(4, 519);
			this.Reach.Name = "Reach";
			this.Reach.Size = new Size(48, 19);
			this.Reach.Style = MetroColorStyle.Blue;
			this.Reach.TabIndex = 120;
			this.Reach.Tag = "NonHost";
			this.Reach.Text = "Reach:";
			this.Reach.Theme = MetroThemeStyle.Dark;
			this.Reach.UseStyleColors = true;
			this.SprintingSpeedScale.AutoSize = true;
			this.SprintingSpeedScale.FontWeight = MetroLabelWeight.Regular;
			this.SprintingSpeedScale.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.SprintingSpeedScale.Location = new Point(292, 519);
			this.SprintingSpeedScale.Name = "SprintingSpeedScale";
			this.SprintingSpeedScale.Size = new Size(142, 19);
			this.SprintingSpeedScale.Style = MetroColorStyle.Blue;
			this.SprintingSpeedScale.TabIndex = 130;
			this.SprintingSpeedScale.Tag = "NonHost";
			this.SprintingSpeedScale.Text = "Sprinting Speed Scale:";
			this.SprintingSpeedScale.Theme = MetroThemeStyle.Dark;
			this.SprintingSpeedScale.UseStyleColors = true;
			this.DeadMauFiveMode.AutoSize = true;
			this.DeadMauFiveMode.Location = new Point(192, 405);
			this.DeadMauFiveMode.Name = "DeadMauFiveMode";
			this.DeadMauFiveMode.Size = new Size(83, 15);
			this.DeadMauFiveMode.Style = MetroColorStyle.Orange;
			this.DeadMauFiveMode.TabIndex = 140;
			this.DeadMauFiveMode.Tag = "Host";
			this.DeadMauFiveMode.Text = "Mouse Ears";
			this.DeadMauFiveMode.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DeadMauFiveMode, "Apply deadmau5 ears to your player when holding an item.");
			this.DeadMauFiveMode.UseSelectable = true;
			this.DeadMauFiveMode.UseStyleColors = true;
			this.DeadMauFiveMode.CheckedChanged += this.DeadMauFiveModeToggled;
			this.ArmorHUD.AutoSize = true;
			this.ArmorHUD.Location = new Point(192, 384);
			this.ArmorHUD.Name = "ArmorHUD";
			this.ArmorHUD.Size = new Size(85, 15);
			this.ArmorHUD.Style = MetroColorStyle.Blue;
			this.ArmorHUD.TabIndex = 138;
			this.ArmorHUD.Tag = "NonHost";
			this.ArmorHUD.Text = "Armor HUD";
			this.ArmorHUD.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ArmorHUD, "Displays a HUD Element of your currently equipped armour on the left side.");
			this.ArmorHUD.UseSelectable = true;
			this.ArmorHUD.UseStyleColors = true;
			this.ArmorHUD.CheckedChanged += this.ArmorHudToggled;
			this.TakeEverythingAnywhere.AutoSize = true;
			this.TakeEverythingAnywhere.Location = new Point(192, 363);
			this.TakeEverythingAnywhere.Name = "TakeEverythingAnywhere";
			this.TakeEverythingAnywhere.Size = new Size(163, 15);
			this.TakeEverythingAnywhere.Style = MetroColorStyle.Blue;
			this.TakeEverythingAnywhere.TabIndex = 25;
			this.TakeEverythingAnywhere.Tag = "NonHost";
			this.TakeEverythingAnywhere.Text = "Take Everything Anywhere";
			this.TakeEverythingAnywhere.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.TakeEverythingAnywhere, "Permanently enables the 'Take Everything' option in containers, even if it is off.");
			this.TakeEverythingAnywhere.UseSelectable = true;
			this.TakeEverythingAnywhere.UseStyleColors = true;
			this.TakeEverythingAnywhere.CheckedChanged += this.TakeEverythingAnywhereToggled;
			this.FieldOfView.AutoSize = true;
			this.FieldOfView.FontWeight = MetroLabelWeight.Regular;
			this.FieldOfView.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.FieldOfView.Location = new Point(4, 571);
			this.FieldOfView.Name = "FieldOfView";
			this.FieldOfView.Size = new Size(89, 19);
			this.FieldOfView.Style = MetroColorStyle.Blue;
			this.FieldOfView.TabIndex = 136;
			this.FieldOfView.Tag = "NonHost";
			this.FieldOfView.Text = "Field of View:";
			this.FieldOfView.Theme = MetroThemeStyle.Dark;
			this.FieldOfView.UseStyleColors = true;
			this.HiddenGameModesUnlocked.AutoSize = true;
			this.HiddenGameModesUnlocked.Location = new Point(192, 342);
			this.HiddenGameModesUnlocked.Name = "HiddenGameModesUnlocked";
			this.HiddenGameModesUnlocked.Size = new Size(185, 15);
			this.HiddenGameModesUnlocked.Style = MetroColorStyle.Blue;
			this.HiddenGameModesUnlocked.TabIndex = 135;
			this.HiddenGameModesUnlocked.Tag = "NonHost";
			this.HiddenGameModesUnlocked.Text = "Hidden Gamemodes Unlocked";
			this.HiddenGameModesUnlocked.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.HiddenGameModesUnlocked, "Unlocks hidden gamemodes (such as Lobby or Spectator).\r\nThey can be switched in-game using Host Privileges.");
			this.HiddenGameModesUnlocked.UseSelectable = true;
			this.HiddenGameModesUnlocked.UseStyleColors = true;
			this.HiddenGameModesUnlocked.CheckedChanged += this.HiddenGameModesUnlockedToggled;
			this.HitBoxScale.AutoSize = true;
			this.HitBoxScale.FontWeight = MetroLabelWeight.Regular;
			this.HitBoxScale.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.HitBoxScale.Location = new Point(4, 545);
			this.HitBoxScale.Name = "HitBoxScale";
			this.HitBoxScale.Size = new Size(86, 19);
			this.HitBoxScale.Style = MetroColorStyle.Blue;
			this.HitBoxScale.TabIndex = 133;
			this.HitBoxScale.Tag = "NonHost";
			this.HitBoxScale.Text = "Hitbox Scale:";
			this.HitBoxScale.Theme = MetroThemeStyle.Dark;
			this.HitBoxScale.UseStyleColors = true;
			this.CraftingTableAnywhere.AutoSize = true;
			this.CraftingTableAnywhere.Location = new Point(192, 321);
			this.CraftingTableAnywhere.Name = "CraftingTableAnywhere";
			this.CraftingTableAnywhere.Size = new Size(154, 15);
			this.CraftingTableAnywhere.Style = MetroColorStyle.Blue;
			this.CraftingTableAnywhere.TabIndex = 132;
			this.CraftingTableAnywhere.Tag = "NonHost";
			this.CraftingTableAnywhere.Text = "Crafting Table Anywhere";
			this.CraftingTableAnywhere.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CraftingTableAnywhere, "Allows you to use the 3x3 crafting menu anywhere, without needing a crafting table.");
			this.CraftingTableAnywhere.UseSelectable = true;
			this.CraftingTableAnywhere.UseStyleColors = true;
			this.CraftingTableAnywhere.CheckedChanged += this.CraftingTableAnywhereToggled;
			this.VisibleHitboxes.AutoSize = true;
			this.VisibleHitboxes.Location = new Point(192, 300);
			this.VisibleHitboxes.Name = "VisibleHitboxes";
			this.VisibleHitboxes.Size = new Size(106, 15);
			this.VisibleHitboxes.Style = MetroColorStyle.Blue;
			this.VisibleHitboxes.TabIndex = 129;
			this.VisibleHitboxes.Tag = "NonHost";
			this.VisibleHitboxes.Text = "Visible Hitboxes";
			this.VisibleHitboxes.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.VisibleHitboxes, "Hitboxes on entities will be visible.");
			this.VisibleHitboxes.UseSelectable = true;
			this.VisibleHitboxes.UseStyleColors = true;
			this.VisibleHitboxes.CheckedChanged += this.VisibleHitboxesToggled;
			this.NnidEditorBtn.Location = new Point(7, 438);
			this.NnidEditorBtn.Name = "NnidEditorBtn";
			this.NnidEditorBtn.Size = new Size(365, 25);
			this.NnidEditorBtn.Style = MetroColorStyle.Blue;
			this.NnidEditorBtn.TabIndex = 126;
			this.NnidEditorBtn.Tag = "NonHost";
			this.NnidEditorBtn.Text = "NNID Editor";
			this.NnidEditorBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NnidEditorBtn, "Opens the NNID Editor.");
			this.NnidEditorBtn.UseSelectable = true;
			this.NnidEditorBtn.UseStyleColors = true;
			this.NnidEditorBtn.Click += this.NnidEditorBtnClicked;
			this.InsaneCriticalHits.AutoSize = true;
			this.InsaneCriticalHits.BackColor = Color.Transparent;
			this.InsaneCriticalHits.Location = new Point(192, 216);
			this.InsaneCriticalHits.Name = "InsaneCriticalHits";
			this.InsaneCriticalHits.Size = new Size(121, 15);
			this.InsaneCriticalHits.Style = MetroColorStyle.Orange;
			this.InsaneCriticalHits.TabIndex = 112;
			this.InsaneCriticalHits.Tag = "Host";
			this.InsaneCriticalHits.Text = "Insane Critical Hits";
			this.InsaneCriticalHits.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InsaneCriticalHits, "Critical hits will deal massive amounts of damage.");
			this.InsaneCriticalHits.UseSelectable = true;
			this.InsaneCriticalHits.UseStyleColors = true;
			this.InsaneCriticalHits.CheckedChanged += this.InsaneCriticalHitsToggled;
			this.AlwaysSwimming.AutoSize = true;
			this.AlwaysSwimming.Location = new Point(192, 236);
			this.AlwaysSwimming.Name = "AlwaysSwimming";
			this.AlwaysSwimming.Size = new Size(120, 15);
			this.AlwaysSwimming.Style = MetroColorStyle.Orange;
			this.AlwaysSwimming.TabIndex = 109;
			this.AlwaysSwimming.Tag = "Host";
			this.AlwaysSwimming.Text = "Always Swimming";
			this.AlwaysSwimming.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysSwimming, "Always acts like you're swimming underwater.");
			this.AlwaysSwimming.UseSelectable = true;
			this.AlwaysSwimming.UseStyleColors = true;
			this.AlwaysSwimming.CheckedChanged += this.AlwaysSwimmingToggled;
			this.InfiniteRiptide.AutoSize = true;
			this.InfiniteRiptide.Location = new Point(192, 279);
			this.InfiniteRiptide.Name = "InfiniteRiptide";
			this.InfiniteRiptide.Size = new Size(116, 15);
			this.InfiniteRiptide.Style = MetroColorStyle.Blue;
			this.InfiniteRiptide.TabIndex = 108;
			this.InfiniteRiptide.Tag = "NonHost";
			this.InfiniteRiptide.Text = "Riptide Anywhere";
			this.InfiniteRiptide.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InfiniteRiptide, "Allows you to use the Riptide enchantment outside of water.");
			this.InfiniteRiptide.UseSelectable = true;
			this.InfiniteRiptide.UseStyleColors = true;
			this.InfiniteRiptide.CheckedChanged += this.InfiniteRiptideToggled;
			this.FullRotation.AutoSize = true;
			this.FullRotation.Location = new Point(7, 342);
			this.FullRotation.Name = "FullRotation";
			this.FullRotation.Size = new Size(90, 15);
			this.FullRotation.Style = MetroColorStyle.Blue;
			this.FullRotation.TabIndex = 107;
			this.FullRotation.Tag = "NonHost";
			this.FullRotation.Text = "Full Rotation";
			this.FullRotation.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.FullRotation, "Allows you to look vertically further than just up and down.");
			this.FullRotation.UseSelectable = true;
			this.FullRotation.UseStyleColors = true;
			this.FullRotation.CheckedChanged += this.FullRotationToggled;
			this.AlwaysDamagedPlayers.AutoSize = true;
			this.AlwaysDamagedPlayers.Location = new Point(192, 258);
			this.AlwaysDamagedPlayers.Name = "AlwaysDamagedPlayers";
			this.AlwaysDamagedPlayers.Size = new Size(114, 15);
			this.AlwaysDamagedPlayers.Style = MetroColorStyle.Orange;
			this.AlwaysDamagedPlayers.TabIndex = 106;
			this.AlwaysDamagedPlayers.Tag = "Host";
			this.AlwaysDamagedPlayers.Text = "Always Damaged";
			this.AlwaysDamagedPlayers.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysDamagedPlayers, "Always damages everything, as if you were falling in the void.");
			this.AlwaysDamagedPlayers.UseSelectable = true;
			this.AlwaysDamagedPlayers.UseStyleColors = true;
			this.AlwaysDamagedPlayers.CheckedChanged += this.AlwaysDamagedPlayersToggled;
			this.InfiniteItems.AutoSize = true;
			this.InfiniteItems.Location = new Point(192, 195);
			this.InfiniteItems.Name = "InfiniteItems";
			this.InfiniteItems.Size = new Size(92, 15);
			this.InfiniteItems.Style = MetroColorStyle.Orange;
			this.InfiniteItems.TabIndex = 104;
			this.InfiniteItems.Tag = "Host";
			this.InfiniteItems.Text = "Infinite Items";
			this.InfiniteItems.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InfiniteItems, "Dropping any item from your inventory will not remove the item.");
			this.InfiniteItems.UseSelectable = true;
			this.InfiniteItems.UseStyleColors = true;
			this.InfiniteItems.CheckedChanged += this.InfiniteItemsToggled;
			this.RapidBow.AutoSize = true;
			this.RapidBow.Location = new Point(192, 174);
			this.RapidBow.Name = "RapidBow";
			this.RapidBow.Size = new Size(79, 15);
			this.RapidBow.Style = MetroColorStyle.Orange;
			this.RapidBow.TabIndex = 76;
			this.RapidBow.Tag = "Host";
			this.RapidBow.Text = "Rapid Bow";
			this.RapidBow.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.RapidBow, "Allows you to use a bow rapidly.");
			this.RapidBow.UseSelectable = true;
			this.RapidBow.UseStyleColors = true;
			this.RapidBow.CheckedChanged += this.RapidBowToggled;
			this.BloodVision.AutoSize = true;
			this.BloodVision.BackColor = Color.Transparent;
			this.BloodVision.Location = new Point(192, 153);
			this.BloodVision.Name = "BloodVision";
			this.BloodVision.Size = new Size(89, 15);
			this.BloodVision.Style = MetroColorStyle.Blue;
			this.BloodVision.TabIndex = 103;
			this.BloodVision.Tag = "NonHost";
			this.BloodVision.Text = "Blood Vision";
			this.BloodVision.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.BloodVision, "Your screen will be tinted red.");
			this.BloodVision.UseSelectable = true;
			this.BloodVision.UseStyleColors = true;
			this.BloodVision.CheckedChanged += this.BloodVisionToggled;
			this.IgnorePotions.AutoSize = true;
			this.IgnorePotions.BackColor = Color.Transparent;
			this.IgnorePotions.Location = new Point(192, 132);
			this.IgnorePotions.Name = "IgnorePotions";
			this.IgnorePotions.Size = new Size(100, 15);
			this.IgnorePotions.Style = MetroColorStyle.Orange;
			this.IgnorePotions.TabIndex = 102;
			this.IgnorePotions.Tag = "Host";
			this.IgnorePotions.Text = "Ignore Potions";
			this.IgnorePotions.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.IgnorePotions, "Ignores all potion effects.");
			this.IgnorePotions.UseSelectable = true;
			this.IgnorePotions.UseStyleColors = true;
			this.IgnorePotions.CheckedChanged += this.IgnorePotionsToggled;
			this.BypassInvulnerability.AutoSize = true;
			this.BypassInvulnerability.BackColor = Color.Transparent;
			this.BypassInvulnerability.Location = new Point(192, 90);
			this.BypassInvulnerability.Name = "BypassInvulnerability";
			this.BypassInvulnerability.Size = new Size(137, 15);
			this.BypassInvulnerability.Style = MetroColorStyle.Orange;
			this.BypassInvulnerability.TabIndex = 100;
			this.BypassInvulnerability.Tag = "Host";
			this.BypassInvulnerability.Text = "Bypass Invulnerability";
			this.BypassInvulnerability.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.BypassInvulnerability, "Disables invulnerability, such as being able to be damaged in Creative mode.");
			this.BypassInvulnerability.UseSelectable = true;
			this.BypassInvulnerability.UseStyleColors = true;
			this.BypassInvulnerability.CheckedChanged += this.BypassInvulnerabilityToggled;
			this.WearAnything.AutoSize = true;
			this.WearAnything.BackColor = Color.Transparent;
			this.WearAnything.ForeColor = SystemColors.ControlText;
			this.WearAnything.Location = new Point(193, 69);
			this.WearAnything.Name = "WearAnything";
			this.WearAnything.Size = new Size(102, 15);
			this.WearAnything.Style = MetroColorStyle.Blue;
			this.WearAnything.TabIndex = 99;
			this.WearAnything.Tag = "NonHost";
			this.WearAnything.Text = "Wear Anything";
			this.WearAnything.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.WearAnything, "Allows you to place anything on any of your armour slots.");
			this.WearAnything.UseSelectable = true;
			this.WearAnything.UseStyleColors = true;
			this.WearAnything.CheckedChanged += this.WearAnythingToggled;
			this.WalkonWater.AutoSize = true;
			this.WalkonWater.BackColor = Color.Transparent;
			this.WalkonWater.ForeColor = SystemColors.ControlText;
			this.WalkonWater.Location = new Point(193, 48);
			this.WalkonWater.Name = "WalkonWater";
			this.WalkonWater.Size = new Size(100, 15);
			this.WalkonWater.Style = MetroColorStyle.Blue;
			this.WalkonWater.TabIndex = 98;
			this.WalkonWater.Tag = "NonHost";
			this.WalkonWater.Text = "Walk on Water";
			this.WalkonWater.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.WalkonWater, "Allows you to walk on top of water.");
			this.WalkonWater.UseSelectable = true;
			this.WalkonWater.UseStyleColors = true;
			this.WalkonWater.CheckedChanged += this.WalkonWaterToggled;
			this.AlwaysElytra.AutoSize = true;
			this.AlwaysElytra.BackColor = Color.Transparent;
			this.AlwaysElytra.ForeColor = SystemColors.ControlText;
			this.AlwaysElytra.Location = new Point(193, 27);
			this.AlwaysElytra.Name = "AlwaysElytra";
			this.AlwaysElytra.Size = new Size(92, 15);
			this.AlwaysElytra.Style = MetroColorStyle.Blue;
			this.AlwaysElytra.TabIndex = 97;
			this.AlwaysElytra.Tag = "NonHost";
			this.AlwaysElytra.Text = "Always Elytra";
			this.AlwaysElytra.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysElytra, "Allows you to always fly like you had an Elytra on.");
			this.AlwaysElytra.UseSelectable = true;
			this.AlwaysElytra.UseStyleColors = true;
			this.AlwaysElytra.CheckedChanged += this.AlwaysElytraToggled;
			this.CaveFinder.AutoSize = true;
			this.CaveFinder.BackColor = Color.Transparent;
			this.CaveFinder.ForeColor = SystemColors.ControlText;
			this.CaveFinder.Location = new Point(193, 6);
			this.CaveFinder.Name = "CaveFinder";
			this.CaveFinder.Size = new Size(85, 15);
			this.CaveFinder.Style = MetroColorStyle.Blue;
			this.CaveFinder.TabIndex = 96;
			this.CaveFinder.Tag = "NonHost";
			this.CaveFinder.Text = "Cave Finder";
			this.CaveFinder.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CaveFinder, "Makes caves visible through the ground.");
			this.CaveFinder.UseSelectable = true;
			this.CaveFinder.UseStyleColors = true;
			this.CaveFinder.CheckedChanged += this.CaveFinderToggled;
			this.Wallhack.AutoSize = true;
			this.Wallhack.BackColor = Color.Transparent;
			this.Wallhack.ForeColor = SystemColors.ControlText;
			this.Wallhack.Location = new Point(7, 405);
			this.Wallhack.Name = "Wallhack";
			this.Wallhack.Size = new Size(71, 15);
			this.Wallhack.Style = MetroColorStyle.Blue;
			this.Wallhack.TabIndex = 95;
			this.Wallhack.Tag = "NonHost";
			this.Wallhack.Text = "Wallhack";
			this.Wallhack.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Wallhack, "Makes nametags permanently visible, even through walls.");
			this.Wallhack.UseSelectable = true;
			this.Wallhack.UseStyleColors = true;
			this.Wallhack.CheckedChanged += this.WallhackToggled;
			this.LargeXPDrops.AutoSize = true;
			this.LargeXPDrops.BackColor = Color.Transparent;
			this.LargeXPDrops.Location = new Point(7, 384);
			this.LargeXPDrops.Name = "LargeXPDrops";
			this.LargeXPDrops.Size = new Size(103, 15);
			this.LargeXPDrops.Style = MetroColorStyle.Orange;
			this.LargeXPDrops.TabIndex = 94;
			this.LargeXPDrops.Tag = "Host";
			this.LargeXPDrops.Text = "Large XP Drops";
			this.LargeXPDrops.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LargeXPDrops, "XP dropped by entities or Bottles o' Enchanting will have insane values.");
			this.LargeXPDrops.UseSelectable = true;
			this.LargeXPDrops.UseStyleColors = true;
			this.LargeXPDrops.CheckedChanged += this.LargeXpDropsToggled;
			this.WallClimbing.AutoSize = true;
			this.WallClimbing.BackColor = Color.Transparent;
			this.WallClimbing.Location = new Point(7, 363);
			this.WallClimbing.Name = "WallClimbing";
			this.WallClimbing.Size = new Size(98, 15);
			this.WallClimbing.Style = MetroColorStyle.Blue;
			this.WallClimbing.TabIndex = 93;
			this.WallClimbing.Tag = "NonHost";
			this.WallClimbing.Text = "Wall Climbing";
			this.WallClimbing.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.WallClimbing, "Makes any block climbable.");
			this.WallClimbing.UseSelectable = true;
			this.WallClimbing.UseStyleColors = true;
			this.WallClimbing.CheckedChanged += this.WallClimbingToggled;
			this.NoCollision.AutoSize = true;
			this.NoCollision.BackColor = Color.Transparent;
			this.NoCollision.Location = new Point(7, 321);
			this.NoCollision.Name = "NoCollision";
			this.NoCollision.Size = new Size(88, 15);
			this.NoCollision.Style = MetroColorStyle.Blue;
			this.NoCollision.TabIndex = 92;
			this.NoCollision.Tag = "NonHost";
			this.NoCollision.Text = "No Collision";
			this.NoCollision.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoCollision, "Disables collision with blocks.");
			this.NoCollision.UseSelectable = true;
			this.NoCollision.UseStyleColors = true;
			this.NoCollision.CheckedChanged += this.NoCollisionToggled;
			this.InfiniteAir.AutoSize = true;
			this.InfiniteAir.BackColor = Color.Transparent;
			this.InfiniteAir.Location = new Point(7, 279);
			this.InfiniteAir.Name = "InfiniteAir";
			this.InfiniteAir.Size = new Size(78, 15);
			this.InfiniteAir.Style = MetroColorStyle.Orange;
			this.InfiniteAir.TabIndex = 91;
			this.InfiniteAir.Tag = "Host";
			this.InfiniteAir.Text = "Infinite Air";
			this.InfiniteAir.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InfiniteAir, "Allows you to breathe underwater (or lava, or blocks).");
			this.InfiniteAir.UseSelectable = true;
			this.InfiniteAir.UseStyleColors = true;
			this.InfiniteAir.CheckedChanged += this.InfiniteAirToggled;
			this.InfiniteDurability.AutoSize = true;
			this.InfiniteDurability.BackColor = Color.Transparent;
			this.InfiniteDurability.Location = new Point(7, 300);
			this.InfiniteDurability.Name = "InfiniteDurability";
			this.InfiniteDurability.Size = new Size(114, 15);
			this.InfiniteDurability.Style = MetroColorStyle.Orange;
			this.InfiniteDurability.TabIndex = 90;
			this.InfiniteDurability.Tag = "Host";
			this.InfiniteDurability.Text = "Infinite Durability";
			this.InfiniteDurability.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InfiniteDurability, "The durability of items will never decrease.");
			this.InfiniteDurability.UseSelectable = true;
			this.InfiniteDurability.UseStyleColors = true;
			this.InfiniteDurability.CheckedChanged += this.InfiniteDurabilityToggled;
			this.SuperKnockback.AutoSize = true;
			this.SuperKnockback.BackColor = Color.Transparent;
			this.SuperKnockback.Location = new Point(7, 258);
			this.SuperKnockback.Name = "SuperKnockback";
			this.SuperKnockback.Size = new Size(114, 15);
			this.SuperKnockback.Style = MetroColorStyle.Orange;
			this.SuperKnockback.TabIndex = 89;
			this.SuperKnockback.Tag = "Host";
			this.SuperKnockback.Text = "Super Knockback";
			this.SuperKnockback.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SuperKnockback, "Makes any form of knockback a lot stronger than before.");
			this.SuperKnockback.UseSelectable = true;
			this.SuperKnockback.UseStyleColors = true;
			this.SuperKnockback.CheckedChanged += this.SuperKnockbackToggled;
			this.DisabledKnockback.AutoSize = true;
			this.DisabledKnockback.BackColor = Color.Transparent;
			this.DisabledKnockback.Location = new Point(7, 237);
			this.DisabledKnockback.Name = "DisabledKnockback";
			this.DisabledKnockback.Size = new Size(129, 15);
			this.DisabledKnockback.Style = MetroColorStyle.Orange;
			this.DisabledKnockback.TabIndex = 88;
			this.DisabledKnockback.Tag = "Host";
			this.DisabledKnockback.Text = "Disabled Knockback";
			this.DisabledKnockback.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisabledKnockback, "Disables all sorts of knockback.");
			this.DisabledKnockback.UseSelectable = true;
			this.DisabledKnockback.UseStyleColors = true;
			this.DisabledKnockback.CheckedChanged += this.DisabledKnockbackToggled;
			this.SilkTouchAnything.AutoSize = true;
			this.SilkTouchAnything.BackColor = Color.Transparent;
			this.SilkTouchAnything.Location = new Point(7, 216);
			this.SilkTouchAnything.Name = "SilkTouchAnything";
			this.SilkTouchAnything.Size = new Size(130, 15);
			this.SilkTouchAnything.Style = MetroColorStyle.Orange;
			this.SilkTouchAnything.TabIndex = 87;
			this.SilkTouchAnything.Tag = "Host";
			this.SilkTouchAnything.Text = "Silk Touch Anything";
			this.SilkTouchAnything.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SilkTouchAnything, "Any block you break will act like Silk Touch was used on it.");
			this.SilkTouchAnything.UseSelectable = true;
			this.SilkTouchAnything.UseStyleColors = true;
			this.SilkTouchAnything.CheckedChanged += this.SilkTouchAnythingToggled;
			this.DeveloperMode.AutoSize = true;
			this.DeveloperMode.Location = new Point(7, 195);
			this.DeveloperMode.Name = "DeveloperMode";
			this.DeveloperMode.Size = new Size(110, 15);
			this.DeveloperMode.Style = MetroColorStyle.Blue;
			this.DeveloperMode.TabIndex = 86;
			this.DeveloperMode.Tag = "NonHost";
			this.DeveloperMode.Text = "Developer Mode";
			this.DeveloperMode.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DeveloperMode, componentResourceManager.GetString("DeveloperMode.ToolTip"));
			this.DeveloperMode.UseSelectable = true;
			this.DeveloperMode.UseStyleColors = true;
			this.DeveloperMode.CheckedChanged += this.DeveloperModeToggled;
			this.PickLiquidBlocks.AutoSize = true;
			this.PickLiquidBlocks.Location = new Point(7, 174);
			this.PickLiquidBlocks.Name = "PickLiquidBlocks";
			this.PickLiquidBlocks.Size = new Size(118, 15);
			this.PickLiquidBlocks.Style = MetroColorStyle.Blue;
			this.PickLiquidBlocks.TabIndex = 85;
			this.PickLiquidBlocks.Tag = "NonHost";
			this.PickLiquidBlocks.Text = "Pick Liquid Blocks";
			this.PickLiquidBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.PickLiquidBlocks, "Allows you to use 'Pick Block' on liquids (such as Water and Lava).");
			this.PickLiquidBlocks.UseSelectable = true;
			this.PickLiquidBlocks.UseStyleColors = true;
			this.PickLiquidBlocks.CheckedChanged += this.PickLiquidBlocksToggled;
			this.DuelWieldanyItem.AutoSize = true;
			this.DuelWieldanyItem.Location = new Point(7, 153);
			this.DuelWieldanyItem.Name = "DuelWieldanyItem";
			this.DuelWieldanyItem.Size = new Size(129, 15);
			this.DuelWieldanyItem.Style = MetroColorStyle.Orange;
			this.DuelWieldanyItem.TabIndex = 84;
			this.DuelWieldanyItem.Tag = "Host";
			this.DuelWieldanyItem.Text = "Duel Wield any Item";
			this.DuelWieldanyItem.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DuelWieldanyItem, "Allows you to place any item in your off-hand slot.\r\nNOTE: The item can't be used.");
			this.DuelWieldanyItem.UseSelectable = true;
			this.DuelWieldanyItem.UseStyleColors = true;
			this.DuelWieldanyItem.CheckedChanged += this.DuelWieldAnyItemToggled;
			this.DisableStarving.AutoSize = true;
			this.DisableStarving.Location = new Point(7, 132);
			this.DisableStarving.Name = "DisableStarving";
			this.DisableStarving.Size = new Size(107, 15);
			this.DisableStarving.Style = MetroColorStyle.Orange;
			this.DisableStarving.TabIndex = 83;
			this.DisableStarving.Tag = "Host";
			this.DisableStarving.Text = "Disable Starving";
			this.DisableStarving.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableStarving, "Prevents starving damage.");
			this.DisableStarving.UseSelectable = true;
			this.DisableStarving.UseStyleColors = true;
			this.DisableStarving.CheckedChanged += this.DisableStarvingToggled;
			this.InstantMining.AutoSize = true;
			this.InstantMining.Location = new Point(7, 111);
			this.InstantMining.Name = "InstantMining";
			this.InstantMining.Size = new Size(100, 15);
			this.InstantMining.Style = MetroColorStyle.Orange;
			this.InstantMining.TabIndex = 82;
			this.InstantMining.Tag = "Host";
			this.InstantMining.Text = "Instant Mining";
			this.InstantMining.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InstantMining, "Allows you to mine any block at insane speed.");
			this.InstantMining.UseSelectable = true;
			this.InstantMining.UseStyleColors = true;
			this.InstantMining.CheckedChanged += this.InstantMiningToggled;
			this.Flight.AutoSize = true;
			this.Flight.Location = new Point(7, 90);
			this.Flight.Name = "Flight";
			this.Flight.Size = new Size(53, 15);
			this.Flight.Style = MetroColorStyle.Blue;
			this.Flight.TabIndex = 81;
			this.Flight.Tag = "NonHost";
			this.Flight.Text = "Flight";
			this.Flight.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Flight, "Allows you to fly at any time without needing the permission or Creative mode.");
			this.Flight.UseSelectable = true;
			this.Flight.UseStyleColors = true;
			this.Flight.CheckedChanged += this.FlightToggled;
			this.DisableSuffocating.AutoSize = true;
			this.DisableSuffocating.Location = new Point(7, 69);
			this.DisableSuffocating.Name = "DisableSuffocating";
			this.DisableSuffocating.Size = new Size(125, 15);
			this.DisableSuffocating.Style = MetroColorStyle.Orange;
			this.DisableSuffocating.TabIndex = 80;
			this.DisableSuffocating.Tag = "Host";
			this.DisableSuffocating.Text = "Disable Suffocating";
			this.DisableSuffocating.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableSuffocating, "Prevents anyone from suffocating.");
			this.DisableSuffocating.UseSelectable = true;
			this.DisableSuffocating.UseStyleColors = true;
			this.DisableSuffocating.CheckedChanged += this.DisableSuffocatingToggled;
			this.NoFallDamage.AutoSize = true;
			this.NoFallDamage.Location = new Point(7, 48);
			this.NoFallDamage.Name = "NoFallDamage";
			this.NoFallDamage.Size = new Size(107, 15);
			this.NoFallDamage.Style = MetroColorStyle.Orange;
			this.NoFallDamage.TabIndex = 79;
			this.NoFallDamage.Tag = "Host";
			this.NoFallDamage.Text = "No Fall Damage";
			this.NoFallDamage.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoFallDamage, "Disables fall damage.");
			this.NoFallDamage.UseSelectable = true;
			this.NoFallDamage.UseStyleColors = true;
			this.NoFallDamage.CheckedChanged += this.NoFallDamageToggled;
			this.CraftAnything.AutoSize = true;
			this.CraftAnything.Location = new Point(7, 27);
			this.CraftAnything.Name = "CraftAnything";
			this.CraftAnything.Size = new Size(101, 15);
			this.CraftAnything.Style = MetroColorStyle.Blue;
			this.CraftAnything.TabIndex = 78;
			this.CraftAnything.Tag = "NonHost";
			this.CraftAnything.Text = "Craft Anything";
			this.CraftAnything.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CraftAnything, "Allows you to craft anything without needing the required resources.\r\nNOTE: This mod has a side effect of making thunder go crazy if it is storming.");
			this.CraftAnything.UseSelectable = true;
			this.CraftAnything.UseStyleColors = true;
			this.CraftAnything.CheckedChanged += this.CraftAnythingToggled;
			this.CreativeMode.AutoSize = true;
			this.CreativeMode.BackColor = Color.Transparent;
			this.CreativeMode.Location = new Point(7, 6);
			this.CreativeMode.Name = "CreativeMode";
			this.CreativeMode.Size = new Size(66, 15);
			this.CreativeMode.Style = MetroColorStyle.Orange;
			this.CreativeMode.TabIndex = 77;
			this.CreativeMode.Tag = "Host";
			this.CreativeMode.Text = "Creative";
			this.CreativeMode.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CreativeMode, "Allows you to access the Creative menu without actually being in Creative mode.");
			this.CreativeMode.UseSelectable = true;
			this.CreativeMode.UseStyleColors = true;
			this.CreativeMode.CheckedChanged += this.CreativeModeToggled;
			this.worldTab.Controls.Add(this.FogDistanceSlider);
			this.worldTab.Controls.Add(this.FogDistance);
			this.worldTab.Controls.Add(this.EntityEditorBtn);
			this.worldTab.Controls.Add(this.ThunderMode);
			this.worldTab.Controls.Add(this.RainMode);
			this.worldTab.Controls.Add(this.WorldGenerationOptsBtn);
			this.worldTab.Controls.Add(this.Collision);
			this.worldTab.Controls.Add(this.DisableFallingBlocks);
			this.worldTab.Controls.Add(this.LiquidSpreadTimeSlider);
			this.worldTab.Controls.Add(this.LiquidSpreadTime);
			this.worldTab.Controls.Add(this.InvulnerableEntities);
			this.worldTab.Controls.Add(this.SleepingDoesntClearWeather);
			this.worldTab.Controls.Add(this.EntitySpeedSlider);
			this.worldTab.Controls.Add(this.EntitySpeed);
			this.worldTab.Controls.Add(this.SuperFurnace);
			this.worldTab.Controls.Add(this.WaterLogAnything);
			this.worldTab.Controls.Add(this.LootTableEditorBtn);
			this.worldTab.Controls.Add(this.LeashAnyMobs);
			this.worldTab.Controls.Add(this.SunProofMobs);
			this.worldTab.Controls.Add(this.DisableCreativeFlag);
			this.worldTab.Controls.Add(this.ZombieTower);
			this.worldTab.Controls.Add(this.Entities);
			this.worldTab.Controls.Add(this.IgnitedCreepers);
			this.worldTab.Controls.Add(this.SuperchargedCreepers);
			this.worldTab.Controls.Add(this.UncapEntitySpawnLimit);
			this.worldTab.Controls.Add(this.AcidLiquidBlocks);
			this.worldTab.Controls.Add(this.World);
			this.worldTab.Controls.Add(this.FoggyWeather);
			this.worldTab.Controls.Add(this.worldPnl);
			this.worldTab.Controls.Add(this.StaticLiquidBlocks);
			this.worldTab.Controls.Add(this.NoFog);
			this.worldTab.HorizontalScrollbarBarColor = true;
			this.worldTab.HorizontalScrollbarHighlightOnWheel = false;
			this.worldTab.HorizontalScrollbarSize = 10;
			this.worldTab.Location = new Point(4, 9);
			this.worldTab.Name = "worldTab";
			this.worldTab.Padding = new Padding(3);
			this.worldTab.Size = new Size(1122, 630);
			this.worldTab.TabIndex = 1;
			this.worldTab.Tag = "GeckoURequired";
			this.worldTab.Text = "World and Entities";
			this.worldTab.Theme = MetroThemeStyle.Dark;
			this.worldTab.VerticalScrollbarBarColor = true;
			this.worldTab.VerticalScrollbarHighlightOnWheel = false;
			this.worldTab.VerticalScrollbarSize = 10;
			this.StyleExtender.SetApplyMetroTheme(this.FogDistanceSlider, true);
			this.FogDistanceSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.FogDistanceSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.FogDistanceSlider.Location = new Point(102, 604);
			NumericUpDown fogDistanceSlider = this.FogDistanceSlider;
			int[] array14 = new int[4];
			array14[0] = 120;
			fogDistanceSlider.Maximum = new decimal(array14);
			this.FogDistanceSlider.Name = "FogDistanceSlider";
			this.FogDistanceSlider.Size = new Size(1015, 20);
			this.FogDistanceSlider.TabIndex = 148;
			this.FogDistanceSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.FogDistanceSlider, "How far away is the fog?");
			this.FogDistanceSlider.ValueChanged += this.FogDistanceSliderChanged;
			this.FogDistance.AutoSize = true;
			this.FogDistance.FontWeight = MetroLabelWeight.Regular;
			this.FogDistance.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.FogDistance.Location = new Point(5, 604);
			this.FogDistance.Name = "FogDistance";
			this.FogDistance.Size = new Size(91, 19);
			this.FogDistance.Style = MetroColorStyle.Orange;
			this.FogDistance.TabIndex = 147;
			this.FogDistance.Tag = "Host";
			this.FogDistance.Text = "Fog Distance:";
			this.FogDistance.Theme = MetroThemeStyle.Dark;
			this.FogDistance.UseStyleColors = true;
			this.EntityEditorBtn.Location = new Point(6, 497);
			this.EntityEditorBtn.Name = "EntityEditorBtn";
			this.EntityEditorBtn.Size = new Size(1112, 23);
			this.EntityEditorBtn.Style = MetroColorStyle.Orange;
			this.EntityEditorBtn.TabIndex = 146;
			this.EntityEditorBtn.Tag = "Host";
			this.EntityEditorBtn.Text = "Entity Editor";
			this.EntityEditorBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.EntityEditorBtn, "Opens the Entity Editor, a mod which allows you to edit Entity data");
			this.EntityEditorBtn.UseSelectable = true;
			this.EntityEditorBtn.UseStyleColors = true;
			this.EntityEditorBtn.Click += this.EntityEditorBtnClicked;
			this.ThunderMode.AutoSize = true;
			this.ThunderMode.BackColor = Color.Transparent;
			this.ThunderMode.Location = new Point(7, 235);
			this.ThunderMode.Name = "ThunderMode";
			this.ThunderMode.Size = new Size(151, 15);
			this.ThunderMode.Style = MetroColorStyle.Orange;
			this.ThunderMode.TabIndex = 145;
			this.ThunderMode.Tag = "Host";
			this.ThunderMode.Text = "Thunder Mode (Default)";
			this.ThunderMode.Theme = MetroThemeStyle.Dark;
			this.ThunderMode.ThreeState = true;
			this.ToolTipManager.SetToolTip(this.ThunderMode, "Whether it thunders or not");
			this.ThunderMode.UseSelectable = true;
			this.ThunderMode.UseStyleColors = true;
			this.ThunderMode.CheckStateChanged += this.ThunderModeToggled;
			this.RainMode.AutoSize = true;
			this.RainMode.BackColor = Color.Transparent;
			this.RainMode.Location = new Point(7, 214);
			this.RainMode.Name = "RainMode";
			this.RainMode.Size = new Size(129, 15);
			this.RainMode.Style = MetroColorStyle.Orange;
			this.RainMode.TabIndex = 144;
			this.RainMode.Tag = "Host";
			this.RainMode.Text = "Rain Mode (Default)";
			this.RainMode.Theme = MetroThemeStyle.Dark;
			this.RainMode.ThreeState = true;
			this.ToolTipManager.SetToolTip(this.RainMode, "Whether it rains or not");
			this.RainMode.UseSelectable = true;
			this.RainMode.UseStyleColors = true;
			this.RainMode.CheckStateChanged += this.RainModeToggled;
			this.WorldGenerationOptsBtn.Location = new Point(567, 526);
			this.WorldGenerationOptsBtn.Name = "WorldGenerationOptsBtn";
			this.WorldGenerationOptsBtn.Size = new Size(550, 23);
			this.WorldGenerationOptsBtn.Style = MetroColorStyle.Orange;
			this.WorldGenerationOptsBtn.TabIndex = 143;
			this.WorldGenerationOptsBtn.Tag = "Host";
			this.WorldGenerationOptsBtn.Text = "World Generation Editor";
			this.WorldGenerationOptsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.WorldGenerationOptsBtn, "Opens the World Generation Editor");
			this.WorldGenerationOptsBtn.UseSelectable = true;
			this.WorldGenerationOptsBtn.UseStyleColors = true;
			this.WorldGenerationOptsBtn.Click += this.WorldGenerationOptsBtnClicked;
			this.Collision.AutoSize = true;
			this.Collision.ForeColor = SystemColors.ControlText;
			this.Collision.Location = new Point(475, 172);
			this.Collision.Name = "Collision";
			this.Collision.Size = new Size(69, 15);
			this.Collision.Style = MetroColorStyle.Blue;
			this.Collision.TabIndex = 142;
			this.Collision.Tag = "NonHost";
			this.Collision.Text = "Collision";
			this.Collision.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Collision, "Whether collisions for entities are disabled");
			this.Collision.UseSelectable = true;
			this.Collision.UseStyleColors = true;
			this.Collision.CheckedChanged += this.CollisionToggled;
			this.DisableFallingBlocks.AutoSize = true;
			this.DisableFallingBlocks.BackColor = Color.Transparent;
			this.DisableFallingBlocks.Location = new Point(7, 193);
			this.DisableFallingBlocks.Name = "DisableFallingBlocks";
			this.DisableFallingBlocks.Size = new Size(136, 15);
			this.DisableFallingBlocks.Style = MetroColorStyle.Orange;
			this.DisableFallingBlocks.TabIndex = 132;
			this.DisableFallingBlocks.Tag = "Host";
			this.DisableFallingBlocks.Text = "Disable Falling Blocks";
			this.DisableFallingBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableFallingBlocks, "Whether gravity affected blocks won't be affected by it");
			this.DisableFallingBlocks.UseSelectable = true;
			this.DisableFallingBlocks.UseStyleColors = true;
			this.DisableFallingBlocks.CheckedChanged += this.DisableFallingBlocksToggled;
			this.StyleExtender.SetApplyMetroTheme(this.LiquidSpreadTimeSlider, true);
			this.LiquidSpreadTimeSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.LiquidSpreadTimeSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.LiquidSpreadTimeSlider.Location = new Point(140, 578);
			NumericUpDown liquidSpreadTimeSlider = this.LiquidSpreadTimeSlider;
			int[] array15 = new int[4];
			array15[0] = 120;
			liquidSpreadTimeSlider.Maximum = new decimal(array15);
			this.LiquidSpreadTimeSlider.Name = "LiquidSpreadTimeSlider";
			this.LiquidSpreadTimeSlider.Size = new Size(977, 20);
			this.LiquidSpreadTimeSlider.TabIndex = 131;
			this.LiquidSpreadTimeSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.LiquidSpreadTimeSlider, "How fast should liquid blocks (water, lava) spread in ticks?");
			this.LiquidSpreadTimeSlider.ValueChanged += this.LiquidSpreadTimeSliderChanged;
			this.LiquidSpreadTime.AutoSize = true;
			this.LiquidSpreadTime.FontWeight = MetroLabelWeight.Regular;
			this.LiquidSpreadTime.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.LiquidSpreadTime.Location = new Point(5, 578);
			this.LiquidSpreadTime.Name = "LiquidSpreadTime";
			this.LiquidSpreadTime.Size = new Size(128, 19);
			this.LiquidSpreadTime.Style = MetroColorStyle.Orange;
			this.LiquidSpreadTime.TabIndex = 130;
			this.LiquidSpreadTime.Tag = "Host";
			this.LiquidSpreadTime.Text = "Liquid Spread Time:";
			this.LiquidSpreadTime.Theme = MetroThemeStyle.Dark;
			this.LiquidSpreadTime.UseStyleColors = true;
			this.InvulnerableEntities.AutoSize = true;
			this.InvulnerableEntities.ForeColor = SystemColors.ControlText;
			this.InvulnerableEntities.Location = new Point(475, 151);
			this.InvulnerableEntities.Name = "InvulnerableEntities";
			this.InvulnerableEntities.Size = new Size(129, 15);
			this.InvulnerableEntities.Style = MetroColorStyle.Orange;
			this.InvulnerableEntities.TabIndex = 129;
			this.InvulnerableEntities.Tag = "Host";
			this.InvulnerableEntities.Text = "Invulnerable Entities";
			this.InvulnerableEntities.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.InvulnerableEntities, "Whether entities are invulnerable (including tile entities)");
			this.InvulnerableEntities.UseSelectable = true;
			this.InvulnerableEntities.UseStyleColors = true;
			this.InvulnerableEntities.CheckedChanged += this.InvulnerableEntitiesToggled;
			this.SleepingDoesntClearWeather.AutoSize = true;
			this.SleepingDoesntClearWeather.BackColor = Color.Transparent;
			this.SleepingDoesntClearWeather.Location = new Point(7, 172);
			this.SleepingDoesntClearWeather.Name = "SleepingDoesntClearWeather";
			this.SleepingDoesntClearWeather.Size = new Size(183, 15);
			this.SleepingDoesntClearWeather.Style = MetroColorStyle.Orange;
			this.SleepingDoesntClearWeather.TabIndex = 128;
			this.SleepingDoesntClearWeather.Tag = "Host";
			this.SleepingDoesntClearWeather.Text = "Sleeping doesn't clear weather";
			this.SleepingDoesntClearWeather.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SleepingDoesntClearWeather, "Whether sleeping doesn't clear the weather\r\n");
			this.SleepingDoesntClearWeather.UseSelectable = true;
			this.SleepingDoesntClearWeather.UseStyleColors = true;
			this.SleepingDoesntClearWeather.CheckedChanged += this.SleepingDoesntClearWeatherToggled;
			this.StyleExtender.SetApplyMetroTheme(this.EntitySpeedSlider, true);
			this.EntitySpeedSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.EntitySpeedSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.EntitySpeedSlider.Location = new Point(108, 552);
			NumericUpDown entitySpeedSlider = this.EntitySpeedSlider;
			int[] array16 = new int[4];
			array16[0] = 120;
			entitySpeedSlider.Maximum = new decimal(array16);
			this.EntitySpeedSlider.Name = "EntitySpeedSlider";
			this.EntitySpeedSlider.Size = new Size(1009, 20);
			this.EntitySpeedSlider.TabIndex = 127;
			this.EntitySpeedSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.EntitySpeedSlider, "How fast should entities be? (Includes tile entities)");
			NumericUpDown entitySpeedSlider2 = this.EntitySpeedSlider;
			int[] array17 = new int[4];
			array17[0] = 20;
			entitySpeedSlider2.Value = new decimal(array17);
			this.EntitySpeedSlider.ValueChanged += this.EntitySpeedSliderChanged;
			this.EntitySpeed.AutoSize = true;
			this.EntitySpeed.FontWeight = MetroLabelWeight.Regular;
			this.EntitySpeed.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.EntitySpeed.Location = new Point(5, 552);
			this.EntitySpeed.Name = "EntitySpeed";
			this.EntitySpeed.Size = new Size(97, 19);
			this.EntitySpeed.Style = MetroColorStyle.Blue;
			this.EntitySpeed.TabIndex = 126;
			this.EntitySpeed.Tag = "NonHost";
			this.EntitySpeed.Text = "Entities Speed:";
			this.EntitySpeed.Theme = MetroThemeStyle.Dark;
			this.EntitySpeed.UseStyleColors = true;
			this.SuperFurnace.AutoSize = true;
			this.SuperFurnace.BackColor = Color.Transparent;
			this.SuperFurnace.Location = new Point(7, 151);
			this.SuperFurnace.Name = "SuperFurnace";
			this.SuperFurnace.Size = new Size(98, 15);
			this.SuperFurnace.Style = MetroColorStyle.Orange;
			this.SuperFurnace.TabIndex = 50;
			this.SuperFurnace.Tag = "Host";
			this.SuperFurnace.Text = "Super Furnace";
			this.SuperFurnace.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SuperFurnace, "Whether furnaces smelt instantly");
			this.SuperFurnace.UseSelectable = true;
			this.SuperFurnace.UseStyleColors = true;
			this.SuperFurnace.CheckedChanged += this.SuperFurnaceToggled;
			this.WaterLogAnything.AutoSize = true;
			this.WaterLogAnything.BackColor = Color.Transparent;
			this.WaterLogAnything.Location = new Point(8, 130);
			this.WaterLogAnything.Name = "WaterLogAnything";
			this.WaterLogAnything.Size = new Size(129, 15);
			this.WaterLogAnything.Style = MetroColorStyle.Orange;
			this.WaterLogAnything.TabIndex = 49;
			this.WaterLogAnything.Tag = "Host";
			this.WaterLogAnything.Text = "Water Log Anything";
			this.WaterLogAnything.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.WaterLogAnything, "Whether you can water log anything (place liquid inside of blocks)");
			this.WaterLogAnything.UseSelectable = true;
			this.WaterLogAnything.UseStyleColors = true;
			this.WaterLogAnything.CheckedChanged += this.WaterLogAnythingToggled;
			this.LootTableEditorBtn.Location = new Point(7, 526);
			this.LootTableEditorBtn.Name = "LootTableEditorBtn";
			this.LootTableEditorBtn.Size = new Size(550, 23);
			this.LootTableEditorBtn.Style = MetroColorStyle.Orange;
			this.LootTableEditorBtn.TabIndex = 48;
			this.LootTableEditorBtn.Tag = "Host";
			this.LootTableEditorBtn.Text = "Loot Table Editor";
			this.LootTableEditorBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LootTableEditorBtn, "Opens the Loot Table Editor, a mod which allows you to swap entity loot tables");
			this.LootTableEditorBtn.UseSelectable = true;
			this.LootTableEditorBtn.UseStyleColors = true;
			this.LootTableEditorBtn.Click += this.LootTableEditorBtnClicked;
			this.LeashAnyMobs.AutoSize = true;
			this.LeashAnyMobs.ForeColor = SystemColors.ControlText;
			this.LeashAnyMobs.Location = new Point(475, 130);
			this.LeashAnyMobs.Name = "LeashAnyMobs";
			this.LeashAnyMobs.Size = new Size(108, 15);
			this.LeashAnyMobs.Style = MetroColorStyle.Orange;
			this.LeashAnyMobs.TabIndex = 47;
			this.LeashAnyMobs.Tag = "Host";
			this.LeashAnyMobs.Text = "Leash any mobs";
			this.LeashAnyMobs.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LeashAnyMobs, "Whether you'll be able to leash any entity");
			this.LeashAnyMobs.UseSelectable = true;
			this.LeashAnyMobs.UseStyleColors = true;
			this.LeashAnyMobs.CheckedChanged += this.LeashAnyMobsToggled;
			this.SunProofMobs.AutoSize = true;
			this.SunProofMobs.Location = new Point(475, 109);
			this.SunProofMobs.Name = "SunProofMobs";
			this.SunProofMobs.Size = new Size(108, 15);
			this.SunProofMobs.Style = MetroColorStyle.Orange;
			this.SunProofMobs.TabIndex = 21;
			this.SunProofMobs.Tag = "Host";
			this.SunProofMobs.Text = "Sun Proof Mobs";
			this.SunProofMobs.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SunProofMobs, "Whether mobs that burn during daylight \r\nare immune to the sun");
			this.SunProofMobs.UseSelectable = true;
			this.SunProofMobs.UseStyleColors = true;
			this.SunProofMobs.CheckedChanged += this.SunProofMobsToggled;
			this.DisableCreativeFlag.AutoSize = true;
			this.DisableCreativeFlag.BackColor = Color.Transparent;
			this.DisableCreativeFlag.Location = new Point(7, 67);
			this.DisableCreativeFlag.Name = "DisableCreativeFlag";
			this.DisableCreativeFlag.Size = new Size(132, 15);
			this.DisableCreativeFlag.Style = MetroColorStyle.Orange;
			this.DisableCreativeFlag.TabIndex = 21;
			this.DisableCreativeFlag.Tag = "Host";
			this.DisableCreativeFlag.Text = "Disable Creative Flag";
			this.DisableCreativeFlag.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableCreativeFlag, "Whether to disable the \"Played in Creative\" notification");
			this.DisableCreativeFlag.UseSelectable = true;
			this.DisableCreativeFlag.UseStyleColors = true;
			this.DisableCreativeFlag.CheckedChanged += this.DisableCreativeFlagToggled;
			this.ZombieTower.AutoSize = true;
			this.ZombieTower.Location = new Point(475, 88);
			this.ZombieTower.Name = "ZombieTower";
			this.ZombieTower.Size = new Size(100, 15);
			this.ZombieTower.Style = MetroColorStyle.Orange;
			this.ZombieTower.TabIndex = 20;
			this.ZombieTower.Tag = "Host";
			this.ZombieTower.Text = "Zombie Tower";
			this.ZombieTower.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.ZombieTower, "Whether Zombies will sit on the nearest entity");
			this.ZombieTower.UseSelectable = true;
			this.ZombieTower.UseStyleColors = true;
			this.ZombieTower.CheckedChanged += this.ZombieTowerToggled;
			this.Entities.AutoSize = true;
			this.Entities.FontWeight = MetroLabelWeight.Regular;
			this.Entities.Location = new Point(475, 3);
			this.Entities.Name = "Entities";
			this.Entities.Size = new Size(53, 19);
			this.Entities.TabIndex = 46;
			this.Entities.Text = "Entities";
			this.Entities.Theme = MetroThemeStyle.Dark;
			this.IgnitedCreepers.AutoSize = true;
			this.IgnitedCreepers.Location = new Point(475, 67);
			this.IgnitedCreepers.Name = "IgnitedCreepers";
			this.IgnitedCreepers.Size = new Size(109, 15);
			this.IgnitedCreepers.Style = MetroColorStyle.Orange;
			this.IgnitedCreepers.TabIndex = 19;
			this.IgnitedCreepers.Tag = "Host";
			this.IgnitedCreepers.Text = "Ignited Creepers";
			this.IgnitedCreepers.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.IgnitedCreepers, "Whether creepers will always be ignited when spawned");
			this.IgnitedCreepers.UseSelectable = true;
			this.IgnitedCreepers.UseStyleColors = true;
			this.IgnitedCreepers.CheckedChanged += this.IgnitedCreepersToggled;
			this.SuperchargedCreepers.AutoSize = true;
			this.SuperchargedCreepers.Location = new Point(475, 46);
			this.SuperchargedCreepers.Name = "SuperchargedCreepers";
			this.SuperchargedCreepers.Size = new Size(145, 15);
			this.SuperchargedCreepers.Style = MetroColorStyle.Orange;
			this.SuperchargedCreepers.TabIndex = 18;
			this.SuperchargedCreepers.Tag = "Host";
			this.SuperchargedCreepers.Text = "Supercharged Creepers";
			this.SuperchargedCreepers.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SuperchargedCreepers, "Whether creepers will always be supercharged");
			this.SuperchargedCreepers.UseSelectable = true;
			this.SuperchargedCreepers.UseStyleColors = true;
			this.SuperchargedCreepers.CheckedChanged += this.SuperchargedCreepersToggled;
			this.UncapEntitySpawnLimit.AutoSize = true;
			this.UncapEntitySpawnLimit.Location = new Point(475, 25);
			this.UncapEntitySpawnLimit.Name = "UncapEntitySpawnLimit";
			this.UncapEntitySpawnLimit.Size = new Size(158, 15);
			this.UncapEntitySpawnLimit.Style = MetroColorStyle.Orange;
			this.UncapEntitySpawnLimit.TabIndex = 17;
			this.UncapEntitySpawnLimit.Tag = "Host";
			this.UncapEntitySpawnLimit.Text = "Uncap Entity Spawn Limit";
			this.UncapEntitySpawnLimit.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UncapEntitySpawnLimit, "Whether to uncap the entity spawn limit");
			this.UncapEntitySpawnLimit.UseSelectable = true;
			this.UncapEntitySpawnLimit.UseStyleColors = true;
			this.UncapEntitySpawnLimit.CheckedChanged += this.UncapEntitySpawnLimitToggled;
			this.AcidLiquidBlocks.AutoSize = true;
			this.AcidLiquidBlocks.BackColor = Color.Transparent;
			this.AcidLiquidBlocks.Location = new Point(7, 88);
			this.AcidLiquidBlocks.Name = "AcidLiquidBlocks";
			this.AcidLiquidBlocks.Size = new Size(120, 15);
			this.AcidLiquidBlocks.Style = MetroColorStyle.Orange;
			this.AcidLiquidBlocks.TabIndex = 22;
			this.AcidLiquidBlocks.Tag = "Host";
			this.AcidLiquidBlocks.Text = "Acid Liquid Blocks";
			this.AcidLiquidBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AcidLiquidBlocks, "Whether Liquid Blocks will destroy surrounding blocks");
			this.AcidLiquidBlocks.UseSelectable = true;
			this.AcidLiquidBlocks.UseStyleColors = true;
			this.AcidLiquidBlocks.CheckedChanged += this.AcidLiquidBlocksToggled;
			this.World.AutoSize = true;
			this.World.FontWeight = MetroLabelWeight.Regular;
			this.World.Location = new Point(3, 3);
			this.World.Name = "World";
			this.World.Size = new Size(97, 19);
			this.World.TabIndex = 44;
			this.World.Text = "World / Blocks";
			this.World.Theme = MetroThemeStyle.Dark;
			this.FoggyWeather.AutoSize = true;
			this.FoggyWeather.Location = new Point(7, 25);
			this.FoggyWeather.Name = "FoggyWeather";
			this.FoggyWeather.Size = new Size(103, 15);
			this.FoggyWeather.Style = MetroColorStyle.Blue;
			this.FoggyWeather.TabIndex = 24;
			this.FoggyWeather.Tag = "NonHost";
			this.FoggyWeather.Text = "Foggy Weather";
			this.FoggyWeather.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.FoggyWeather, "Whether to have a foggy view");
			this.FoggyWeather.UseSelectable = true;
			this.FoggyWeather.UseStyleColors = true;
			this.FoggyWeather.CheckedChanged += this.FoggyWeatherToggled;
			this.worldPnl.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.worldPnl.HorizontalScrollbarBarColor = true;
			this.worldPnl.HorizontalScrollbarHighlightOnWheel = false;
			this.worldPnl.HorizontalScrollbarSize = 10;
			this.worldPnl.Location = new Point(0, 15);
			this.worldPnl.Name = "worldPnl";
			this.worldPnl.Size = new Size(1116, 1);
			this.worldPnl.TabIndex = 43;
			this.worldPnl.Theme = MetroThemeStyle.Dark;
			this.worldPnl.VerticalScrollbarBarColor = true;
			this.worldPnl.VerticalScrollbarHighlightOnWheel = false;
			this.worldPnl.VerticalScrollbarSize = 10;
			this.StaticLiquidBlocks.AutoSize = true;
			this.StaticLiquidBlocks.BackColor = Color.Transparent;
			this.StaticLiquidBlocks.Location = new Point(7, 109);
			this.StaticLiquidBlocks.Name = "StaticLiquidBlocks";
			this.StaticLiquidBlocks.Size = new Size(125, 15);
			this.StaticLiquidBlocks.Style = MetroColorStyle.Orange;
			this.StaticLiquidBlocks.TabIndex = 25;
			this.StaticLiquidBlocks.Tag = "Host";
			this.StaticLiquidBlocks.Text = "Static Liquid Blocks";
			this.StaticLiquidBlocks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.StaticLiquidBlocks, "Whether Liquid Blocks will not spread");
			this.StaticLiquidBlocks.UseSelectable = true;
			this.StaticLiquidBlocks.UseStyleColors = true;
			this.StaticLiquidBlocks.CheckedChanged += this.StaticLiquidBlocksToggled;
			this.NoFog.AutoSize = true;
			this.NoFog.BackColor = Color.Transparent;
			this.NoFog.Location = new Point(7, 46);
			this.NoFog.Name = "NoFog";
			this.NoFog.Size = new Size(62, 15);
			this.NoFog.Style = MetroColorStyle.Blue;
			this.NoFog.TabIndex = 26;
			this.NoFog.Tag = "NonHost";
			this.NoFog.Text = "No Fog";
			this.NoFog.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoFog, "Whether to remove the fog in-game");
			this.NoFog.UseSelectable = true;
			this.NoFog.UseStyleColors = true;
			this.NoFog.CheckedChanged += this.NoFogToggled;
			this.generalTab.Controls.Add(this.KeyboardCustomizerBtn);
			this.generalTab.Controls.Add(this.DebugConsoleCustomizerBtn);
			this.generalTab.Controls.Add(this.CursedSlider);
			this.generalTab.Controls.Add(this.CursedLbl);
			this.generalTab.Controls.Add(this.DLCManagerBtn);
			this.generalTab.Controls.Add(this.PreventBeingKicked);
			this.generalTab.Controls.Add(this.Cursed);
			this.generalTab.Controls.Add(this.FreezeGameWhenPaused);
			this.generalTab.Controls.Add(this.AchievementsEverywhere);
			this.generalTab.Controls.Add(this.MuteMicrophone);
			this.generalTab.Controls.Add(this.AchievementEditor);
			this.generalTab.Controls.Add(this.UnlockSignKeyboard);
			this.generalTab.Controls.Add(this.DebugConsole);
			this.generalTab.Controls.Add(this.Game);
			this.generalTab.Controls.Add(this.UIUserInterface);
			this.generalTab.Controls.Add(this.generalPanel);
			this.generalTab.Controls.Add(this.vpadDisplaySwitch);
			this.generalTab.Controls.Add(this.UIColorPickerBtn);
			this.generalTab.Controls.Add(this.DisableTeleporting);
			this.generalTab.Controls.Add(this.GamepadSplitscreen);
			this.generalTab.Controls.Add(this.disableVPadInput);
			this.generalTab.Controls.Add(this.BypassFriendsOnly);
			this.generalTab.Controls.Add(this.DisablePermanentKicks);
			this.generalTab.Controls.Add(this.MapTextEditor);
			this.generalTab.Controls.Add(this.HostOptions);
			this.generalTab.Controls.Add(this.SlowMotion);
			this.generalTab.Controls.Add(this.AllDLCUnlocked);
			this.generalTab.Controls.Add(this.ExitGame);
			this.generalTab.HorizontalScrollbarBarColor = true;
			this.generalTab.HorizontalScrollbarHighlightOnWheel = false;
			this.generalTab.HorizontalScrollbarSize = 10;
			this.generalTab.Location = new Point(4, 9);
			this.generalTab.Name = "generalTab";
			this.generalTab.Padding = new Padding(3);
			this.generalTab.Size = new Size(1122, 630);
			this.generalTab.TabIndex = 2;
			this.generalTab.Tag = "GeckoURequired";
			this.generalTab.Text = "General Game";
			this.generalTab.Theme = MetroThemeStyle.Dark;
			this.generalTab.VerticalScrollbarBarColor = true;
			this.generalTab.VerticalScrollbarHighlightOnWheel = false;
			this.generalTab.VerticalScrollbarSize = 10;
			this.KeyboardCustomizerBtn.Enabled = false;
			this.KeyboardCustomizerBtn.Location = new Point(286, 481);
			this.KeyboardCustomizerBtn.Name = "KeyboardCustomizerBtn";
			this.KeyboardCustomizerBtn.Size = new Size(550, 23);
			this.KeyboardCustomizerBtn.TabIndex = 154;
			this.KeyboardCustomizerBtn.Tag = "NonHost";
			this.KeyboardCustomizerBtn.Text = "Keyboard Customizer";
			this.KeyboardCustomizerBtn.Theme = MetroThemeStyle.Dark;
			this.KeyboardCustomizerBtn.UseSelectable = true;
			this.KeyboardCustomizerBtn.UseStyleColors = true;
			this.KeyboardCustomizerBtn.Click += this.KeyboardCustomizerBtn_Click;
			this.DebugConsoleCustomizerBtn.Enabled = false;
			this.DebugConsoleCustomizerBtn.Location = new Point(7, 510);
			this.DebugConsoleCustomizerBtn.Name = "DebugConsoleCustomizerBtn";
			this.DebugConsoleCustomizerBtn.Size = new Size(550, 23);
			this.DebugConsoleCustomizerBtn.TabIndex = 154;
			this.DebugConsoleCustomizerBtn.Tag = "NonHost";
			this.DebugConsoleCustomizerBtn.Text = "Debug Console Customizer";
			this.DebugConsoleCustomizerBtn.Theme = MetroThemeStyle.Dark;
			this.DebugConsoleCustomizerBtn.UseSelectable = true;
			this.DebugConsoleCustomizerBtn.UseStyleColors = true;
			this.DebugConsoleCustomizerBtn.Click += this.DebugConsoleCustomizerBtn_Click;
			this.StyleExtender.SetApplyMetroTheme(this.CursedSlider, true);
			this.CursedSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.CursedSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.CursedSlider.Location = new Point(66, 604);
			NumericUpDown cursedSlider = this.CursedSlider;
			int[] array18 = new int[4];
			array18[0] = 120;
			cursedSlider.Maximum = new decimal(array18);
			this.CursedSlider.Name = "CursedSlider";
			this.CursedSlider.Size = new Size(1051, 20);
			this.CursedSlider.TabIndex = 153;
			this.CursedSlider.Tag = "";
			this.ToolTipManager.SetToolTip(this.CursedSlider, "How cursed should our game get?");
			NumericUpDown cursedSlider2 = this.CursedSlider;
			int[] array19 = new int[4];
			array19[0] = 1;
			cursedSlider2.Value = new decimal(array19);
			this.CursedSlider.ValueChanged += this.CursedSliderChanged;
			this.CursedLbl.AutoSize = true;
			this.CursedLbl.FontWeight = MetroLabelWeight.Regular;
			this.CursedLbl.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.CursedLbl.Location = new Point(5, 604);
			this.CursedLbl.Name = "CursedLbl";
			this.CursedLbl.Size = new Size(55, 19);
			this.CursedLbl.Style = MetroColorStyle.Blue;
			this.CursedLbl.TabIndex = 152;
			this.CursedLbl.Tag = "NonHost";
			this.CursedLbl.Text = "Cursed:";
			this.CursedLbl.Theme = MetroThemeStyle.Dark;
			this.CursedLbl.UseStyleColors = true;
			this.DLCManagerBtn.Location = new Point(566, 510);
			this.DLCManagerBtn.Name = "DLCManagerBtn";
			this.DLCManagerBtn.Size = new Size(549, 23);
			this.DLCManagerBtn.TabIndex = 150;
			this.DLCManagerBtn.Tag = "NonHost";
			this.DLCManagerBtn.Text = "DLC Manager";
			this.DLCManagerBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DLCManagerBtn, "Opens the DLC Manager");
			this.DLCManagerBtn.UseSelectable = true;
			this.DLCManagerBtn.UseStyleColors = true;
			this.DLCManagerBtn.Click += this.DLCManagerBtn_Click;
			this.PreventBeingKicked.AutoSize = true;
			this.PreventBeingKicked.Location = new Point(475, 298);
			this.PreventBeingKicked.Name = "PreventBeingKicked";
			this.PreventBeingKicked.Size = new Size(134, 15);
			this.PreventBeingKicked.Style = MetroColorStyle.Blue;
			this.PreventBeingKicked.TabIndex = 149;
			this.PreventBeingKicked.Tag = "NonHost";
			this.PreventBeingKicked.Text = "Prevent Being Kicked";
			this.PreventBeingKicked.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.PreventBeingKicked, "Prevents you from ever being kicked.");
			this.PreventBeingKicked.UseSelectable = true;
			this.PreventBeingKicked.UseStyleColors = true;
			this.PreventBeingKicked.CheckedChanged += this.PreventBeingKickedToggled;
			this.Cursed.AutoSize = true;
			this.Cursed.Location = new Point(475, 277);
			this.Cursed.Name = "Cursed";
			this.Cursed.Size = new Size(60, 15);
			this.Cursed.Style = MetroColorStyle.Blue;
			this.Cursed.TabIndex = 149;
			this.Cursed.Tag = "NonHost";
			this.Cursed.Text = "Cursed";
			this.Cursed.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Cursed, "Cursed");
			this.Cursed.UseSelectable = true;
			this.Cursed.UseStyleColors = true;
			this.Cursed.CheckedChanged += this.CursedToggled;
			this.FreezeGameWhenPaused.AutoSize = true;
			this.FreezeGameWhenPaused.BackColor = Color.Transparent;
			this.FreezeGameWhenPaused.Location = new Point(475, 256);
			this.FreezeGameWhenPaused.Name = "FreezeGameWhenPaused";
			this.FreezeGameWhenPaused.Size = new Size(211, 15);
			this.FreezeGameWhenPaused.Style = MetroColorStyle.Blue;
			this.FreezeGameWhenPaused.TabIndex = 148;
			this.FreezeGameWhenPaused.Tag = "NonHost";
			this.FreezeGameWhenPaused.Text = "Freeze game when paused (Default)";
			this.FreezeGameWhenPaused.Theme = MetroThemeStyle.Dark;
			this.FreezeGameWhenPaused.ThreeState = true;
			this.ToolTipManager.SetToolTip(this.FreezeGameWhenPaused, "Whether it thunders or not");
			this.FreezeGameWhenPaused.UseSelectable = true;
			this.FreezeGameWhenPaused.UseStyleColors = true;
			this.FreezeGameWhenPaused.CheckedChanged += this.FreezeGameWhenPausedToggled;
			this.AchievementsEverywhere.AutoSize = true;
			this.AchievementsEverywhere.Location = new Point(475, 235);
			this.AchievementsEverywhere.Name = "AchievementsEverywhere";
			this.AchievementsEverywhere.Size = new Size(161, 15);
			this.AchievementsEverywhere.Style = MetroColorStyle.Orange;
			this.AchievementsEverywhere.TabIndex = 147;
			this.AchievementsEverywhere.Tag = "Host";
			this.AchievementsEverywhere.Text = "Achievements Everywhere";
			this.AchievementsEverywhere.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AchievementsEverywhere, "Whether achievements can be unlocked anywhere (Creative etc)");
			this.AchievementsEverywhere.UseSelectable = true;
			this.AchievementsEverywhere.UseStyleColors = true;
			this.AchievementsEverywhere.CheckedChanged += this.AchievementsEverywhereToggled;
			this.MuteMicrophone.AutoSize = true;
			this.MuteMicrophone.Location = new Point(475, 214);
			this.MuteMicrophone.Name = "MuteMicrophone";
			this.MuteMicrophone.Size = new Size(119, 15);
			this.MuteMicrophone.Style = MetroColorStyle.Blue;
			this.MuteMicrophone.TabIndex = 146;
			this.MuteMicrophone.Tag = "NonHost";
			this.MuteMicrophone.Text = "Mute Microphone";
			this.MuteMicrophone.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.MuteMicrophone, "Mutes your microphone");
			this.MuteMicrophone.UseSelectable = true;
			this.MuteMicrophone.UseStyleColors = true;
			this.MuteMicrophone.CheckedChanged += this.MuteMicrophoneToggled;
			this.AchievementEditor.Location = new Point(7, 539);
			this.AchievementEditor.Name = "AchievementEditor";
			this.AchievementEditor.Size = new Size(550, 25);
			this.AchievementEditor.Style = MetroColorStyle.Blue;
			this.AchievementEditor.TabIndex = 145;
			this.AchievementEditor.Tag = "NonHost";
			this.AchievementEditor.Text = "Achievement Editor";
			this.AchievementEditor.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AchievementEditor, "Opens the Achievement Editor, allowing you to swap achievements.");
			this.AchievementEditor.UseSelectable = true;
			this.AchievementEditor.UseStyleColors = true;
			this.AchievementEditor.Click += this.AchievementEditorClicked;
			this.UnlockSignKeyboard.AutoSize = true;
			this.UnlockSignKeyboard.Location = new Point(475, 193);
			this.UnlockSignKeyboard.Name = "UnlockSignKeyboard";
			this.UnlockSignKeyboard.Size = new Size(139, 15);
			this.UnlockSignKeyboard.Style = MetroColorStyle.Blue;
			this.UnlockSignKeyboard.TabIndex = 144;
			this.UnlockSignKeyboard.Tag = "NonHost";
			this.UnlockSignKeyboard.Text = "Unlock Sign Keyboard";
			this.UnlockSignKeyboard.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UnlockSignKeyboard, "Unlocks the full Wii U Keyboard when editing signs");
			this.UnlockSignKeyboard.UseSelectable = true;
			this.UnlockSignKeyboard.UseStyleColors = true;
			this.UnlockSignKeyboard.CheckedChanged += this.UnlockSignKeyboardToggled;
			this.DebugConsole.AutoSize = true;
			this.DebugConsole.BackColor = Color.Transparent;
			this.DebugConsole.ForeColor = SystemColors.ControlText;
			this.DebugConsole.Location = new Point(7, 46);
			this.DebugConsole.Name = "DebugConsole";
			this.DebugConsole.Size = new Size(104, 15);
			this.DebugConsole.Style = MetroColorStyle.Blue;
			this.DebugConsole.TabIndex = 143;
			this.DebugConsole.Tag = "NonHost";
			this.DebugConsole.Text = "Debug Console";
			this.DebugConsole.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DebugConsole, "Whether to show the Debug Console");
			this.DebugConsole.UseSelectable = true;
			this.DebugConsole.UseStyleColors = true;
			this.DebugConsole.CheckedChanged += this.DebugConsoleToggled;
			this.Game.AutoSize = true;
			this.Game.FontWeight = MetroLabelWeight.Regular;
			this.Game.Location = new Point(475, 3);
			this.Game.Name = "Game";
			this.Game.Size = new Size(45, 19);
			this.Game.TabIndex = 142;
			this.Game.Text = "Game";
			this.Game.Theme = MetroThemeStyle.Dark;
			this.UIUserInterface.AutoSize = true;
			this.UIUserInterface.FontWeight = MetroLabelWeight.Regular;
			this.UIUserInterface.Location = new Point(3, 3);
			this.UIUserInterface.Name = "UIUserInterface";
			this.UIUserInterface.Size = new Size(120, 19);
			this.UIUserInterface.TabIndex = 141;
			this.UIUserInterface.Text = "UI (User Interface)";
			this.UIUserInterface.Theme = MetroThemeStyle.Dark;
			this.generalPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.generalPanel.HorizontalScrollbarBarColor = true;
			this.generalPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.generalPanel.HorizontalScrollbarSize = 10;
			this.generalPanel.Location = new Point(0, 15);
			this.generalPanel.Name = "generalPanel";
			this.generalPanel.Size = new Size(1116, 1);
			this.generalPanel.TabIndex = 140;
			this.generalPanel.Theme = MetroThemeStyle.Dark;
			this.generalPanel.VerticalScrollbarBarColor = true;
			this.generalPanel.VerticalScrollbarHighlightOnWheel = false;
			this.generalPanel.VerticalScrollbarSize = 10;
			this.vpadDisplaySwitch.AutoSize = true;
			this.vpadDisplaySwitch.Location = new Point(475, 172);
			this.vpadDisplaySwitch.Name = "vpadDisplaySwitch";
			this.vpadDisplaySwitch.Size = new Size(183, 15);
			this.vpadDisplaySwitch.Style = MetroColorStyle.Blue;
			this.vpadDisplaySwitch.TabIndex = 3;
			this.vpadDisplaySwitch.Tag = "NonHost";
			this.vpadDisplaySwitch.Text = "Power Button turns off display";
			this.vpadDisplaySwitch.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.vpadDisplaySwitch, "Holding down the power button on the gamepad will turn off the screen, not console");
			this.vpadDisplaySwitch.UseSelectable = true;
			this.vpadDisplaySwitch.UseStyleColors = true;
			this.vpadDisplaySwitch.CheckedChanged += this.VpadDisplaySwitchToggled;
			this.UIColorPickerBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.UIColorPickerBtn.Location = new Point(566, 570);
			this.UIColorPickerBtn.Margin = new Padding(4, 6, 4, 6);
			this.UIColorPickerBtn.Name = "UIColorPickerBtn";
			this.UIColorPickerBtn.Size = new Size(550, 25);
			this.UIColorPickerBtn.Style = MetroColorStyle.Blue;
			this.UIColorPickerBtn.TabIndex = 32;
			this.UIColorPickerBtn.Tag = "NonHost";
			this.UIColorPickerBtn.Text = "UI Color Picker";
			this.UIColorPickerBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UIColorPickerBtn, "Here you can change the game's UI colors \r\nto match your preferences");
			this.UIColorPickerBtn.UseSelectable = true;
			this.UIColorPickerBtn.UseStyleColors = true;
			this.UIColorPickerBtn.Click += this.UiColorPickerBtnClicked;
			this.DisableTeleporting.AutoSize = true;
			this.DisableTeleporting.BackColor = Color.Transparent;
			this.DisableTeleporting.ForeColor = SystemColors.ControlText;
			this.DisableTeleporting.Location = new Point(475, 130);
			this.DisableTeleporting.Name = "DisableTeleporting";
			this.DisableTeleporting.Size = new Size(125, 15);
			this.DisableTeleporting.Style = MetroColorStyle.Orange;
			this.DisableTeleporting.TabIndex = 31;
			this.DisableTeleporting.Tag = "Host";
			this.DisableTeleporting.Text = "Disable Teleporting";
			this.DisableTeleporting.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableTeleporting, "Whether to disable the teleport command (untested online)");
			this.DisableTeleporting.UseSelectable = true;
			this.DisableTeleporting.UseStyleColors = true;
			this.DisableTeleporting.CheckedChanged += this.DisableTeleportingToggled;
			this.GamepadSplitscreen.AutoSize = true;
			this.GamepadSplitscreen.BackColor = Color.Transparent;
			this.GamepadSplitscreen.ForeColor = SystemColors.ControlText;
			this.GamepadSplitscreen.Location = new Point(7, 25);
			this.GamepadSplitscreen.Name = "GamepadSplitscreen";
			this.GamepadSplitscreen.Size = new Size(134, 15);
			this.GamepadSplitscreen.Style = MetroColorStyle.Blue;
			this.GamepadSplitscreen.TabIndex = 30;
			this.GamepadSplitscreen.Tag = "NonHost";
			this.GamepadSplitscreen.Text = "Gamepad Splitscreen";
			this.GamepadSplitscreen.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.GamepadSplitscreen, "Whether you can use splitscreen mode on the Gamepad");
			this.GamepadSplitscreen.UseSelectable = true;
			this.GamepadSplitscreen.UseStyleColors = true;
			this.GamepadSplitscreen.CheckedChanged += this.GamepadSplitscreenToggled;
			this.disableVPadInput.AutoSize = true;
			this.disableVPadInput.Location = new Point(475, 151);
			this.disableVPadInput.Name = "disableVPadInput";
			this.disableVPadInput.Size = new Size(146, 15);
			this.disableVPadInput.Style = MetroColorStyle.Blue;
			this.disableVPadInput.TabIndex = 2;
			this.disableVPadInput.Tag = "NonHost";
			this.disableVPadInput.Text = "Disable Gamepad Input";
			this.disableVPadInput.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.disableVPadInput, "Disables all input from the Gamepad including the touch screen but excluding the home button");
			this.disableVPadInput.UseSelectable = true;
			this.disableVPadInput.UseStyleColors = true;
			this.disableVPadInput.CheckedChanged += this.DisableVPadInputToggled;
			this.BypassFriendsOnly.AutoSize = true;
			this.BypassFriendsOnly.BackColor = Color.Transparent;
			this.BypassFriendsOnly.ForeColor = SystemColors.ControlText;
			this.BypassFriendsOnly.Location = new Point(475, 67);
			this.BypassFriendsOnly.Name = "BypassFriendsOnly";
			this.BypassFriendsOnly.Size = new Size(128, 15);
			this.BypassFriendsOnly.Style = MetroColorStyle.Blue;
			this.BypassFriendsOnly.TabIndex = 29;
			this.BypassFriendsOnly.Tag = "NonHost";
			this.BypassFriendsOnly.Text = "Bypass Friends Only";
			this.BypassFriendsOnly.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.BypassFriendsOnly, "Whether to bypass the \"Friends Only\" privacy setting");
			this.BypassFriendsOnly.UseSelectable = true;
			this.BypassFriendsOnly.UseStyleColors = true;
			this.BypassFriendsOnly.CheckedChanged += this.BypassFriendsOnlyToggled;
			this.DisablePermanentKicks.AutoSize = true;
			this.DisablePermanentKicks.BackColor = Color.Transparent;
			this.DisablePermanentKicks.Location = new Point(475, 46);
			this.DisablePermanentKicks.Name = "DisablePermanentKicks";
			this.DisablePermanentKicks.Size = new Size(152, 15);
			this.DisablePermanentKicks.Style = MetroColorStyle.Blue;
			this.DisablePermanentKicks.TabIndex = 25;
			this.DisablePermanentKicks.Tag = "NonHost";
			this.DisablePermanentKicks.Text = "Disable Permanent Kicks";
			this.DisablePermanentKicks.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisablePermanentKicks, "Whether to disable the \"You have been previously kicked by the host\" message and join anyway");
			this.DisablePermanentKicks.UseSelectable = true;
			this.DisablePermanentKicks.UseStyleColors = true;
			this.DisablePermanentKicks.CheckedChanged += this.DisablePermanentKicksToggled;
			this.MapTextEditor.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.MapTextEditor.Location = new Point(7, 570);
			this.MapTextEditor.Margin = new Padding(4, 6, 4, 6);
			this.MapTextEditor.Name = "MapTextEditor";
			this.MapTextEditor.Size = new Size(550, 25);
			this.MapTextEditor.Style = MetroColorStyle.Blue;
			this.MapTextEditor.TabIndex = 20;
			this.MapTextEditor.Tag = "NonHost";
			this.MapTextEditor.Text = "Map Text Editor";
			this.MapTextEditor.Theme = MetroThemeStyle.Dark;
			this.MapTextEditor.UseSelectable = true;
			this.MapTextEditor.UseStyleColors = true;
			this.MapTextEditor.Click += this.MapTextEditorClicked;
			this.HostOptions.AutoSize = true;
			this.HostOptions.Location = new Point(475, 25);
			this.HostOptions.Name = "HostOptions";
			this.HostOptions.Size = new Size(93, 15);
			this.HostOptions.Style = MetroColorStyle.Orange;
			this.HostOptions.TabIndex = 28;
			this.HostOptions.Tag = "Host";
			this.HostOptions.Text = "Host Options";
			this.HostOptions.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.HostOptions, "Whether to enable host options in host only minigames (Crashes other people when the game starts)");
			this.HostOptions.UseSelectable = true;
			this.HostOptions.UseStyleColors = true;
			this.HostOptions.CheckedChanged += this.HostOptionsToggled;
			this.SlowMotion.AutoSize = true;
			this.SlowMotion.Location = new Point(475, 109);
			this.SlowMotion.Name = "SlowMotion";
			this.SlowMotion.Size = new Size(90, 15);
			this.SlowMotion.Style = MetroColorStyle.Blue;
			this.SlowMotion.TabIndex = 139;
			this.SlowMotion.Tag = "NonHost";
			this.SlowMotion.Text = "Slow Motion";
			this.SlowMotion.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SlowMotion, "Whether the game will be slowed down");
			this.SlowMotion.UseSelectable = true;
			this.SlowMotion.UseStyleColors = true;
			this.SlowMotion.CheckedChanged += this.SlowMotionToggled;
			this.AllDLCUnlocked.AutoSize = true;
			this.AllDLCUnlocked.Location = new Point(475, 88);
			this.AllDLCUnlocked.Name = "AllDLCUnlocked";
			this.AllDLCUnlocked.Size = new Size(115, 15);
			this.AllDLCUnlocked.Style = MetroColorStyle.Blue;
			this.AllDLCUnlocked.TabIndex = 16;
			this.AllDLCUnlocked.Tag = "NonHost";
			this.AllDLCUnlocked.Text = "All DLC Unlocked";
			this.AllDLCUnlocked.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AllDLCUnlocked, "Whether to have all DLC unlocked without needing to pay");
			this.AllDLCUnlocked.UseSelectable = true;
			this.AllDLCUnlocked.UseStyleColors = true;
			this.AllDLCUnlocked.CheckedChanged += this.AllDlcUnlockedToggled;
			this.ExitGame.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.ExitGame.Location = new Point(566, 539);
			this.ExitGame.Margin = new Padding(4, 6, 4, 6);
			this.ExitGame.Name = "ExitGame";
			this.ExitGame.Size = new Size(550, 25);
			this.ExitGame.Style = MetroColorStyle.Blue;
			this.ExitGame.TabIndex = 15;
			this.ExitGame.Tag = "NonHost";
			this.ExitGame.Text = "Exit Game";
			this.ExitGame.Theme = MetroThemeStyle.Dark;
			this.ExitGame.UseSelectable = true;
			this.ExitGame.UseStyleColors = true;
			this.ExitGame.Click += this.ExitGameClicked;
			this.MinigamesTab.Controls.Add(this.MinigamesTabs);
			this.MinigamesTab.HorizontalScrollbarBarColor = true;
			this.MinigamesTab.HorizontalScrollbarHighlightOnWheel = false;
			this.MinigamesTab.HorizontalScrollbarSize = 10;
			this.MinigamesTab.Location = new Point(4, 9);
			this.MinigamesTab.Name = "MinigamesTab";
			this.MinigamesTab.Padding = new Padding(3);
			this.MinigamesTab.Size = new Size(1122, 630);
			this.MinigamesTab.TabIndex = 3;
			this.MinigamesTab.Tag = "GeckoUNeeded";
			this.MinigamesTab.Text = "Minigames";
			this.MinigamesTab.Theme = MetroThemeStyle.Dark;
			this.MinigamesTab.VerticalScrollbarBarColor = true;
			this.MinigamesTab.VerticalScrollbarHighlightOnWheel = false;
			this.MinigamesTab.VerticalScrollbarSize = 10;
			this.MinigamesTabs.Controls.Add(this.GeneralMinigames);
			this.MinigamesTabs.Controls.Add(this.Battle);
			this.MinigamesTabs.Controls.Add(this.Tumble);
			this.MinigamesTabs.Controls.Add(this.Glide);
			this.MinigamesTabs.ItemSize = new Size(280, 1);
			this.MinigamesTabs.Location = new Point(-3, 0);
			this.MinigamesTabs.Multiline = true;
			this.MinigamesTabs.Name = "MinigamesTabs";
			this.MinigamesTabs.SelectedIndex = 0;
			this.MinigamesTabs.Size = new Size(1129, 633);
			this.MinigamesTabs.SizeMode = TabSizeMode.Fixed;
			this.MinigamesTabs.TabIndex = 2;
			this.MinigamesTabs.Tag = "GeckoURequired";
			this.MinigamesTabs.TextAlign = ContentAlignment.MiddleCenter;
			this.MinigamesTabs.Theme = MetroThemeStyle.Dark;
			this.MinigamesTabs.UseSelectable = true;
			this.GeneralMinigames.BackColor = Color.White;
			this.GeneralMinigames.Controls.Add(this.Solo);
			this.GeneralMinigames.Controls.Add(this.LiquidsCanConvert);
			this.GeneralMinigames.Controls.Add(this.AllowMobs);
			this.GeneralMinigames.Controls.Add(this.NoPosLock);
			this.GeneralMinigames.Controls.Add(this.SqueakInfinitely);
			this.GeneralMinigames.Controls.Add(this.RequiredPlayersSlider);
			this.GeneralMinigames.Controls.Add(this.RequiredPlayers);
			this.GeneralMinigames.Controls.Add(this.AllPermissions);
			this.GeneralMinigames.Controls.Add(this.AlwaysDamaged);
			this.GeneralMinigames.Controls.Add(this.TNTGriefing);
			this.GeneralMinigames.Controls.Add(this.DisabledKillBarriers);
			this.GeneralMinigames.HorizontalScrollbarBarColor = true;
			this.GeneralMinigames.HorizontalScrollbarHighlightOnWheel = false;
			this.GeneralMinigames.HorizontalScrollbarSize = 10;
			this.GeneralMinigames.Location = new Point(4, 5);
			this.GeneralMinigames.Name = "GeneralMinigames";
			this.GeneralMinigames.Padding = new Padding(3);
			this.GeneralMinigames.Size = new Size(1121, 624);
			this.GeneralMinigames.TabIndex = 0;
			this.GeneralMinigames.Text = "General";
			this.GeneralMinigames.Theme = MetroThemeStyle.Dark;
			this.GeneralMinigames.VerticalScrollbarBarColor = true;
			this.GeneralMinigames.VerticalScrollbarHighlightOnWheel = false;
			this.GeneralMinigames.VerticalScrollbarSize = 10;
			this.Solo.AutoSize = true;
			this.Solo.Location = new Point(7, 175);
			this.Solo.Name = "Solo";
			this.Solo.Size = new Size(46, 15);
			this.Solo.Style = MetroColorStyle.Orange;
			this.Solo.TabIndex = 28;
			this.Solo.Tag = "Host";
			this.Solo.Text = "Solo";
			this.Solo.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.Solo, "Whether you can play Battle/Tumble alone");
			this.Solo.UseSelectable = true;
			this.Solo.UseStyleColors = true;
			this.Solo.CheckedChanged += this.SoloToggled;
			this.LiquidsCanConvert.AutoSize = true;
			this.LiquidsCanConvert.Location = new Point(7, 154);
			this.LiquidsCanConvert.Name = "LiquidsCanConvert";
			this.LiquidsCanConvert.Size = new Size(126, 15);
			this.LiquidsCanConvert.Style = MetroColorStyle.Orange;
			this.LiquidsCanConvert.TabIndex = 27;
			this.LiquidsCanConvert.Tag = "Host";
			this.LiquidsCanConvert.Text = "Liquids can convert";
			this.LiquidsCanConvert.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.LiquidsCanConvert, "Whether lava/water can convert to stone/cobblestone/obsidian");
			this.LiquidsCanConvert.UseSelectable = true;
			this.LiquidsCanConvert.UseStyleColors = true;
			this.LiquidsCanConvert.CheckedChanged += this.LiquidsCanConvertToggled;
			this.AllowMobs.AutoSize = true;
			this.AllowMobs.Location = new Point(7, 133);
			this.AllowMobs.Name = "AllowMobs";
			this.AllowMobs.Size = new Size(86, 15);
			this.AllowMobs.Style = MetroColorStyle.Orange;
			this.AllowMobs.TabIndex = 26;
			this.AllowMobs.Tag = "Host";
			this.AllowMobs.Text = "Allow Mobs";
			this.AllowMobs.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AllowMobs, "Whether mobs are allowed to be spawned during Minigames \r\n(including through spawn eggs)");
			this.AllowMobs.UseSelectable = true;
			this.AllowMobs.UseStyleColors = true;
			this.AllowMobs.CheckedChanged += this.AllowMobsToggled;
			this.NoPosLock.AutoSize = true;
			this.NoPosLock.Location = new Point(7, 112);
			this.NoPosLock.Name = "NoPosLock";
			this.NoPosLock.Size = new Size(113, 15);
			this.NoPosLock.Style = MetroColorStyle.Blue;
			this.NoPosLock.TabIndex = 25;
			this.NoPosLock.Tag = "NonHost";
			this.NoPosLock.Text = "No Position Lock";
			this.NoPosLock.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.NoPosLock, "Whether you can move during countdowns");
			this.NoPosLock.UseSelectable = true;
			this.NoPosLock.UseStyleColors = true;
			this.NoPosLock.CheckedChanged += this.NoPositionLockToggled;
			this.SqueakInfinitely.AutoSize = true;
			this.SqueakInfinitely.Location = new Point(7, 90);
			this.SqueakInfinitely.Name = "SqueakInfinitely";
			this.SqueakInfinitely.Size = new Size(110, 15);
			this.SqueakInfinitely.Style = MetroColorStyle.Blue;
			this.SqueakInfinitely.TabIndex = 24;
			this.SqueakInfinitely.Tag = "NonHost";
			this.SqueakInfinitely.Text = "Squeak Infinitely";
			this.SqueakInfinitely.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SqueakInfinitely, "Whether you will be able to squeak infinitely as a bat");
			this.SqueakInfinitely.UseSelectable = true;
			this.SqueakInfinitely.UseStyleColors = true;
			this.SqueakInfinitely.CheckedChanged += this.SqueakInfinitelyToggled;
			this.StyleExtender.SetApplyMetroTheme(this.RequiredPlayersSlider, true);
			this.RequiredPlayersSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.RequiredPlayersSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.RequiredPlayersSlider.Location = new Point(124, 594);
			NumericUpDown requiredPlayersSlider = this.RequiredPlayersSlider;
			int[] array20 = new int[4];
			array20[0] = 512;
			requiredPlayersSlider.Maximum = new decimal(array20);
			this.RequiredPlayersSlider.Name = "RequiredPlayersSlider";
			this.RequiredPlayersSlider.Size = new Size(981, 20);
			this.RequiredPlayersSlider.TabIndex = 23;
			this.ToolTipManager.SetToolTip(this.RequiredPlayersSlider, "How many players do we need to start a match?");
			NumericUpDown requiredPlayersSlider2 = this.RequiredPlayersSlider;
			int[] array21 = new int[4];
			array21[0] = 2;
			requiredPlayersSlider2.Value = new decimal(array21);
			this.RequiredPlayersSlider.ValueChanged += this.RequiredPlayersSliderChanged;
			this.RequiredPlayers.AutoSize = true;
			this.RequiredPlayers.FontWeight = MetroLabelWeight.Regular;
			this.RequiredPlayers.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.RequiredPlayers.Location = new Point(5, 594);
			this.RequiredPlayers.Name = "RequiredPlayers";
			this.RequiredPlayers.Size = new Size(113, 19);
			this.RequiredPlayers.Style = MetroColorStyle.Orange;
			this.RequiredPlayers.TabIndex = 22;
			this.RequiredPlayers.Tag = "Host";
			this.RequiredPlayers.Text = "Required Players:";
			this.RequiredPlayers.Theme = MetroThemeStyle.Dark;
			this.RequiredPlayers.UseStyleColors = true;
			this.AllPermissions.AutoSize = true;
			this.AllPermissions.Location = new Point(7, 6);
			this.AllPermissions.Name = "AllPermissions";
			this.AllPermissions.Size = new Size(98, 15);
			this.AllPermissions.Style = MetroColorStyle.Blue;
			this.AllPermissions.TabIndex = 2;
			this.AllPermissions.Tag = "NonHost";
			this.AllPermissions.Text = "All Permisions";
			this.AllPermissions.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AllPermissions, "Whether you'll be granted all permissions (placing, breaking, using)");
			this.AllPermissions.UseSelectable = true;
			this.AllPermissions.UseStyleColors = true;
			this.AllPermissions.CheckedChanged += this.AllPermissionsToggled;
			this.AlwaysDamaged.AutoSize = true;
			this.AlwaysDamaged.Location = new Point(7, 48);
			this.AlwaysDamaged.Name = "AlwaysDamaged";
			this.AlwaysDamaged.Size = new Size(114, 15);
			this.AlwaysDamaged.Style = MetroColorStyle.Orange;
			this.AlwaysDamaged.TabIndex = 4;
			this.AlwaysDamaged.Tag = "Host";
			this.AlwaysDamaged.Text = "Always Damaged";
			this.AlwaysDamaged.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AlwaysDamaged, "Whether you will repeatedly be damaged");
			this.AlwaysDamaged.UseSelectable = true;
			this.AlwaysDamaged.UseStyleColors = true;
			this.AlwaysDamaged.CheckedChanged += this.AlwaysDamagedToggled;
			this.TNTGriefing.AutoSize = true;
			this.TNTGriefing.Location = new Point(7, 27);
			this.TNTGriefing.Name = "TNTGriefing";
			this.TNTGriefing.Size = new Size(91, 15);
			this.TNTGriefing.Style = MetroColorStyle.Orange;
			this.TNTGriefing.TabIndex = 7;
			this.TNTGriefing.Tag = "Host";
			this.TNTGriefing.Text = "TNT Griefing";
			this.TNTGriefing.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.TNTGriefing, "Whether TNT is able to destroy blocks or not");
			this.TNTGriefing.UseSelectable = true;
			this.TNTGriefing.UseStyleColors = true;
			this.TNTGriefing.CheckedChanged += this.TntGriefingToggled;
			this.DisabledKillBarriers.AutoSize = true;
			this.DisabledKillBarriers.Location = new Point(7, 69);
			this.DisabledKillBarriers.Name = "DisabledKillBarriers";
			this.DisabledKillBarriers.Size = new Size(129, 15);
			this.DisabledKillBarriers.Style = MetroColorStyle.Orange;
			this.DisabledKillBarriers.TabIndex = 8;
			this.DisabledKillBarriers.Tag = "Host";
			this.DisabledKillBarriers.Text = "Disabled Kill Barriers";
			this.DisabledKillBarriers.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisabledKillBarriers, "Whether Kill Barriers will be disabled");
			this.DisabledKillBarriers.UseSelectable = true;
			this.DisabledKillBarriers.UseStyleColors = true;
			this.DisabledKillBarriers.CheckedChanged += this.DisabledKillBarriersToggled;
			this.Battle.BackColor = Color.White;
			this.Battle.Controls.Add(this.MapSizeBox);
			this.Battle.Controls.Add(this.MapSizeLbl);
			this.Battle.Controls.Add(this.EndGame);
			this.Battle.Controls.Add(this.RefillInterval);
			this.Battle.Controls.Add(this.RefillIntervalSlider);
			this.Battle.Controls.Add(this.AntiEndGame);
			this.Battle.HorizontalScrollbarBarColor = true;
			this.Battle.HorizontalScrollbarHighlightOnWheel = false;
			this.Battle.HorizontalScrollbarSize = 10;
			this.Battle.Location = new Point(4, 5);
			this.Battle.Name = "Battle";
			this.Battle.Padding = new Padding(3);
			this.Battle.Size = new Size(1121, 624);
			this.Battle.TabIndex = 1;
			this.Battle.Text = "Battle";
			this.Battle.Theme = MetroThemeStyle.Dark;
			this.Battle.VerticalScrollbarBarColor = true;
			this.Battle.VerticalScrollbarHighlightOnWheel = false;
			this.Battle.VerticalScrollbarSize = 10;
			this.MapSizeBox.FontSize = MetroComboBoxSize.Small;
			this.MapSizeBox.FontWeight = MetroComboBoxWeight.Light;
			this.MapSizeBox.FormattingEnabled = true;
			this.MapSizeBox.ItemHeight = 19;
			this.MapSizeBox.Items.AddRange(new object[]
			{
				"Small",
				"Large"
			});
			this.MapSizeBox.Location = new Point(79, 543);
			this.MapSizeBox.Name = "MapSizeBox";
			this.MapSizeBox.Size = new Size(1036, 25);
			this.MapSizeBox.TabIndex = 177;
			this.MapSizeBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.MapSizeBox, "What size map should we play on?");
			this.MapSizeBox.UseSelectable = true;
			this.MapSizeBox.SelectedIndexChanged += this.MapSizeBoxChanged;
			this.MapSizeLbl.AutoSize = true;
			this.MapSizeLbl.FontWeight = MetroLabelWeight.Regular;
			this.MapSizeLbl.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.MapSizeLbl.Location = new Point(6, 543);
			this.MapSizeLbl.Name = "MapSizeLbl";
			this.MapSizeLbl.Size = new Size(67, 19);
			this.MapSizeLbl.Style = MetroColorStyle.Orange;
			this.MapSizeLbl.TabIndex = 176;
			this.MapSizeLbl.Tag = "Host";
			this.MapSizeLbl.Text = "Map Size:";
			this.MapSizeLbl.Theme = MetroThemeStyle.Dark;
			this.MapSizeLbl.UseStyleColors = true;
			this.EndGame.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.EndGame.BackColor = SystemColors.Control;
			this.EndGame.Location = new Point(7, 507);
			this.EndGame.Margin = new Padding(4, 6, 4, 6);
			this.EndGame.Name = "EndGame";
			this.EndGame.Size = new Size(1108, 27);
			this.EndGame.Style = MetroColorStyle.Orange;
			this.EndGame.TabIndex = 9;
			this.EndGame.Tag = "Host";
			this.EndGame.Text = "End Game";
			this.EndGame.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.EndGame, "Ends the current Battle Match");
			this.EndGame.UseSelectable = true;
			this.EndGame.UseStyleColors = true;
			this.EndGame.Click += this.EndGameClicked;
			this.RefillInterval.AutoSize = true;
			this.RefillInterval.FontWeight = MetroLabelWeight.Regular;
			this.RefillInterval.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.RefillInterval.Location = new Point(5, 574);
			this.RefillInterval.Name = "RefillInterval";
			this.RefillInterval.Size = new Size(129, 19);
			this.RefillInterval.Style = MetroColorStyle.Orange;
			this.RefillInterval.TabIndex = 28;
			this.RefillInterval.Tag = "Host";
			this.RefillInterval.Text = "Chest Refill Interval:";
			this.RefillInterval.Theme = MetroThemeStyle.Dark;
			this.RefillInterval.UseStyleColors = true;
			this.StyleExtender.SetApplyMetroTheme(this.RefillIntervalSlider, true);
			this.RefillIntervalSlider.BackColor = Color.FromArgb(17, 17, 17);
			this.RefillIntervalSlider.ForeColor = Color.FromArgb(170, 170, 170);
			this.RefillIntervalSlider.Location = new Point(140, 574);
			NumericUpDown refillIntervalSlider = this.RefillIntervalSlider;
			int[] array22 = new int[4];
			array22[0] = 120;
			refillIntervalSlider.Maximum = new decimal(array22);
			this.RefillIntervalSlider.Name = "RefillIntervalSlider";
			this.RefillIntervalSlider.Size = new Size(975, 20);
			this.RefillIntervalSlider.TabIndex = 29;
			this.ToolTipManager.SetToolTip(this.RefillIntervalSlider, "How long should chests take to refill? (in seconds)");
			NumericUpDown refillIntervalSlider2 = this.RefillIntervalSlider;
			int[] array23 = new int[4];
			array23[0] = 30;
			refillIntervalSlider2.Value = new decimal(array23);
			this.RefillIntervalSlider.ValueChanged += this.RefillIntervalSliderChanged;
			this.AntiEndGame.AutoSize = true;
			this.AntiEndGame.Location = new Point(7, 6);
			this.AntiEndGame.Name = "AntiEndGame";
			this.AntiEndGame.Size = new Size(102, 15);
			this.AntiEndGame.Style = MetroColorStyle.Orange;
			this.AntiEndGame.TabIndex = 5;
			this.AntiEndGame.Tag = "Host";
			this.AntiEndGame.Text = "Anti End Game";
			this.AntiEndGame.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.AntiEndGame, "Whether the game will end");
			this.AntiEndGame.UseSelectable = true;
			this.AntiEndGame.UseStyleColors = true;
			this.AntiEndGame.CheckedChanged += this.AntiEndGameToggled;
			this.Tumble.BackColor = Color.White;
			this.Tumble.Controls.Add(this.DisableCameraAnimation);
			this.Tumble.Controls.Add(this.UnlockInventoty);
			this.Tumble.Controls.Add(this.TumbleHUD);
			this.Tumble.HorizontalScrollbarBarColor = true;
			this.Tumble.HorizontalScrollbarHighlightOnWheel = false;
			this.Tumble.HorizontalScrollbarSize = 10;
			this.Tumble.Location = new Point(4, 5);
			this.Tumble.Name = "Tumble";
			this.Tumble.Padding = new Padding(3);
			this.Tumble.Size = new Size(1121, 624);
			this.Tumble.TabIndex = 2;
			this.Tumble.Text = "Tumble";
			this.Tumble.Theme = MetroThemeStyle.Dark;
			this.Tumble.VerticalScrollbarBarColor = true;
			this.Tumble.VerticalScrollbarHighlightOnWheel = false;
			this.Tumble.VerticalScrollbarSize = 10;
			this.DisableCameraAnimation.AutoSize = true;
			this.DisableCameraAnimation.Location = new Point(7, 50);
			this.DisableCameraAnimation.Name = "DisableCameraAnimation";
			this.DisableCameraAnimation.Size = new Size(164, 15);
			this.DisableCameraAnimation.Style = MetroColorStyle.Blue;
			this.DisableCameraAnimation.TabIndex = 5;
			this.DisableCameraAnimation.Tag = "NonHost";
			this.DisableCameraAnimation.Text = "Disable Camera Animation";
			this.DisableCameraAnimation.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.DisableCameraAnimation, "Whether to disable the start animation in Tumble");
			this.DisableCameraAnimation.UseSelectable = true;
			this.DisableCameraAnimation.UseStyleColors = true;
			this.DisableCameraAnimation.CheckedChanged += this.DisableCameraAnimationToggled;
			this.UnlockInventoty.AutoSize = true;
			this.UnlockInventoty.Location = new Point(7, 28);
			this.UnlockInventoty.Name = "UnlockInventoty";
			this.UnlockInventoty.Size = new Size(113, 15);
			this.UnlockInventoty.Style = MetroColorStyle.Blue;
			this.UnlockInventoty.TabIndex = 4;
			this.UnlockInventoty.Tag = "NonHost";
			this.UnlockInventoty.Text = "Unlock Inventory";
			this.UnlockInventoty.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.UnlockInventoty, "Whether you can open the Inventory in Tumble");
			this.UnlockInventoty.UseSelectable = true;
			this.UnlockInventoty.UseStyleColors = true;
			this.UnlockInventoty.CheckedChanged += this.UnlockInventoryToggled;
			this.TumbleHUD.AutoSize = true;
			this.TumbleHUD.Location = new Point(7, 6);
			this.TumbleHUD.Name = "TumbleHUD";
			this.TumbleHUD.Size = new Size(92, 15);
			this.TumbleHUD.Style = MetroColorStyle.Blue;
			this.TumbleHUD.TabIndex = 3;
			this.TumbleHUD.Tag = "NonHost";
			this.TumbleHUD.Text = "Tumble HUD";
			this.TumbleHUD.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.TumbleHUD, "Whether to disable the HUD in Tumble");
			this.TumbleHUD.UseSelectable = true;
			this.TumbleHUD.UseStyleColors = true;
			this.TumbleHUD.CheckedChanged += this.TumbleHudToggled;
			this.Glide.BackColor = Color.White;
			this.Glide.Controls.Add(this.ringScoreB);
			this.Glide.Controls.Add(this.ringScoreBlue);
			this.Glide.Controls.Add(this.ringScoreO);
			this.Glide.Controls.Add(this.ringScoreOrange);
			this.Glide.Controls.Add(this.ringScoreG);
			this.Glide.Controls.Add(this.ringScoreGreen);
			this.Glide.HorizontalScrollbarBarColor = true;
			this.Glide.HorizontalScrollbarHighlightOnWheel = false;
			this.Glide.HorizontalScrollbarSize = 10;
			this.Glide.Location = new Point(4, 5);
			this.Glide.Name = "Glide";
			this.Glide.Padding = new Padding(3);
			this.Glide.Size = new Size(1121, 624);
			this.Glide.TabIndex = 3;
			this.Glide.Text = "Glide";
			this.Glide.Theme = MetroThemeStyle.Dark;
			this.Glide.VerticalScrollbarBarColor = true;
			this.Glide.VerticalScrollbarHighlightOnWheel = false;
			this.Glide.VerticalScrollbarSize = 10;
			this.ringScoreB.AutoSize = true;
			this.ringScoreB.FontWeight = MetroLabelWeight.Regular;
			this.ringScoreB.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.ringScoreB.Location = new Point(7, 55);
			this.ringScoreB.Name = "ringScoreB";
			this.ringScoreB.Size = new Size(114, 19);
			this.ringScoreB.Style = MetroColorStyle.Orange;
			this.ringScoreB.TabIndex = 35;
			this.ringScoreB.Tag = "Host";
			this.ringScoreB.Text = "Ring Score (Blue):";
			this.ringScoreB.Theme = MetroThemeStyle.Dark;
			this.ringScoreB.UseStyleColors = true;
			this.StyleExtender.SetApplyMetroTheme(this.ringScoreBlue, true);
			this.ringScoreBlue.BackColor = Color.FromArgb(17, 17, 17);
			this.ringScoreBlue.ForeColor = Color.FromArgb(170, 170, 170);
			this.ringScoreBlue.Location = new Point(145, 55);
			NumericUpDown numericUpDown = this.ringScoreBlue;
			int[] array24 = new int[4];
			array24[0] = 10000;
			numericUpDown.Maximum = new decimal(array24);
			this.ringScoreBlue.Name = "ringScoreBlue";
			this.ringScoreBlue.Size = new Size(970, 20);
			this.ringScoreBlue.TabIndex = 36;
			this.ringScoreBlue.Tag = "";
			this.ToolTipManager.SetToolTip(this.ringScoreBlue, "How many score does this type of ring give?");
			this.ringScoreO.AutoSize = true;
			this.ringScoreO.FontWeight = MetroLabelWeight.Regular;
			this.ringScoreO.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.ringScoreO.Location = new Point(7, 29);
			this.ringScoreO.Name = "ringScoreO";
			this.ringScoreO.Size = new Size(134, 19);
			this.ringScoreO.Style = MetroColorStyle.Orange;
			this.ringScoreO.TabIndex = 33;
			this.ringScoreO.Tag = "Host";
			this.ringScoreO.Text = "Ring Score (Orange):";
			this.ringScoreO.Theme = MetroThemeStyle.Dark;
			this.ringScoreO.UseStyleColors = true;
			this.StyleExtender.SetApplyMetroTheme(this.ringScoreOrange, true);
			this.ringScoreOrange.BackColor = Color.FromArgb(17, 17, 17);
			this.ringScoreOrange.ForeColor = Color.FromArgb(170, 170, 170);
			this.ringScoreOrange.Location = new Point(145, 29);
			NumericUpDown numericUpDown2 = this.ringScoreOrange;
			int[] array25 = new int[4];
			array25[0] = 10000;
			numericUpDown2.Maximum = new decimal(array25);
			this.ringScoreOrange.Name = "ringScoreOrange";
			this.ringScoreOrange.Size = new Size(970, 20);
			this.ringScoreOrange.TabIndex = 34;
			this.ringScoreOrange.Tag = "";
			this.ToolTipManager.SetToolTip(this.ringScoreOrange, "How many score does this type of ring give?");
			this.ringScoreOrange.ValueChanged += this.GlideRingScoreSliderChanged;
			this.ringScoreG.AutoSize = true;
			this.ringScoreG.FontWeight = MetroLabelWeight.Regular;
			this.ringScoreG.ForeColor = Color.FromArgb(222, 0, 0, 0);
			this.ringScoreG.Location = new Point(7, 3);
			this.ringScoreG.Name = "ringScoreG";
			this.ringScoreG.Size = new Size(125, 19);
			this.ringScoreG.Style = MetroColorStyle.Orange;
			this.ringScoreG.TabIndex = 31;
			this.ringScoreG.Tag = "Host";
			this.ringScoreG.Text = "Ring Score (Green):";
			this.ringScoreG.Theme = MetroThemeStyle.Dark;
			this.ringScoreG.UseStyleColors = true;
			this.StyleExtender.SetApplyMetroTheme(this.ringScoreGreen, true);
			this.ringScoreGreen.BackColor = Color.FromArgb(17, 17, 17);
			this.ringScoreGreen.ForeColor = Color.FromArgb(170, 170, 170);
			this.ringScoreGreen.Location = new Point(145, 3);
			NumericUpDown numericUpDown3 = this.ringScoreGreen;
			int[] array26 = new int[4];
			array26[0] = 10000;
			numericUpDown3.Maximum = new decimal(array26);
			this.ringScoreGreen.Name = "ringScoreGreen";
			this.ringScoreGreen.Size = new Size(970, 20);
			this.ringScoreGreen.TabIndex = 32;
			this.ringScoreGreen.Tag = "";
			this.ToolTipManager.SetToolTip(this.ringScoreGreen, "How many score does this type of ring give?");
			this.ringScoreGreen.ValueChanged += this.GlideRingScoreSliderChanged;
			this.commandsTab.Controls.Add(this.CommandsWarnLbl);
			this.commandsTab.Controls.Add(this.CommandsInMinigames);
			this.commandsTab.Controls.Add(this.tellrawLbl);
			this.commandsTab.Controls.Add(this.tellrawPanel);
			this.commandsTab.Controls.Add(this.xpCmdLbl);
			this.commandsTab.Controls.Add(this.xpPanel);
			this.commandsTab.Controls.Add(this.gamemodeCmdLbl);
			this.commandsTab.Controls.Add(this.gamemodePanel);
			this.commandsTab.Controls.Add(this.worldCmdLbl);
			this.commandsTab.Controls.Add(this.worldPanel);
			this.commandsTab.Controls.Add(this.playerCmdLbl);
			this.commandsTab.Controls.Add(this.playerPanel);
			this.commandsTab.Controls.Add(this.timeCmdLbl);
			this.commandsTab.Controls.Add(this.timePanel);
			this.commandsTab.Controls.Add(this.enchantCmdLbl);
			this.commandsTab.Controls.Add(this.enchantPanel);
			this.commandsTab.Controls.Add(this.giveCmdLabel);
			this.commandsTab.Controls.Add(this.giveCommandPanel);
			this.commandsTab.HorizontalScrollbarBarColor = true;
			this.commandsTab.HorizontalScrollbarHighlightOnWheel = false;
			this.commandsTab.HorizontalScrollbarSize = 10;
			this.commandsTab.Location = new Point(4, 9);
			this.commandsTab.Name = "commandsTab";
			this.commandsTab.Size = new Size(1122, 630);
			this.commandsTab.TabIndex = 7;
			this.commandsTab.Tag = "GeckoURequired";
			this.commandsTab.Text = "Commands";
			this.commandsTab.Theme = MetroThemeStyle.Dark;
			this.commandsTab.VerticalScrollbarBarColor = true;
			this.commandsTab.VerticalScrollbarHighlightOnWheel = false;
			this.commandsTab.VerticalScrollbarSize = 10;
			this.CommandsWarnLbl.FontSize = MetroLabelSize.Tall;
			this.CommandsWarnLbl.FontWeight = MetroLabelWeight.Regular;
			this.CommandsWarnLbl.Location = new Point(106, 353);
			this.CommandsWarnLbl.Name = "CommandsWarnLbl";
			this.CommandsWarnLbl.Size = new Size(912, 230);
			this.CommandsWarnLbl.TabIndex = 52;
			this.CommandsWarnLbl.Text = "Commands require you to be the host or a moderator. If you want to use commands in minigames make sure to \r\nselect the \"Commands in Minigames\" option";
			this.CommandsWarnLbl.TextAlign = ContentAlignment.MiddleCenter;
			this.CommandsWarnLbl.Theme = MetroThemeStyle.Dark;
			this.CommandsInMinigames.AutoSize = true;
			this.CommandsInMinigames.Location = new Point(95, 335);
			this.CommandsInMinigames.Name = "CommandsInMinigames";
			this.CommandsInMinigames.Size = new Size(160, 15);
			this.CommandsInMinigames.Style = MetroColorStyle.Orange;
			this.CommandsInMinigames.TabIndex = 51;
			this.CommandsInMinigames.Tag = "Host";
			this.CommandsInMinigames.Text = "Commands in Minigames";
			this.CommandsInMinigames.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CommandsInMinigames, "Allows commands to be executed within minigame worlds.");
			this.CommandsInMinigames.UseSelectable = true;
			this.CommandsInMinigames.UseStyleColors = true;
			this.CommandsInMinigames.CheckedChanged += this.CommandsInMinigamesToggled;
			this.tellrawLbl.Anchor = AnchorStyles.Top;
			this.tellrawLbl.AutoSize = true;
			this.tellrawLbl.BackColor = Color.Transparent;
			this.tellrawLbl.FontWeight = MetroLabelWeight.Regular;
			this.tellrawLbl.Location = new Point(475, 174);
			this.tellrawLbl.Name = "tellrawLbl";
			this.tellrawLbl.Size = new Size(54, 19);
			this.tellrawLbl.Style = MetroColorStyle.Orange;
			this.tellrawLbl.TabIndex = 50;
			this.tellrawLbl.Tag = "Host";
			this.tellrawLbl.Text = "/tellraw";
			this.tellrawLbl.Theme = MetroThemeStyle.Dark;
			this.tellrawLbl.UseStyleColors = true;
			this.tellrawPanel.Anchor = AnchorStyles.Top;
			this.tellrawPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.tellrawPanel.Controls.Add(this.tellStyleLbl);
			this.tellrawPanel.Controls.Add(this.customTellBox);
			this.tellrawPanel.Controls.Add(this.javaTellBox);
			this.tellrawPanel.Controls.Add(this.bedrockTellBox);
			this.tellrawPanel.Controls.Add(this.tellMsgBox);
			this.tellrawPanel.Controls.Add(this.tellrawCmdBtn);
			this.tellrawPanel.Controls.Add(this.tellNameBox);
			this.tellrawPanel.HorizontalScrollbarBarColor = true;
			this.tellrawPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.tellrawPanel.HorizontalScrollbarSize = 10;
			this.tellrawPanel.Location = new Point(471, 184);
			this.tellrawPanel.Name = "tellrawPanel";
			this.tellrawPanel.Size = new Size(548, 145);
			this.tellrawPanel.TabIndex = 49;
			this.tellrawPanel.Theme = MetroThemeStyle.Dark;
			this.tellrawPanel.VerticalScrollbarBarColor = true;
			this.tellrawPanel.VerticalScrollbarHighlightOnWheel = false;
			this.tellrawPanel.VerticalScrollbarSize = 10;
			this.tellStyleLbl.Anchor = AnchorStyles.Top;
			this.tellStyleLbl.AutoSize = true;
			this.tellStyleLbl.BackColor = Color.Transparent;
			this.tellStyleLbl.FontWeight = MetroLabelWeight.Regular;
			this.tellStyleLbl.Location = new Point(3, 66);
			this.tellStyleLbl.Name = "tellStyleLbl";
			this.tellStyleLbl.Size = new Size(81, 19);
			this.tellStyleLbl.TabIndex = 51;
			this.tellStyleLbl.Text = "Name Style:";
			this.tellStyleLbl.Theme = MetroThemeStyle.Dark;
			this.customTellBox.AutoSize = true;
			this.customTellBox.Location = new Point(339, 70);
			this.customTellBox.Name = "customTellBox";
			this.customTellBox.Size = new Size(128, 15);
			this.customTellBox.TabIndex = 23;
			this.customTellBox.Text = "Custom ( no prefix )";
			this.customTellBox.Theme = MetroThemeStyle.Dark;
			this.customTellBox.UseSelectable = true;
			this.javaTellBox.AutoSize = true;
			this.javaTellBox.Location = new Point(229, 70);
			this.javaTellBox.Name = "javaTellBox";
			this.javaTellBox.Size = new Size(104, 15);
			this.javaTellBox.TabIndex = 23;
			this.javaTellBox.Text = "Java ( [NAME] )";
			this.javaTellBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.javaTellBox, "Whether to use Java style chat messages");
			this.javaTellBox.UseSelectable = true;
			this.bedrockTellBox.AutoSize = true;
			this.bedrockTellBox.Checked = true;
			this.bedrockTellBox.Location = new Point(90, 70);
			this.bedrockTellBox.Name = "bedrockTellBox";
			this.bedrockTellBox.Size = new Size(133, 15);
			this.bedrockTellBox.TabIndex = 22;
			this.bedrockTellBox.TabStop = true;
			this.bedrockTellBox.Text = "Bedrock ( <NAME> )";
			this.bedrockTellBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.bedrockTellBox, "Whether to use Bedrock style chat messages");
			this.bedrockTellBox.UseSelectable = true;
			this.tellMsgBox.CustomButton.Image = null;
			this.tellMsgBox.CustomButton.Location = new Point(518, 1);
			this.tellMsgBox.CustomButton.Name = "";
			this.tellMsgBox.CustomButton.Size = new Size(21, 21);
			this.tellMsgBox.CustomButton.Style = MetroColorStyle.Blue;
			this.tellMsgBox.CustomButton.TabIndex = 1;
			this.tellMsgBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.tellMsgBox.CustomButton.UseSelectable = true;
			this.tellMsgBox.CustomButton.Visible = false;
			this.tellMsgBox.Lines = new string[0];
			this.tellMsgBox.Location = new Point(3, 40);
			this.tellMsgBox.MaxLength = 140;
			this.tellMsgBox.Name = "tellMsgBox";
			this.tellMsgBox.PasswordChar = '\0';
			this.tellMsgBox.PromptText = "Enter message... (Pressing ENTER also sends the message)";
			this.tellMsgBox.ScrollBars = ScrollBars.None;
			this.tellMsgBox.SelectedText = "";
			this.tellMsgBox.SelectionLength = 0;
			this.tellMsgBox.SelectionStart = 0;
			this.tellMsgBox.ShortcutsEnabled = true;
			this.tellMsgBox.Size = new Size(540, 23);
			this.tellMsgBox.TabIndex = 21;
			this.tellMsgBox.TextAlign = HorizontalAlignment.Center;
			this.tellMsgBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.tellMsgBox, "The message you want to send");
			this.tellMsgBox.UseSelectable = true;
			this.tellMsgBox.WaterMark = "Enter message... (Pressing ENTER also sends the message)";
			this.tellMsgBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.tellMsgBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.tellMsgBox.KeyDown += this.DetectEnterPress;
			this.tellrawCmdBtn.FontWeight = MetroButtonWeight.Regular;
			this.tellrawCmdBtn.Location = new Point(3, 115);
			this.tellrawCmdBtn.Name = "tellrawCmdBtn";
			this.tellrawCmdBtn.Size = new Size(540, 23);
			this.tellrawCmdBtn.TabIndex = 19;
			this.tellrawCmdBtn.Text = "/tellraw";
			this.tellrawCmdBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.tellrawCmdBtn, "Sends the chat message to everyone.");
			this.tellrawCmdBtn.UseSelectable = true;
			this.tellrawCmdBtn.Click += this.TellrawCmdBtnClicked;
			this.tellNameBox.CustomButton.Image = null;
			this.tellNameBox.CustomButton.Location = new Point(518, 1);
			this.tellNameBox.CustomButton.Name = "";
			this.tellNameBox.CustomButton.Size = new Size(21, 21);
			this.tellNameBox.CustomButton.Style = MetroColorStyle.Blue;
			this.tellNameBox.CustomButton.TabIndex = 1;
			this.tellNameBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.tellNameBox.CustomButton.UseSelectable = true;
			this.tellNameBox.CustomButton.Visible = false;
			this.tellNameBox.Lines = new string[0];
			this.tellNameBox.Location = new Point(3, 11);
			this.tellNameBox.MaxLength = 32;
			this.tellNameBox.Name = "tellNameBox";
			this.tellNameBox.PasswordChar = '\0';
			this.tellNameBox.PromptText = "Enter name... (not required)";
			this.tellNameBox.ScrollBars = ScrollBars.None;
			this.tellNameBox.SelectedText = "";
			this.tellNameBox.SelectionLength = 0;
			this.tellNameBox.SelectionStart = 0;
			this.tellNameBox.ShortcutsEnabled = true;
			this.tellNameBox.Size = new Size(540, 23);
			this.tellNameBox.TabIndex = 20;
			this.tellNameBox.TextAlign = HorizontalAlignment.Center;
			this.tellNameBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.tellNameBox, "The name of who sent this message");
			this.tellNameBox.UseSelectable = true;
			this.tellNameBox.WaterMark = "Enter name... (not required)";
			this.tellNameBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.tellNameBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.xpCmdLbl.Anchor = AnchorStyles.Top;
			this.xpCmdLbl.AutoSize = true;
			this.xpCmdLbl.BackColor = Color.Transparent;
			this.xpCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.xpCmdLbl.Location = new Point(289, 174);
			this.xpCmdLbl.Name = "xpCmdLbl";
			this.xpCmdLbl.Size = new Size(28, 19);
			this.xpCmdLbl.Style = MetroColorStyle.Blue;
			this.xpCmdLbl.TabIndex = 48;
			this.xpCmdLbl.Tag = "NonHost";
			this.xpCmdLbl.Text = "/xp";
			this.xpCmdLbl.Theme = MetroThemeStyle.Dark;
			this.xpCmdLbl.UseStyleColors = true;
			this.xpPanel.Anchor = AnchorStyles.Top;
			this.xpPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.xpPanel.Controls.Add(this.giveXPLevelsBtn);
			this.xpPanel.Controls.Add(this.giveXPOrbsBtn);
			this.xpPanel.Controls.Add(this.xpAmountBox);
			this.xpPanel.HorizontalScrollbarBarColor = true;
			this.xpPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.xpPanel.HorizontalScrollbarSize = 10;
			this.xpPanel.Location = new Point(285, 184);
			this.xpPanel.Name = "xpPanel";
			this.xpPanel.Size = new Size(180, 145);
			this.xpPanel.TabIndex = 47;
			this.xpPanel.Theme = MetroThemeStyle.Dark;
			this.xpPanel.VerticalScrollbarBarColor = true;
			this.xpPanel.VerticalScrollbarHighlightOnWheel = false;
			this.xpPanel.VerticalScrollbarSize = 10;
			this.giveXPLevelsBtn.FontWeight = MetroButtonWeight.Regular;
			this.giveXPLevelsBtn.Location = new Point(3, 67);
			this.giveXPLevelsBtn.Name = "giveXPLevelsBtn";
			this.giveXPLevelsBtn.Size = new Size(171, 23);
			this.giveXPLevelsBtn.TabIndex = 18;
			this.giveXPLevelsBtn.Text = "Give Levels";
			this.giveXPLevelsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveXPLevelsBtn, "Gives you the amount of XP specified above in levels.");
			this.giveXPLevelsBtn.UseSelectable = true;
			this.giveXPLevelsBtn.Click += this.GiveXpLevelsBtnClicked;
			this.giveXPOrbsBtn.FontWeight = MetroButtonWeight.Regular;
			this.giveXPOrbsBtn.Location = new Point(3, 39);
			this.giveXPOrbsBtn.Name = "giveXPOrbsBtn";
			this.giveXPOrbsBtn.Size = new Size(171, 23);
			this.giveXPOrbsBtn.TabIndex = 19;
			this.giveXPOrbsBtn.Text = "Give XP";
			this.giveXPOrbsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveXPOrbsBtn, "Gives you the raw amount of XP specified above.");
			this.giveXPOrbsBtn.UseSelectable = true;
			this.giveXPOrbsBtn.Click += this.GiveXpOrbsBtnClicked;
			this.xpAmountBox.CustomButton.Image = null;
			this.xpAmountBox.CustomButton.Location = new Point(150, 1);
			this.xpAmountBox.CustomButton.Name = "";
			this.xpAmountBox.CustomButton.Size = new Size(21, 21);
			this.xpAmountBox.CustomButton.Style = MetroColorStyle.Blue;
			this.xpAmountBox.CustomButton.TabIndex = 1;
			this.xpAmountBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.xpAmountBox.CustomButton.UseSelectable = true;
			this.xpAmountBox.CustomButton.Visible = false;
			this.xpAmountBox.Lines = new string[0];
			this.xpAmountBox.Location = new Point(3, 11);
			this.xpAmountBox.MaxLength = 11;
			this.xpAmountBox.Name = "xpAmountBox";
			this.xpAmountBox.PasswordChar = '\0';
			this.xpAmountBox.PromptText = "Enter Amount...";
			this.xpAmountBox.ScrollBars = ScrollBars.None;
			this.xpAmountBox.SelectedText = "";
			this.xpAmountBox.SelectionLength = 0;
			this.xpAmountBox.SelectionStart = 0;
			this.xpAmountBox.ShortcutsEnabled = true;
			this.xpAmountBox.Size = new Size(172, 23);
			this.xpAmountBox.TabIndex = 20;
			this.xpAmountBox.TextAlign = HorizontalAlignment.Center;
			this.xpAmountBox.Theme = MetroThemeStyle.Dark;
			this.xpAmountBox.UseSelectable = true;
			this.xpAmountBox.WaterMark = "Enter Amount...";
			this.xpAmountBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.xpAmountBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.gamemodeCmdLbl.AutoSize = true;
			this.gamemodeCmdLbl.BackColor = Color.Transparent;
			this.gamemodeCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.gamemodeCmdLbl.Location = new Point(99, 174);
			this.gamemodeCmdLbl.Name = "gamemodeCmdLbl";
			this.gamemodeCmdLbl.Size = new Size(125, 19);
			this.gamemodeCmdLbl.Style = MetroColorStyle.Blue;
			this.gamemodeCmdLbl.TabIndex = 46;
			this.gamemodeCmdLbl.Tag = "NonHost";
			this.gamemodeCmdLbl.Text = "/defaultgamemode";
			this.gamemodeCmdLbl.Theme = MetroThemeStyle.Dark;
			this.gamemodeCmdLbl.UseStyleColors = true;
			this.gamemodePanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.gamemodePanel.Controls.Add(this.SpectatorCommandBtn);
			this.gamemodePanel.Controls.Add(this.AdventureCommandBtn);
			this.gamemodePanel.Controls.Add(this.CreativeCommandBtn);
			this.gamemodePanel.Controls.Add(this.SurvivalCommandBtn);
			this.gamemodePanel.HorizontalScrollbarBarColor = true;
			this.gamemodePanel.HorizontalScrollbarHighlightOnWheel = false;
			this.gamemodePanel.HorizontalScrollbarSize = 10;
			this.gamemodePanel.Location = new Point(95, 184);
			this.gamemodePanel.Name = "gamemodePanel";
			this.gamemodePanel.Size = new Size(180, 145);
			this.gamemodePanel.TabIndex = 45;
			this.gamemodePanel.Theme = MetroThemeStyle.Dark;
			this.gamemodePanel.VerticalScrollbarBarColor = true;
			this.gamemodePanel.VerticalScrollbarHighlightOnWheel = false;
			this.gamemodePanel.VerticalScrollbarSize = 10;
			this.SpectatorCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.SpectatorCommandBtn.Location = new Point(3, 98);
			this.SpectatorCommandBtn.Name = "SpectatorCommandBtn";
			this.SpectatorCommandBtn.Size = new Size(172, 23);
			this.SpectatorCommandBtn.TabIndex = 17;
			this.SpectatorCommandBtn.Text = "Spectator";
			this.SpectatorCommandBtn.Theme = MetroThemeStyle.Dark;
			this.SpectatorCommandBtn.UseSelectable = true;
			this.SpectatorCommandBtn.Click += this.SpectatorCommandBtnClicked;
			this.AdventureCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.AdventureCommandBtn.Location = new Point(3, 69);
			this.AdventureCommandBtn.Name = "AdventureCommandBtn";
			this.AdventureCommandBtn.Size = new Size(172, 23);
			this.AdventureCommandBtn.TabIndex = 17;
			this.AdventureCommandBtn.Text = "Adventure";
			this.AdventureCommandBtn.Theme = MetroThemeStyle.Dark;
			this.AdventureCommandBtn.UseSelectable = true;
			this.AdventureCommandBtn.Click += this.AdventureCommandBtnClicked;
			this.CreativeCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.CreativeCommandBtn.Location = new Point(3, 40);
			this.CreativeCommandBtn.Name = "CreativeCommandBtn";
			this.CreativeCommandBtn.Size = new Size(172, 23);
			this.CreativeCommandBtn.TabIndex = 17;
			this.CreativeCommandBtn.Text = "Creative";
			this.CreativeCommandBtn.Theme = MetroThemeStyle.Dark;
			this.CreativeCommandBtn.UseSelectable = true;
			this.CreativeCommandBtn.Click += this.CreativeCommandBtnClicked;
			this.SurvivalCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.SurvivalCommandBtn.Location = new Point(3, 11);
			this.SurvivalCommandBtn.Name = "SurvivalCommandBtn";
			this.SurvivalCommandBtn.Size = new Size(172, 23);
			this.SurvivalCommandBtn.TabIndex = 17;
			this.SurvivalCommandBtn.Text = "Survival";
			this.SurvivalCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SurvivalCommandBtn, "Sets your gamemode to Survival mode.");
			this.SurvivalCommandBtn.UseSelectable = true;
			this.SurvivalCommandBtn.Click += this.SurvivalCommandBtnClicked;
			this.worldCmdLbl.AutoSize = true;
			this.worldCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.worldCmdLbl.Location = new Point(843, 9);
			this.worldCmdLbl.Name = "worldCmdLbl";
			this.worldCmdLbl.Size = new Size(46, 19);
			this.worldCmdLbl.Style = MetroColorStyle.Blue;
			this.worldCmdLbl.TabIndex = 44;
			this.worldCmdLbl.Tag = "NonHost";
			this.worldCmdLbl.Text = "World";
			this.worldCmdLbl.Theme = MetroThemeStyle.Dark;
			this.worldCmdLbl.UseStyleColors = true;
			this.worldPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.worldPanel.Controls.Add(this.setWorldSpawnBtn);
			this.worldPanel.Controls.Add(this.downfallCommandBtn);
			this.worldPanel.HorizontalScrollbarBarColor = true;
			this.worldPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.worldPanel.HorizontalScrollbarSize = 10;
			this.worldPanel.Location = new Point(839, 19);
			this.worldPanel.Name = "worldPanel";
			this.worldPanel.Size = new Size(180, 145);
			this.worldPanel.TabIndex = 43;
			this.worldPanel.Theme = MetroThemeStyle.Dark;
			this.worldPanel.VerticalScrollbarBarColor = true;
			this.worldPanel.VerticalScrollbarHighlightOnWheel = false;
			this.worldPanel.VerticalScrollbarSize = 10;
			this.setWorldSpawnBtn.FontWeight = MetroButtonWeight.Regular;
			this.setWorldSpawnBtn.Location = new Point(3, 38);
			this.setWorldSpawnBtn.Name = "setWorldSpawnBtn";
			this.setWorldSpawnBtn.Size = new Size(172, 23);
			this.setWorldSpawnBtn.TabIndex = 18;
			this.setWorldSpawnBtn.Text = "/setworldspawn";
			this.setWorldSpawnBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.setWorldSpawnBtn, "Sets the world's spawn point to your current location.");
			this.setWorldSpawnBtn.UseSelectable = true;
			this.setWorldSpawnBtn.Click += this.SetWorldSpawnBtnClicked;
			this.downfallCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.downfallCommandBtn.Location = new Point(3, 11);
			this.downfallCommandBtn.Name = "downfallCommandBtn";
			this.downfallCommandBtn.Size = new Size(172, 23);
			this.downfallCommandBtn.TabIndex = 17;
			this.downfallCommandBtn.Text = "/toggledownfall";
			this.downfallCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.downfallCommandBtn, "Executes the /toggledownfall command (doesn't appear to do anything)");
			this.downfallCommandBtn.UseSelectable = true;
			this.downfallCommandBtn.Click += this.DownfallCommandBtnClicked;
			this.playerCmdLbl.AutoSize = true;
			this.playerCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.playerCmdLbl.Location = new Point(657, 9);
			this.playerCmdLbl.Name = "playerCmdLbl";
			this.playerCmdLbl.Size = new Size(46, 19);
			this.playerCmdLbl.Style = MetroColorStyle.Blue;
			this.playerCmdLbl.TabIndex = 42;
			this.playerCmdLbl.Tag = "NonHost";
			this.playerCmdLbl.Text = "Player";
			this.playerCmdLbl.Theme = MetroThemeStyle.Dark;
			this.playerCmdLbl.UseStyleColors = true;
			this.playerPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.playerPanel.Controls.Add(this.killCommandBtn);
			this.playerPanel.HorizontalScrollbarBarColor = true;
			this.playerPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.playerPanel.HorizontalScrollbarSize = 10;
			this.playerPanel.Location = new Point(653, 19);
			this.playerPanel.Name = "playerPanel";
			this.playerPanel.Size = new Size(180, 145);
			this.playerPanel.TabIndex = 41;
			this.playerPanel.Theme = MetroThemeStyle.Dark;
			this.playerPanel.VerticalScrollbarBarColor = true;
			this.playerPanel.VerticalScrollbarHighlightOnWheel = false;
			this.playerPanel.VerticalScrollbarSize = 10;
			this.killCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.killCommandBtn.Location = new Point(3, 11);
			this.killCommandBtn.Name = "killCommandBtn";
			this.killCommandBtn.Size = new Size(172, 23);
			this.killCommandBtn.TabIndex = 17;
			this.killCommandBtn.Text = "/kill";
			this.killCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.killCommandBtn, "Kills yourself, literally. That's all it does.");
			this.killCommandBtn.UseSelectable = true;
			this.killCommandBtn.Click += this.KillCommandBtnClicked;
			this.timeCmdLbl.AutoSize = true;
			this.timeCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.timeCmdLbl.Location = new Point(471, 9);
			this.timeCmdLbl.Name = "timeCmdLbl";
			this.timeCmdLbl.Size = new Size(41, 19);
			this.timeCmdLbl.Style = MetroColorStyle.Blue;
			this.timeCmdLbl.TabIndex = 40;
			this.timeCmdLbl.Tag = "NonHost";
			this.timeCmdLbl.Text = "/time";
			this.timeCmdLbl.Theme = MetroThemeStyle.Dark;
			this.timeCmdLbl.UseStyleColors = true;
			this.timePanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.timePanel.Controls.Add(this.timeCommandBtn);
			this.timePanel.Controls.Add(this.timeAmountBox);
			this.timePanel.HorizontalScrollbarBarColor = true;
			this.timePanel.HorizontalScrollbarHighlightOnWheel = false;
			this.timePanel.HorizontalScrollbarSize = 10;
			this.timePanel.Location = new Point(467, 19);
			this.timePanel.Name = "timePanel";
			this.timePanel.Size = new Size(180, 145);
			this.timePanel.TabIndex = 39;
			this.timePanel.Theme = MetroThemeStyle.Dark;
			this.timePanel.VerticalScrollbarBarColor = true;
			this.timePanel.VerticalScrollbarHighlightOnWheel = false;
			this.timePanel.VerticalScrollbarSize = 10;
			this.timeCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.timeCommandBtn.Location = new Point(3, 117);
			this.timeCommandBtn.Name = "timeCommandBtn";
			this.timeCommandBtn.Size = new Size(172, 23);
			this.timeCommandBtn.TabIndex = 17;
			this.timeCommandBtn.Text = " /time";
			this.timeCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.timeCommandBtn, "Sets the time to whatever you specified.");
			this.timeCommandBtn.UseSelectable = true;
			this.timeCommandBtn.Click += this.TimeCommandBtnClicked;
			this.timeAmountBox.CustomButton.Image = null;
			this.timeAmountBox.CustomButton.Location = new Point(150, 1);
			this.timeAmountBox.CustomButton.Name = "";
			this.timeAmountBox.CustomButton.Size = new Size(21, 21);
			this.timeAmountBox.CustomButton.Style = MetroColorStyle.Blue;
			this.timeAmountBox.CustomButton.TabIndex = 1;
			this.timeAmountBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.timeAmountBox.CustomButton.UseSelectable = true;
			this.timeAmountBox.CustomButton.Visible = false;
			this.timeAmountBox.Lines = new string[0];
			this.timeAmountBox.Location = new Point(3, 11);
			this.timeAmountBox.MaxLength = 999;
			this.timeAmountBox.Name = "timeAmountBox";
			this.timeAmountBox.PasswordChar = '\0';
			this.timeAmountBox.PromptText = "Enter Time...";
			this.timeAmountBox.ScrollBars = ScrollBars.None;
			this.timeAmountBox.SelectedText = "";
			this.timeAmountBox.SelectionLength = 0;
			this.timeAmountBox.SelectionStart = 0;
			this.timeAmountBox.ShortcutsEnabled = true;
			this.timeAmountBox.Size = new Size(172, 23);
			this.timeAmountBox.TabIndex = 17;
			this.timeAmountBox.TextAlign = HorizontalAlignment.Center;
			this.timeAmountBox.Theme = MetroThemeStyle.Dark;
			this.timeAmountBox.UseSelectable = true;
			this.timeAmountBox.WaterMark = "Enter Time...";
			this.timeAmountBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.timeAmountBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.enchantCmdLbl.AutoSize = true;
			this.enchantCmdLbl.FontWeight = MetroLabelWeight.Regular;
			this.enchantCmdLbl.Location = new Point(285, 9);
			this.enchantCmdLbl.Name = "enchantCmdLbl";
			this.enchantCmdLbl.Size = new Size(63, 19);
			this.enchantCmdLbl.Style = MetroColorStyle.Blue;
			this.enchantCmdLbl.TabIndex = 38;
			this.enchantCmdLbl.Tag = "NonHost";
			this.enchantCmdLbl.Text = "/enchant";
			this.enchantCmdLbl.Theme = MetroThemeStyle.Dark;
			this.enchantCmdLbl.UseStyleColors = true;
			this.enchantPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.enchantPanel.Controls.Add(this.enchantIDBox);
			this.enchantPanel.Controls.Add(this.enchantCommandBtn);
			this.enchantPanel.Controls.Add(this.enchantLevelBox);
			this.enchantPanel.HorizontalScrollbarBarColor = true;
			this.enchantPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.enchantPanel.HorizontalScrollbarSize = 10;
			this.enchantPanel.Location = new Point(281, 19);
			this.enchantPanel.Name = "enchantPanel";
			this.enchantPanel.Size = new Size(180, 145);
			this.enchantPanel.TabIndex = 37;
			this.enchantPanel.Theme = MetroThemeStyle.Dark;
			this.enchantPanel.VerticalScrollbarBarColor = true;
			this.enchantPanel.VerticalScrollbarHighlightOnWheel = false;
			this.enchantPanel.VerticalScrollbarSize = 10;
			this.enchantIDBox.FontSize = MetroComboBoxSize.Small;
			this.enchantIDBox.FormattingEnabled = true;
			this.enchantIDBox.ItemHeight = 19;
			this.enchantIDBox.Items.AddRange(new object[]
			{
				"Protection",
				"Fire Protection",
				"Feather Falling",
				"Blast Protection",
				"Projectile Protection",
				"Respiration",
				"Aqua Affinity",
				"Thorns",
				"Depth Strider",
				"Frost Walker",
				"Curse of Binding",
				"Sharpness",
				"Smite",
				"Bane of Arthropods",
				"Knockback",
				"Fire Aspect",
				"Looting",
				"Efficiency",
				"Silk Touch",
				"Unbreaking",
				"Fortune",
				"Power",
				"Punch",
				"Flame",
				"Infinity",
				"Luck of the Sea",
				"Lure",
				"Mending",
				"Curse of Vanishing",
				"Impaling",
				"Riptide",
				"Loyalty",
				"Channeling"
			});
			this.enchantIDBox.Location = new Point(3, 11);
			this.enchantIDBox.Name = "enchantIDBox";
			this.enchantIDBox.Size = new Size(172, 25);
			this.enchantIDBox.TabIndex = 17;
			this.enchantIDBox.Theme = MetroThemeStyle.Dark;
			this.enchantIDBox.UseSelectable = true;
			this.enchantCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.enchantCommandBtn.Location = new Point(3, 117);
			this.enchantCommandBtn.Name = "enchantCommandBtn";
			this.enchantCommandBtn.Size = new Size(172, 23);
			this.enchantCommandBtn.TabIndex = 17;
			this.enchantCommandBtn.Text = "/enchant";
			this.enchantCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.enchantCommandBtn, "Enchants your current held item using the parameters above.");
			this.enchantCommandBtn.UseSelectable = true;
			this.enchantCommandBtn.Click += this.EnchantCommandBtnClicked;
			this.enchantLevelBox.CustomButton.Image = null;
			this.enchantLevelBox.CustomButton.Location = new Point(150, 1);
			this.enchantLevelBox.CustomButton.Name = "";
			this.enchantLevelBox.CustomButton.Size = new Size(21, 21);
			this.enchantLevelBox.CustomButton.Style = MetroColorStyle.Blue;
			this.enchantLevelBox.CustomButton.TabIndex = 1;
			this.enchantLevelBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.enchantLevelBox.CustomButton.UseSelectable = true;
			this.enchantLevelBox.CustomButton.Visible = false;
			this.enchantLevelBox.Lines = new string[0];
			this.enchantLevelBox.Location = new Point(3, 40);
			this.enchantLevelBox.MaxLength = 5;
			this.enchantLevelBox.Name = "enchantLevelBox";
			this.enchantLevelBox.PasswordChar = '\0';
			this.enchantLevelBox.PromptText = "Enchantment Level";
			this.enchantLevelBox.ScrollBars = ScrollBars.None;
			this.enchantLevelBox.SelectedText = "";
			this.enchantLevelBox.SelectionLength = 0;
			this.enchantLevelBox.SelectionStart = 0;
			this.enchantLevelBox.ShortcutsEnabled = true;
			this.enchantLevelBox.Size = new Size(172, 23);
			this.enchantLevelBox.TabIndex = 17;
			this.enchantLevelBox.TextAlign = HorizontalAlignment.Center;
			this.enchantLevelBox.Theme = MetroThemeStyle.Dark;
			this.enchantLevelBox.UseSelectable = true;
			this.enchantLevelBox.WaterMark = "Enchantment Level";
			this.enchantLevelBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.enchantLevelBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.giveCmdLabel.AutoSize = true;
			this.giveCmdLabel.FontWeight = MetroLabelWeight.Regular;
			this.giveCmdLabel.Location = new Point(99, 9);
			this.giveCmdLabel.Name = "giveCmdLabel";
			this.giveCmdLabel.Size = new Size(39, 19);
			this.giveCmdLabel.Style = MetroColorStyle.Blue;
			this.giveCmdLabel.TabIndex = 36;
			this.giveCmdLabel.Tag = "NonHost";
			this.giveCmdLabel.Text = "/give";
			this.giveCmdLabel.Theme = MetroThemeStyle.Dark;
			this.giveCmdLabel.UseStyleColors = true;
			this.giveCommandPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
			this.giveCommandPanel.Controls.Add(this.itemIdHelpBtn);
			this.giveCommandPanel.Controls.Add(this.giveCommandBtn);
			this.giveCommandPanel.Controls.Add(this.giveDataBox);
			this.giveCommandPanel.Controls.Add(this.giveAmountBox);
			this.giveCommandPanel.Controls.Add(this.giveIDBox);
			this.giveCommandPanel.HorizontalScrollbarBarColor = true;
			this.giveCommandPanel.HorizontalScrollbarHighlightOnWheel = false;
			this.giveCommandPanel.HorizontalScrollbarSize = 10;
			this.giveCommandPanel.Location = new Point(95, 19);
			this.giveCommandPanel.Name = "giveCommandPanel";
			this.giveCommandPanel.Size = new Size(180, 145);
			this.giveCommandPanel.TabIndex = 35;
			this.giveCommandPanel.Theme = MetroThemeStyle.Dark;
			this.giveCommandPanel.VerticalScrollbarBarColor = true;
			this.giveCommandPanel.VerticalScrollbarHighlightOnWheel = false;
			this.giveCommandPanel.VerticalScrollbarSize = 10;
			this.itemIdHelpBtn.Highlight = true;
			this.itemIdHelpBtn.Location = new Point(143, 11);
			this.itemIdHelpBtn.Name = "itemIdHelpBtn";
			this.itemIdHelpBtn.Size = new Size(32, 23);
			this.itemIdHelpBtn.TabIndex = 45;
			this.itemIdHelpBtn.Text = "?";
			this.itemIdHelpBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.itemIdHelpBtn, "Helpful information on how to use the /give command.");
			this.itemIdHelpBtn.UseSelectable = true;
			this.itemIdHelpBtn.Click += this.ItemIdHelpBtnClicked;
			this.giveCommandBtn.FontWeight = MetroButtonWeight.Regular;
			this.giveCommandBtn.Location = new Point(3, 117);
			this.giveCommandBtn.Name = "giveCommandBtn";
			this.giveCommandBtn.Size = new Size(172, 23);
			this.giveCommandBtn.TabIndex = 17;
			this.giveCommandBtn.Text = "/give";
			this.giveCommandBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveCommandBtn, "Gives you the item using the parameters specified above.");
			this.giveCommandBtn.UseSelectable = true;
			this.giveCommandBtn.Click += this.GiveCommandBtnClicked;
			this.giveDataBox.CustomButton.Image = null;
			this.giveDataBox.CustomButton.Location = new Point(150, 1);
			this.giveDataBox.CustomButton.Name = "";
			this.giveDataBox.CustomButton.Size = new Size(21, 21);
			this.giveDataBox.CustomButton.Style = MetroColorStyle.Blue;
			this.giveDataBox.CustomButton.TabIndex = 1;
			this.giveDataBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.giveDataBox.CustomButton.UseSelectable = true;
			this.giveDataBox.CustomButton.Visible = false;
			this.giveDataBox.Lines = new string[0];
			this.giveDataBox.Location = new Point(3, 69);
			this.giveDataBox.MaxLength = 2;
			this.giveDataBox.Name = "giveDataBox";
			this.giveDataBox.PasswordChar = '\0';
			this.giveDataBox.PromptText = "Data Value";
			this.giveDataBox.ScrollBars = ScrollBars.None;
			this.giveDataBox.SelectedText = "";
			this.giveDataBox.SelectionLength = 0;
			this.giveDataBox.SelectionStart = 0;
			this.giveDataBox.ShortcutsEnabled = true;
			this.giveDataBox.Size = new Size(172, 23);
			this.giveDataBox.TabIndex = 17;
			this.giveDataBox.TextAlign = HorizontalAlignment.Center;
			this.giveDataBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveDataBox, "The data value of the Item");
			this.giveDataBox.UseSelectable = true;
			this.giveDataBox.WaterMark = "Data Value";
			this.giveDataBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.giveDataBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.giveAmountBox.CustomButton.Image = null;
			this.giveAmountBox.CustomButton.Location = new Point(150, 1);
			this.giveAmountBox.CustomButton.Name = "";
			this.giveAmountBox.CustomButton.Size = new Size(21, 21);
			this.giveAmountBox.CustomButton.Style = MetroColorStyle.Blue;
			this.giveAmountBox.CustomButton.TabIndex = 1;
			this.giveAmountBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.giveAmountBox.CustomButton.UseSelectable = true;
			this.giveAmountBox.CustomButton.Visible = false;
			this.giveAmountBox.Lines = new string[0];
			this.giveAmountBox.Location = new Point(4, 40);
			this.giveAmountBox.MaxLength = 5;
			this.giveAmountBox.Name = "giveAmountBox";
			this.giveAmountBox.PasswordChar = '\0';
			this.giveAmountBox.PromptText = "Item Amount (Max 32767)";
			this.giveAmountBox.ScrollBars = ScrollBars.None;
			this.giveAmountBox.SelectedText = "";
			this.giveAmountBox.SelectionLength = 0;
			this.giveAmountBox.SelectionStart = 0;
			this.giveAmountBox.ShortcutsEnabled = true;
			this.giveAmountBox.Size = new Size(172, 23);
			this.giveAmountBox.TabIndex = 17;
			this.giveAmountBox.TextAlign = HorizontalAlignment.Center;
			this.giveAmountBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveAmountBox, "How many of the items you want");
			this.giveAmountBox.UseSelectable = true;
			this.giveAmountBox.WaterMark = "Item Amount (Max 32767)";
			this.giveAmountBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.giveAmountBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.giveIDBox.CustomButton.Image = null;
			this.giveIDBox.CustomButton.Location = new Point(113, 1);
			this.giveIDBox.CustomButton.Name = "";
			this.giveIDBox.CustomButton.Size = new Size(21, 21);
			this.giveIDBox.CustomButton.Style = MetroColorStyle.Blue;
			this.giveIDBox.CustomButton.TabIndex = 1;
			this.giveIDBox.CustomButton.Theme = MetroThemeStyle.Light;
			this.giveIDBox.CustomButton.UseSelectable = true;
			this.giveIDBox.CustomButton.Visible = false;
			this.giveIDBox.Lines = new string[0];
			this.giveIDBox.Location = new Point(3, 11);
			this.giveIDBox.MaxLength = 5;
			this.giveIDBox.Name = "giveIDBox";
			this.giveIDBox.PasswordChar = '\0';
			this.giveIDBox.PromptText = "Item ID";
			this.giveIDBox.ScrollBars = ScrollBars.None;
			this.giveIDBox.SelectedText = "";
			this.giveIDBox.SelectionLength = 0;
			this.giveIDBox.SelectionStart = 0;
			this.giveIDBox.ShortcutsEnabled = true;
			this.giveIDBox.Size = new Size(135, 23);
			this.giveIDBox.TabIndex = 17;
			this.giveIDBox.TextAlign = HorizontalAlignment.Center;
			this.giveIDBox.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.giveIDBox, "The ID of the item you want");
			this.giveIDBox.UseSelectable = true;
			this.giveIDBox.WaterMark = "Item ID";
			this.giveIDBox.WaterMarkColor = Color.FromArgb(109, 109, 109);
			this.giveIDBox.WaterMarkFont = new Font("Segoe UI", 12f, FontStyle.Italic, GraphicsUnit.Pixel);
			this.giveIDBox.TextChanged += this.CheckItemID;
			this.settingsTab.Controls.Add(this.TipsBtn);
			this.settingsTab.Controls.Add(this.TutorialBtn);
			this.settingsTab.Controls.Add(this.SeasonalThemes);
			this.settingsTab.Controls.Add(this.TextAllignBox);
			this.settingsTab.Controls.Add(this.TextAllignLbl);
			this.settingsTab.Controls.Add(this.HostIndicators);
			this.settingsTab.Controls.Add(this.CemuPckMngrBtn);
			this.settingsTab.Controls.Add(this.QuickModsManagerBtn);
			this.settingsTab.Controls.Add(this.OpenLangMngrBtn);
			this.settingsTab.Controls.Add(this.CheckForPreRelease);
			this.settingsTab.Controls.Add(this.settingsLogo);
			this.settingsTab.Controls.Add(this.updateBtn);
			this.settingsTab.Controls.Add(this.discordRpcCheckBox);
			this.settingsTab.Controls.Add(this.ColorsBox);
			this.settingsTab.Controls.Add(this.ColorLabel);
			this.settingsTab.HorizontalScrollbarBarColor = true;
			this.settingsTab.HorizontalScrollbarHighlightOnWheel = false;
			this.settingsTab.HorizontalScrollbarSize = 10;
			this.settingsTab.Location = new Point(4, 9);
			this.settingsTab.Name = "settingsTab";
			this.settingsTab.Padding = new Padding(3);
			this.settingsTab.Size = new Size(1122, 630);
			this.settingsTab.TabIndex = 5;
			this.settingsTab.Tag = "";
			this.settingsTab.Text = "Settings";
			this.settingsTab.Theme = MetroThemeStyle.Dark;
			this.settingsTab.VerticalScrollbarBarColor = true;
			this.settingsTab.VerticalScrollbarHighlightOnWheel = false;
			this.settingsTab.VerticalScrollbarSize = 10;
			this.TipsBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.TipsBtn.Location = new Point(87, 241);
			this.TipsBtn.Margin = new Padding(4, 6, 4, 6);
			this.TipsBtn.Name = "TipsBtn";
			this.TipsBtn.Size = new Size(1021, 36);
			this.TipsBtn.TabIndex = 56;
			this.TipsBtn.Text = "Tips";
			this.TipsBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.TipsBtn, "Shows a random tip relating to the Mod Injector");
			this.TipsBtn.UseSelectable = true;
			this.TipsBtn.Click += this.TipsBtnClicked;
			this.TutorialBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.TutorialBtn.Location = new Point(87, 193);
			this.TutorialBtn.Margin = new Padding(4, 6, 4, 6);
			this.TutorialBtn.Name = "TutorialBtn";
			this.TutorialBtn.Size = new Size(1021, 36);
			this.TutorialBtn.TabIndex = 55;
			this.TutorialBtn.Text = "Tutorial";
			this.TutorialBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.TutorialBtn, "Launches the Mod Injector Tutorial");
			this.TutorialBtn.UseSelectable = true;
			this.TutorialBtn.Click += this.TutorialBtnClicked;
			this.SeasonalThemes.AutoSize = true;
			this.SeasonalThemes.Location = new Point(592, 73);
			this.SeasonalThemes.Name = "SeasonalThemes";
			this.SeasonalThemes.Size = new Size(114, 15);
			this.SeasonalThemes.TabIndex = 54;
			this.SeasonalThemes.Text = "Seasonal Themes";
			this.SeasonalThemes.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.SeasonalThemes, "Whether to use themes based on certain holidays");
			this.SeasonalThemes.UseSelectable = true;
			this.SeasonalThemes.CheckedChanged += this.SeasonalThemesToggled;
			this.TextAllignBox.FormattingEnabled = true;
			this.TextAllignBox.ItemHeight = 23;
			this.TextAllignBox.Items.AddRange(new object[]
			{
				"Left",
				"Center",
				"Right"
			});
			this.TextAllignBox.Location = new Point(87, 38);
			this.TextAllignBox.Name = "TextAllignBox";
			this.TextAllignBox.Size = new Size(1028, 29);
			this.TextAllignBox.TabIndex = 53;
			this.TextAllignBox.Theme = MetroThemeStyle.Dark;
			this.TextAllignBox.UseSelectable = true;
			this.TextAllignBox.SelectedIndexChanged += this.FormTxtAlgnSelected;
			this.TextAllignLbl.AutoSize = true;
			this.TextAllignLbl.FontWeight = MetroLabelWeight.Regular;
			this.TextAllignLbl.Location = new Point(7, 38);
			this.TextAllignLbl.Name = "TextAllignLbl";
			this.TextAllignLbl.Size = new Size(75, 19);
			this.TextAllignLbl.TabIndex = 52;
			this.TextAllignLbl.Text = "Text Allign:";
			this.TextAllignLbl.Theme = MetroThemeStyle.Dark;
			this.HostIndicators.AutoSize = true;
			this.HostIndicators.Location = new Point(419, 73);
			this.HostIndicators.Name = "HostIndicators";
			this.HostIndicators.Size = new Size(167, 15);
			this.HostIndicators.TabIndex = 51;
			this.HostIndicators.Text = "Host / Non-Host Indicators";
			this.HostIndicators.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.HostIndicators, "Whether to highlight host/non host mods\r\n\r\nNon Host: Blue\r\nHost: Orange");
			this.HostIndicators.UseSelectable = true;
			this.HostIndicators.CheckedChanged += this.HostIndicatorsToggled;
			this.CemuPckMngrBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.CemuPckMngrBtn.Location = new Point(773, 97);
			this.CemuPckMngrBtn.Margin = new Padding(4, 6, 4, 6);
			this.CemuPckMngrBtn.Name = "CemuPckMngrBtn";
			this.CemuPckMngrBtn.Size = new Size(335, 36);
			this.CemuPckMngrBtn.TabIndex = 50;
			this.CemuPckMngrBtn.Text = "Cemu Graphics Pack Manager";
			this.CemuPckMngrBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CemuPckMngrBtn, "Opens the Cemu Graphics Pack Manager");
			this.CemuPckMngrBtn.UseSelectable = true;
			this.CemuPckMngrBtn.Click += this.CemuPckMngrBtnClicked;
			this.QuickModsManagerBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.QuickModsManagerBtn.Location = new Point(430, 97);
			this.QuickModsManagerBtn.Margin = new Padding(4, 6, 4, 6);
			this.QuickModsManagerBtn.Name = "QuickModsManagerBtn";
			this.QuickModsManagerBtn.Size = new Size(335, 36);
			this.QuickModsManagerBtn.TabIndex = 49;
			this.QuickModsManagerBtn.Text = "Quick Mods Manager";
			this.QuickModsManagerBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.QuickModsManagerBtn, "Opens the Quick Mods Manager");
			this.QuickModsManagerBtn.UseSelectable = true;
			this.QuickModsManagerBtn.Click += this.QuickModsManagerBtnClicked;
			this.OpenLangMngrBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.OpenLangMngrBtn.Location = new Point(87, 97);
			this.OpenLangMngrBtn.Margin = new Padding(4, 6, 4, 6);
			this.OpenLangMngrBtn.Name = "OpenLangMngrBtn";
			this.OpenLangMngrBtn.Size = new Size(335, 36);
			this.OpenLangMngrBtn.TabIndex = 48;
			this.OpenLangMngrBtn.Text = "Languages Manager";
			this.OpenLangMngrBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.OpenLangMngrBtn, "Opens the Language Manager");
			this.OpenLangMngrBtn.UseSelectable = true;
			this.OpenLangMngrBtn.Click += this.OpenLangMngrBtnClicked;
			this.CheckForPreRelease.AutoSize = true;
			this.CheckForPreRelease.Location = new Point(232, 73);
			this.CheckForPreRelease.Name = "CheckForPreRelease";
			this.CheckForPreRelease.Size = new Size(181, 15);
			this.CheckForPreRelease.TabIndex = 47;
			this.CheckForPreRelease.Text = "Check for pre-release versions";
			this.CheckForPreRelease.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.CheckForPreRelease, "Whether to check for pre-release updates\r\nNote: these may not work correctly");
			this.CheckForPreRelease.UseSelectable = true;
			this.CheckForPreRelease.CheckedChanged += this.CheckForPreReleaseToggled;
			this.settingsLogo.BackColor = Color.Transparent;
			this.settingsLogo.BackgroundImage = Resources.MinecraftWiiUModInjector;
			this.settingsLogo.BackgroundImageLayout = ImageLayout.Zoom;
			this.settingsLogo.HorizontalScrollbarBarColor = true;
			this.settingsLogo.HorizontalScrollbarHighlightOnWheel = false;
			this.settingsLogo.HorizontalScrollbarSize = 10;
			this.settingsLogo.Location = new Point(87, 286);
			this.settingsLogo.Name = "settingsLogo";
			this.settingsLogo.Size = new Size(1028, 334);
			this.settingsLogo.TabIndex = 44;
			this.settingsLogo.VerticalScrollbarBarColor = true;
			this.settingsLogo.VerticalScrollbarHighlightOnWheel = false;
			this.settingsLogo.VerticalScrollbarSize = 10;
			this.updateBtn.AutoSizeMode = AutoSizeMode.GrowAndShrink;
			this.updateBtn.Location = new Point(87, 145);
			this.updateBtn.Margin = new Padding(4, 6, 4, 6);
			this.updateBtn.Name = "updateBtn";
			this.updateBtn.Size = new Size(1021, 36);
			this.updateBtn.TabIndex = 45;
			this.updateBtn.Text = "Check for Updates";
			this.updateBtn.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.SetToolTip(this.updateBtn, "Checks for a new update");
			this.updateBtn.UseSelectable = true;
			this.updateBtn.Click += this.CheckUpdatesClicked;
			this.discordRpcCheckBox.AutoSize = true;
			this.discordRpcCheckBox.Checked = true;
			this.discordRpcCheckBox.CheckState = CheckState.Checked;
			this.discordRpcCheckBox.Location = new Point(87, 73);
			this.discordRpcCheckBox.Name = "discordRpcCheckBox";
			this.discordRpcCheckBox.Size = new Size(139, 15);
			this.discordRpcCheckBox.TabIndex = 43;
			this.discordRpcCheckBox.Text = "Discord Rich Presence";
			this.discordRpcCheckBox.Theme = MetroThemeStyle.Dark;
			this.discordRpcCheckBox.UseSelectable = true;
			this.discordRpcCheckBox.CheckedChanged += this.DiscordRpcToggleChecked;
			this.ColorsBox.FormattingEnabled = true;
			this.ColorsBox.ItemHeight = 23;
			this.ColorsBox.Items.AddRange(new object[]
			{
				"Black",
				"Blue",
				"Brown",
				"Green",
				"Lime",
				"Magenta",
				"Orange",
				"Pink",
				"Purple",
				"Red",
				"Silver",
				"Teal",
				"White",
				"Yellow"
			});
			this.ColorsBox.Location = new Point(65, 3);
			this.ColorsBox.Name = "ColorsBox";
			this.ColorsBox.Size = new Size(1050, 29);
			this.ColorsBox.TabIndex = 37;
			this.ColorsBox.Theme = MetroThemeStyle.Dark;
			this.ColorsBox.UseSelectable = true;
			this.ColorsBox.SelectedIndexChanged += this.FormColorSelected;
			this.ColorLabel.AutoSize = true;
			this.ColorLabel.FontWeight = MetroLabelWeight.Regular;
			this.ColorLabel.Location = new Point(7, 3);
			this.ColorLabel.Name = "ColorLabel";
			this.ColorLabel.Size = new Size(45, 19);
			this.ColorLabel.TabIndex = 36;
			this.ColorLabel.Text = "Color:";
			this.ColorLabel.Theme = MetroThemeStyle.Dark;
			this.GlideTile.ActiveControl = null;
			this.GlideTile.Dock = DockStyle.Top;
			this.GlideTile.Location = new Point(0, 120);
			this.GlideTile.Name = "GlideTile";
			this.GlideTile.PaintTileCount = false;
			this.GlideTile.Size = new Size(159, 40);
			this.GlideTile.TabIndex = 8;
			this.GlideTile.Tag = "MgTile";
			this.GlideTile.Text = "Glide";
			this.GlideTile.TextAlign = ContentAlignment.MiddleCenter;
			this.GlideTile.TileCount = 3;
			this.GlideTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.GlideTile.UseSelectable = true;
			this.GlideTile.Click += this.SwapTab;
			this.TumbleTile.ActiveControl = null;
			this.TumbleTile.Dock = DockStyle.Top;
			this.TumbleTile.Location = new Point(0, 80);
			this.TumbleTile.Name = "TumbleTile";
			this.TumbleTile.PaintTileCount = false;
			this.TumbleTile.Size = new Size(159, 40);
			this.TumbleTile.TabIndex = 7;
			this.TumbleTile.Tag = "MgTile";
			this.TumbleTile.Text = "Tumble";
			this.TumbleTile.TextAlign = ContentAlignment.MiddleCenter;
			this.TumbleTile.TileCount = 2;
			this.TumbleTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.TumbleTile.UseSelectable = true;
			this.TumbleTile.Click += this.SwapTab;
			this.BattleTile.ActiveControl = null;
			this.BattleTile.Dock = DockStyle.Top;
			this.BattleTile.Location = new Point(0, 40);
			this.BattleTile.Name = "BattleTile";
			this.BattleTile.PaintTileCount = false;
			this.BattleTile.Size = new Size(159, 40);
			this.BattleTile.TabIndex = 6;
			this.BattleTile.Tag = "MgTile";
			this.BattleTile.Text = "Battle";
			this.BattleTile.TextAlign = ContentAlignment.MiddleCenter;
			this.BattleTile.TileCount = 1;
			this.BattleTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.BattleTile.UseSelectable = true;
			this.BattleTile.UseTileImage = true;
			this.BattleTile.Click += this.SwapTab;
			this.GeneralMgTile.ActiveControl = null;
			this.GeneralMgTile.Dock = DockStyle.Top;
			this.GeneralMgTile.Location = new Point(0, 0);
			this.GeneralMgTile.Name = "GeneralMgTile";
			this.GeneralMgTile.PaintTileCount = false;
			this.GeneralMgTile.Size = new Size(159, 40);
			this.GeneralMgTile.TabIndex = 5;
			this.GeneralMgTile.Tag = "MgTile";
			this.GeneralMgTile.Text = "General";
			this.GeneralMgTile.TextAlign = ContentAlignment.MiddleCenter;
			this.GeneralMgTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.GeneralMgTile.UseSelectable = true;
			this.GeneralMgTile.UseTileImage = true;
			this.GeneralMgTile.Click += this.SwapTab;
			this.HomeTile.ActiveControl = null;
			this.HomeTile.Dock = DockStyle.Top;
			this.HomeTile.Location = new Point(0, 0);
			this.HomeTile.Name = "HomeTile";
			this.HomeTile.PaintTileCount = false;
			this.HomeTile.Size = new Size(159, 55);
			this.HomeTile.TabIndex = 1;
			this.HomeTile.Tag = "";
			this.HomeTile.Text = "Home";
			this.HomeTile.TextAlign = ContentAlignment.MiddleCenter;
			this.HomeTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.HomeTile.UseSelectable = true;
			this.HomeTile.UseTileImage = true;
			this.HomeTile.Click += this.SwapTab;
			this.StyleMngr.Owner = this;
			this.StyleMngr.Theme = MetroThemeStyle.Dark;
			this.StyleExtender.Theme = MetroThemeStyle.Dark;
			this.ToolTipManager.Style = MetroColorStyle.Default;
			this.ToolTipManager.StyleManager = null;
			this.ToolTipManager.Theme = MetroThemeStyle.Dark;
			this.PlayersTile.ActiveControl = null;
			this.PlayersTile.Dock = DockStyle.Top;
			this.PlayersTile.Location = new Point(0, 55);
			this.PlayersTile.Name = "PlayersTile";
			this.PlayersTile.PaintTileCount = false;
			this.PlayersTile.Size = new Size(159, 55);
			this.PlayersTile.TabIndex = 2;
			this.PlayersTile.Tag = "";
			this.PlayersTile.Text = "Player(s) / Item(s)";
			this.PlayersTile.TextAlign = ContentAlignment.MiddleCenter;
			this.PlayersTile.TileCount = 1;
			this.PlayersTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.PlayersTile.UseSelectable = true;
			this.PlayersTile.UseTileImage = true;
			this.PlayersTile.Click += this.SwapTab;
			this.CommandsTile.ActiveControl = null;
			this.CommandsTile.Dock = DockStyle.Top;
			this.CommandsTile.Location = new Point(0, 434);
			this.CommandsTile.Name = "CommandsTile";
			this.CommandsTile.PaintTileCount = false;
			this.CommandsTile.Size = new Size(159, 55);
			this.CommandsTile.TabIndex = 6;
			this.CommandsTile.Tag = "";
			this.CommandsTile.Text = "Commands";
			this.CommandsTile.TextAlign = ContentAlignment.MiddleCenter;
			this.CommandsTile.TileCount = 5;
			this.CommandsTile.TileTextFontWeight = MetroTileTextWeight.Regular;
			this.CommandsTile.UseSelectable = true;
			this.CommandsTile.Click += this.SwapTab;
			this.RightClickMenu.Items.AddRange(new ToolStripItem[]
			{
				this.IncreaseDecimalPlace,
				this.DecreaseDecimalPlace
			});
			this.RightClickMenu.Name = "RightClickMenu";
			this.RightClickMenu.Size = new Size(323, 48);
			this.RightClickMenu.Theme = MetroThemeStyle.Dark;
			this.IncreaseDecimalPlace.Name = "IncreaseDecimalPlace";
			this.IncreaseDecimalPlace.ShortcutKeys = (Keys.LButton | Keys.RButton | Keys.Back | Keys.ShiftKey | Keys.Space | Keys.F17 | Keys.Shift | Keys.Control);
			this.IncreaseDecimalPlace.Size = new Size(322, 22);
			this.IncreaseDecimalPlace.Text = "Increase decimal place";
			this.DecreaseDecimalPlace.Name = "DecreaseDecimalPlace";
			this.DecreaseDecimalPlace.ShortcutKeys = (Keys.LButton | Keys.MButton | Keys.Back | Keys.ShiftKey | Keys.Space | Keys.F17 | Keys.Shift | Keys.Control);
			this.DecreaseDecimalPlace.Size = new Size(322, 22);
			this.DecreaseDecimalPlace.Text = "Decrease decimal place";
			this.NavMenuPnl.Controls.Add(this.BuildTile);
			this.NavMenuPnl.Controls.Add(this.SettingsTile);
			this.NavMenuPnl.Controls.Add(this.CommandsTile);
			this.NavMenuPnl.Controls.Add(this.NavMenuMgPnl);
			this.NavMenuPnl.Controls.Add(this.MinigamesTile);
			this.NavMenuPnl.Controls.Add(this.GeneralTile);
			this.NavMenuPnl.Controls.Add(this.WorldTile);
			this.NavMenuPnl.Controls.Add(this.PlayersTile);
			this.NavMenuPnl.Controls.Add(this.HomeTile);
			this.NavMenuPnl.HorizontalScrollbarBarColor = true;
			this.NavMenuPnl.HorizontalScrollbarHighlightOnWheel = false;
			this.NavMenuPnl.HorizontalScrollbarSize = 10;
			this.NavMenuPnl.Location = new Point(1, 60);
			this.NavMenuPnl.Name = "NavMenuPnl";
			this.NavMenuPnl.Size = new Size(159, 641);
			this.NavMenuPnl.TabIndex = 0;
			this.NavMenuPnl.Theme = MetroThemeStyle.Dark;
			this.NavMenuPnl.VerticalScrollbarBarColor = true;
			this.NavMenuPnl.VerticalScrollbarHighlightOnWheel = false;
			this.NavMenuPnl.VerticalScrollbarSize = 10;
			this.NavMenuMgPnl.Controls.Add(this.GlideTile);
			this.NavMenuMgPnl.Controls.Add(this.TumbleTile);
			this.NavMenuMgPnl.Controls.Add(this.BattleTile);
			this.NavMenuMgPnl.Controls.Add(this.GeneralMgTile);
			this.NavMenuMgPnl.Dock = DockStyle.Top;
			this.NavMenuMgPnl.HorizontalScrollbarBarColor = true;
			this.NavMenuMgPnl.HorizontalScrollbarHighlightOnWheel = false;
			this.NavMenuMgPnl.HorizontalScrollbarSize = 10;
			this.NavMenuMgPnl.Location = new Point(0, 275);
			this.NavMenuMgPnl.Name = "NavMenuMgPnl";
			this.NavMenuMgPnl.Size = new Size(159, 159);
			this.NavMenuMgPnl.TabIndex = 8;
			this.NavMenuMgPnl.Theme = MetroThemeStyle.Dark;
			this.NavMenuMgPnl.VerticalScrollbarBarColor = true;
			this.NavMenuMgPnl.VerticalScrollbarHighlightOnWheel = false;
			this.NavMenuMgPnl.VerticalScrollbarSize = 10;
			this.NavMenuMgPnl.Visible = false;
			base.AutoScaleDimensions = new SizeF(96f, 96f);
			base.AutoScaleMode = AutoScaleMode.Dpi;
			base.ClientSize = new Size(1280, 700);
			base.Controls.Add(this.NavMenuPnl);
			base.Controls.Add(this.MainTabs);
			base.Icon = (Icon)componentResourceManager.GetObject("$this.Icon");
			base.MaximizeBox = false;
			this.MinimumSize = new Size(1280, 700);
			base.Name = "MainForm";
			base.Resizable = false;
			base.Style = MetroColorStyle.Default;
			this.Text = "Minecraft: Wii U Mod Injector";
			base.Theme = MetroThemeStyle.Dark;
			base.TransparencyKey = Color.Empty;
			base.FormClosing += this.Exit;
			base.Load += this.Init;
			base.Shown += this.InitShown;
			this.MainTabs.ResumeLayout(false);
			this.MainTab.ResumeLayout(false);
			this.MainTab.PerformLayout();
			this.playersTab.ResumeLayout(false);
			this.playersTab.PerformLayout();
			((ISupportInitialize)this.AirborneSpeedSlider).EndInit();
			((ISupportInitialize)this.WaterDownStrengthSlider).EndInit();
			((ISupportInitialize)this.MaxStackSlider).EndInit();
			((ISupportInitialize)this.XPLevelSlider).EndInit();
			((ISupportInitialize)this.PotionAmplifierSlider).EndInit();
			((ISupportInitialize)this.FrictionSlider).EndInit();
			((ISupportInitialize)this.playerModelScaleSlider).EndInit();
			((ISupportInitialize)this.FieldOfViewSplitSlider).EndInit();
			((ISupportInitialize)this.RiptideFlyingSpeedSlider).EndInit();
			((ISupportInitialize)this.SprintingSpeedScaleSlider).EndInit();
			((ISupportInitialize)this.EnchantmentLevelSlider).EndInit();
			((ISupportInitialize)this.WalkingSpeedScaleSlider).EndInit();
			((ISupportInitialize)this.ReachSlider).EndInit();
			((ISupportInitialize)this.JumpHeightSlider).EndInit();
			((ISupportInitialize)this.FieldOfViewSlider).EndInit();
			((ISupportInitialize)this.HitBoxScaleSlider).EndInit();
			this.worldTab.ResumeLayout(false);
			this.worldTab.PerformLayout();
			((ISupportInitialize)this.FogDistanceSlider).EndInit();
			((ISupportInitialize)this.LiquidSpreadTimeSlider).EndInit();
			((ISupportInitialize)this.EntitySpeedSlider).EndInit();
			this.generalTab.ResumeLayout(false);
			this.generalTab.PerformLayout();
			((ISupportInitialize)this.CursedSlider).EndInit();
			this.MinigamesTab.ResumeLayout(false);
			this.MinigamesTabs.ResumeLayout(false);
			this.GeneralMinigames.ResumeLayout(false);
			this.GeneralMinigames.PerformLayout();
			((ISupportInitialize)this.RequiredPlayersSlider).EndInit();
			this.Battle.ResumeLayout(false);
			this.Battle.PerformLayout();
			((ISupportInitialize)this.RefillIntervalSlider).EndInit();
			this.Tumble.ResumeLayout(false);
			this.Tumble.PerformLayout();
			this.Glide.ResumeLayout(false);
			this.Glide.PerformLayout();
			((ISupportInitialize)this.ringScoreBlue).EndInit();
			((ISupportInitialize)this.ringScoreOrange).EndInit();
			((ISupportInitialize)this.ringScoreGreen).EndInit();
			this.commandsTab.ResumeLayout(false);
			this.commandsTab.PerformLayout();
			this.tellrawPanel.ResumeLayout(false);
			this.tellrawPanel.PerformLayout();
			this.xpPanel.ResumeLayout(false);
			this.gamemodePanel.ResumeLayout(false);
			this.worldPanel.ResumeLayout(false);
			this.playerPanel.ResumeLayout(false);
			this.timePanel.ResumeLayout(false);
			this.enchantPanel.ResumeLayout(false);
			this.giveCommandPanel.ResumeLayout(false);
			this.settingsTab.ResumeLayout(false);
			this.settingsTab.PerformLayout();
			((ISupportInitialize)this.StyleMngr).EndInit();
			this.RightClickMenu.ResumeLayout(false);
			this.NavMenuPnl.ResumeLayout(false);
			this.NavMenuPnl.PerformLayout();
			this.NavMenuMgPnl.ResumeLayout(false);
			base.ResumeLayout(false);
		}
